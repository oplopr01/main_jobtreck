"use client";
"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.tsx
var src_exports = {};
__export(src_exports, {
  Dropdown: () => Dropdown,
  default: () => src_default
});
module.exports = __toCommonJS(src_exports);
var import_react9 = require("react");
var import_react10 = require("@emotion/react");
var import_styled12 = __toESM(require("@emotion/styled"));
var import_deep_equal2 = __toESM(require("@gilbarbara/deep-equal"));

// src/config.ts
var import_is_prop_valid = __toESM(require("@emotion/is-prop-valid"));
var import_deep_equal = __toESM(require("@gilbarbara/deep-equal"));
var SLUG = "react-dropdown";
var defaultProps = {
  autoFocus: true,
  clearOnClose: true,
  clearOnSelect: true,
  closeOnScroll: false,
  closeOnSelect: false,
  comparatorFn: import_deep_equal.default,
  create: false,
  direction: "ltr",
  disabled: false,
  hideHandle: false,
  keepSelectedInList: true,
  loading: false,
  menuPosition: "bottom",
  multi: false,
  placeholder: "Select...",
  searchable: true,
  searchBy: "label",
  secondaryPlaceholder: "",
  showClearButton: false,
  showSeparator: false,
  values: []
};
var styledOptions = {
  shouldForwardProp: (prop) => (0, import_is_prop_valid.default)(prop) && ![
    "color",
    "direction",
    "onClearAll",
    "onCreate",
    "onClose",
    "onOpen",
    "onSelectAll",
    "spacing",
    "width"
  ].includes(prop)
};

// src/modules/colors.ts
function formatHex(input) {
  const color = input.replace("#", "");
  let hex = color;
  if (color.length === 3 || color.length === 4) {
    hex = "";
    [...color].forEach((d) => {
      hex += `${d}${d}`;
    });
  }
  hex = `#${hex}`;
  return hex;
}
function getTextColor(input) {
  return getYiq(input) > 135 ? "#000" : "#fff";
}
function getYiq(color) {
  if (!isValidHex(color)) {
    return 0;
  }
  const { blue, green, red } = hexToRGB(color);
  return (red * 299 + green * 587 + blue * 114) / 1e3;
}
function hexToRGB(input) {
  if (!isValidHex(input)) {
    return {
      red: 0,
      green: 0,
      blue: 0
    };
  }
  const hex = formatHex(input).replace("#", "");
  return {
    red: parseInt(String(hex.charAt(0)) + hex.charAt(1), 16),
    green: parseInt(String(hex.charAt(2)) + hex.charAt(3), 16),
    blue: parseInt(String(hex.charAt(4)) + hex.charAt(5), 16)
  };
}
function hexToRGBA(input, alpha) {
  const { blue, green, red } = hexToRGB(input);
  return `rgba(${red}, ${green}, ${blue}${alpha ? `, ${alpha}` : ""})`;
}
function isValidHex(input) {
  return /^#([\dA-Fa-f]{6}|[\dA-Fa-f]{3})$/.test(input);
}

// src/modules/helpers.ts
var import_react_innertext = __toESM(require("react-innertext"));
function canUseDOM() {
  return !!(typeof window !== "undefined" && window.document && window.document.createElement);
}
function debounce(fn, delay = 0) {
  let timerId;
  return (...arguments_) => {
    if (timerId) {
      clearTimeout(timerId);
    }
    timerId = window.setTimeout(() => {
      fn(...arguments_);
      timerId = 0;
    }, delay);
  };
}
function getAllOptions(options, values) {
  const nextValues = options.filter((option) => !option.disabled);
  if (values.length) {
    values.forEach((value) => {
      if (!nextValues.some((option) => option.value === value.value)) {
        nextValues.push(value);
      }
    });
  }
  return nextValues;
}
function getComponentMinHeight(minHeight, amount = 2) {
  return px(minHeight - amount);
}
function getCursor(cursor, type, values = []) {
  const total = values.length;
  const lastValidIndex = values.map((item) => !!item.disabled).lastIndexOf(false);
  const disabled = values.reduce((acc, value, index) => {
    if (value.disabled) {
      acc.push(index);
    }
    return acc;
  }, []);
  const getNextCursor = (nextCursor) => {
    if (type === "down") {
      if (nextCursor === total) {
        return 0;
      }
      if (disabled.includes(nextCursor)) {
        return getNextCursor(nextCursor + 1);
      }
    } else if (type === "up") {
      if (nextCursor < 0) {
        return lastValidIndex;
      }
      if (disabled.includes(nextCursor)) {
        return getNextCursor(nextCursor - 1);
      }
    }
    return nextCursor;
  };
  if (cursor === null) {
    return type === "down" ? 0 : lastValidIndex;
  } else if (type === "down") {
    return getNextCursor(cursor + 1);
  } else if (type === "up") {
    return getNextCursor(cursor - 1);
  }
  return cursor;
}
function getLabels(labels) {
  const {
    clear = "Clear",
    create = "Add {search}",
    disabled = "disabled",
    noData = "No data",
    toggle = "Toggle"
  } = labels || {};
  return {
    clear,
    create,
    disabled,
    noData,
    toggle
  };
}
function getOptionData(input, key) {
  const value = input[key];
  if (!isString(value) && !isNumber(value)) {
    return (0, import_react_innertext.default)(value);
  }
  return value;
}
function getPosition(props, list) {
  const {
    methods: { getDropdownRef, getStyles: getStylesMethod },
    props: { menuPosition = defaultProps.menuPosition }
  } = props;
  const dropdown = getDropdownRef();
  const { gap } = getStylesMethod();
  const spacing = 16;
  if (menuPosition !== "auto" || !list || !dropdown) {
    return menuPosition;
  }
  const { bottom } = dropdown.getBoundingClientRect();
  const { height } = list.getBoundingClientRect();
  const viewportHeight = isomorphicWindow().innerHeight;
  const totalHeight = bottom + height + gap + spacing;
  if (totalHeight > viewportHeight) {
    return "top";
  }
  return "bottom";
}
function getStyles(styles) {
  const {
    bgColor = "#fff",
    borderColor = "#ccc",
    borderRadius = "4px",
    color = "#1E90FF",
    disabledItemBgColor = "#f2f2f2",
    disabledItemColor = "#999",
    gap = 2,
    hoverColor,
    hoverOpacity = 0.2,
    menuMaxHeight = 300,
    minHeight = 36,
    placeholderColor = "#999",
    spacingX = 12,
    spacingY = 8,
    width = "100%"
  } = styles || {};
  return {
    bgColor,
    borderColor,
    borderRadius: px(borderRadius),
    color,
    disabledItemBgColor,
    disabledItemColor,
    gap,
    hoverColor: hoverColor || color,
    hoverOpacity,
    menuMaxHeight,
    minHeight,
    placeholderColor,
    spacingX: px(spacingX),
    spacingY: px(spacingY),
    width: px(width)
  };
}
function isomorphicWindow() {
  if (typeof window === "undefined") {
    return {
      innerHeight: 0
    };
  }
  return window;
}
function isNumber(input) {
  return typeof input === "number";
}
function isString(input) {
  return typeof input === "string";
}
function matchOptions(options, search, strict = true) {
  return options.some((d) => {
    const label = strict ? getOptionData(d, "label") === search : getOptionData(d, "label").includes(String(search));
    const value = strict ? getOptionData(d, "value") === search : String(getOptionData(d, "value")).includes(String(search));
    return label || value;
  });
}
function px(input) {
  return isString(input) ? input : `${input}px`;
}

// src/components/Clear.tsx
var import_styled = __toESM(require("@emotion/styled"));

// src/icons/Times.tsx
var import_jsx_runtime = require("react/jsx-runtime");
function Times({ size = 8 }) {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
    "svg",
    {
      height: px(size),
      preserveAspectRatio: "xMidYMid",
      version: "1.1",
      viewBox: "0 0 16 16",
      width: px(size),
      xmlns: "http://www.w3.org/2000/svg",
      children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("g", { children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M0.313174194,0.313176288 C0.730750479,-0.104392096 1.40776019,-0.104392096 1.82533647,0.313176288 L7.99996524,6.48786773 L14.174701,0.313176288 C14.5922452,-0.104392096 15.2692976,-0.104392096 15.6868418,0.313176288 C16.1043861,0.730755364 16.1043861,1.4077696 15.6868418,1.82534867 L9.51210613,8.00001873 L15.6867349,14.1746887 C16.1042791,14.5922357 16.1042791,15.2692928 15.6867349,15.6868398 C15.2691907,16.1043867 14.5921382,16.1043867 14.174594,15.6868398 L7.99996524,9.51216972 L1.82538994,15.6868398 C1.40782434,16.1043867 0.730814635,16.1043867 0.313238349,15.6868398 C-0.104327243,15.2692928 -0.104327243,14.5922357 0.313238349,14.1746887 L6.48782435,8.00001873 L0.313174194,1.82534867 C-0.104391398,1.4077696 -0.104391398,0.730755364 0.313174194,0.313176288 Z",
          fill: "currentColor"
        }
      ) })
    }
  );
}
var Times_default = Times;

// src/components/Clear.tsx
var import_jsx_runtime2 = require("react/jsx-runtime");
var StyledClear = import_styled.default.div`
  align-items: center;
  color: ${({ bgColor }) => getTextColor(bgColor)};
  display: inline-flex;
  justify-content: center;
  min-height: ${({ minHeight }) => getComponentMinHeight(minHeight)};
  width: 24px;

  :focus {
    outline: none;
  }

  :hover {
    fill: ${({ hoverColor }) => hoverColor};
  }
`;
function Clear(props) {
  const {
    methods: { clearAll, getLabels: getLabels2, getStyles: getStyles2 },
    props: { clearComponent }
  } = props;
  const { clear } = getLabels2();
  if (clearComponent) {
    return clearComponent(props);
  }
  const handleClick = (event) => {
    event.stopPropagation();
    clearAll();
  };
  return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
    StyledClear,
    {
      "aria-label": clear,
      className: `${SLUG}-clear`,
      "data-component-name": "DropdownClear",
      onClick: handleClick,
      title: clear,
      ...getStyles2(),
      children: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(Times_default, {})
    }
  );
}

// src/components/Content.tsx
var import_styled4 = __toESM(require("@emotion/styled"));

// src/components/Input.tsx
var import_react2 = require("react");
var import_react3 = require("@emotion/react");
var import_styled2 = __toESM(require("@emotion/styled"));

// src/modules/hooks.ts
var import_react = require("react");
function usePrevious(value) {
  const ref = (0, import_react.useRef)();
  (0, import_react.useEffect)(() => {
    ref.current = value;
  }, [value]);
  return ref.current;
}

// src/components/Input.tsx
var import_jsx_runtime3 = require("react/jsx-runtime");
var StyledInput = import_styled2.default.input((props) => {
  const { bgColor, placeholderColor, readOnly, size } = props;
  return import_react3.css`
    background-color: transparent;
    border: none;
    color: ${getTextColor(bgColor)};
    ${readOnly && "cursor: pointer;"}
    font-size: inherit;
    line-height: inherit;
    padding: 0;
    width: ${`${size}ch`};

    &:focus {
      outline: none;
    }

    &::placeholder {
      color: ${placeholderColor};
    }
  `;
});
function getPlaceholder({ props, state }) {
  const { placeholder, searchable, secondaryPlaceholder } = props;
  const hasValues = state.values && state.values.length > 0;
  if (hasValues && secondaryPlaceholder && searchable) {
    return secondaryPlaceholder;
  }
  if (!hasValues) {
    return placeholder;
  } else if (!searchable) {
    return "";
  }
  return "";
}
function Input(props) {
  const {
    methods: { createItem, getInputSize, getStyles: getStyles2, setSearch },
    props: { autoFocus, create, disabled, inputComponent, options, searchable },
    state: { cursor, search, status, values }
  } = props;
  const ref = (0, import_react2.useRef)(null);
  const previousStatus = usePrevious(status);
  (0, import_react2.useEffect)(() => {
    if (previousStatus !== status && status && autoFocus) {
      ref.current?.focus();
    }
    if (previousStatus !== status && !status) {
      ref.current?.blur();
    }
  }, [autoFocus, status, previousStatus]);
  const handleBlur = (event) => {
    event.stopPropagation();
    if (!status) {
      ref.current?.blur();
      return;
    }
    ref.current?.focus();
  };
  const handleKeyDown = (event) => {
    if (create && event.key === "Enter" && !matchOptions([...values, ...options], search, false) && search && cursor === null) {
      createItem(search);
    }
  };
  if (inputComponent) {
    return inputComponent({ ...props, inputRef: ref });
  }
  return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
    StyledInput,
    {
      ref,
      className: `${SLUG}-input`,
      "data-component-name": "DropdownInput",
      disabled,
      onBlur: handleBlur,
      onChange: setSearch,
      onKeyDown: handleKeyDown,
      placeholder: getPlaceholder(props),
      readOnly: !searchable,
      size: getInputSize(),
      tabIndex: -1,
      value: search,
      ...getStyles2()
    }
  );
}

// src/components/Option.tsx
var import_react4 = require("@emotion/react");
var import_styled3 = __toESM(require("@emotion/styled"));
var import_jsx_runtime4 = require("react/jsx-runtime");
var StyledOption = import_styled3.default.span((props) => {
  const { color, direction } = props;
  return import_react4.css`
    align-items: center;
    background-color: ${color};
    border-radius: 2px;
    color: ${getTextColor(color)};
    display: flex;
    flex-direction: ${direction === "rtl" ? "row-reverse" : "row"};
    line-height: 1;
    margin: 3px 6px 3px 0;
    padding: 4px;

    :hover,
    :hover > span {
      opacity: 0.9;
    }
  `;
});
var RemoveButton = import_styled3.default.button`
  align-items: center;
  appearance: none;
  background-color: transparent;
  border: none;
  color: ${({ color }) => getTextColor(color)};
  cursor: pointer;
  display: inline-flex;
  height: 16px;
  justify-content: center;
  margin-left: 4px;
  padding: 0;
  width: 16px;
`;
function Option(props) {
  const {
    item,
    methods: { removeItem },
    props: {
      closeOnSelect = defaultProps.closeOnSelect,
      direction = defaultProps.direction,
      optionComponent,
      styles
    }
  } = props;
  if (optionComponent) {
    return optionComponent(props);
  }
  return /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(
    StyledOption,
    {
      className: `${SLUG}-option`,
      "data-component-name": "DropdownOption",
      direction,
      role: "listitem",
      ...getStyles(styles),
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("span", { className: `${SLUG}-option-label`, children: getOptionData(item, "label") }),
        /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
          RemoveButton,
          {
            className: `${SLUG}-option-remove`,
            "data-component-name": "DropdownOptionRemove",
            onClick: (event) => removeItem(event, item, closeOnSelect),
            role: "presentation",
            ...getStyles(styles),
            children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(Times_default, {})
          }
        )
      ]
    }
  );
}

// src/components/Content.tsx
var import_jsx_runtime5 = require("react/jsx-runtime");
var StyledContent = import_styled4.default.div`
  display: flex;
  flex: 1;
  flex-wrap: wrap;
  min-height: ${({ minHeight }) => getComponentMinHeight(minHeight)};
  padding: 2px ${({ spacingX }) => spacingX};

  > span + input {
    margin-left: 6px;
  }
`;
var StyledSingleOption = import_styled4.default.span`
  align-items: center;
  align-self: stretch;
  box-sizing: border-box;
  color: ${({ bgColor }) => getTextColor(bgColor)};
  display: inline-flex;
  justify-content: center;
`;
function Content(props) {
  const {
    methods: { getStyles: getStyles2, setStatus },
    props: { contentComponent, multi, onClickSelector, searchable },
    state: { status, values }
  } = props;
  const handleClick = (event) => {
    setStatus("toggle", event);
    if (onClickSelector) {
      onClickSelector(status);
    }
  };
  return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
    StyledContent,
    {
      className: `${SLUG}-content ${multi ? `${SLUG}-type-multi` : `${SLUG}-type-single`}`,
      onClick: handleClick,
      ...getStyles2(),
      children: contentComponent ? contentComponent(props) : /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)(import_jsx_runtime5.Fragment, { children: [
        multi ? values.map((item) => /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
          Option,
          {
            item,
            ...props
          },
          `${getOptionData(item, "label")}${getOptionData(item, "value")}`
        )) : !!values.length && /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(StyledSingleOption, { "data-component-name": "DropdownSingleOption", ...getStyles2(), children: getOptionData(values[0], "label") }),
        (!values.length || searchable) && /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(Input, { ...props })
      ] })
    }
  );
}

// src/components/Handle.tsx
var import_is_prop_valid2 = __toESM(require("@emotion/is-prop-valid"));
var import_styled5 = __toESM(require("@emotion/styled"));

// src/icons/Arrow.tsx
var import_jsx_runtime6 = require("react/jsx-runtime");
function Arrow({ size = 12 }) {
  return /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
    "svg",
    {
      height: px(size),
      preserveAspectRatio: "xMidYMid",
      version: "1.1",
      viewBox: "0 0 16 16",
      width: px(size),
      xmlns: "http://www.w3.org/2000/svg",
      children: /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("g", { transform: "translate(0.0 3.5)", children: /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
        "path",
        {
          d: "M14.6367713,0 C14.7802691,0 14.9237668,0.0461538462 15.0672646,0.138461538 L15.8565022,0.969230769 C15.9521674,1.06153846 16,1.17692308 16,1.31538462 C16,1.45384615 15.9521674,1.56923077 15.8565022,1.66153846 L8.39461883,8.86153846 C8.29895366,8.95384615 8.1793722,9 8.03587444,9 C7.89237668,9 7.74887892,8.95384615 7.60538117,8.86153846 L0.143497758,1.66153846 C0.0478325859,1.56923077 0,1.45384615 0,1.31538462 C0,1.17692308 0.0478325859,1.06153846 0.143497758,0.969230769 L1.0044843,0.138461538 C1.10014948,0.0461538462 1.21973094,0 1.3632287,0 C1.50672646,0 1.62630792,0.0461538462 1.72197309,0.138461538 L8.03587444,6.23076923 L14.2780269,0.138461538 C14.3736921,0.0461538462 14.4932735,0 14.6367713,0 Z",
          fill: "currentColor"
        }
      ) })
    }
  );
}

// src/components/Handle.tsx
var import_jsx_runtime7 = require("react/jsx-runtime");
var StyledHandle = (0, import_styled5.default)("div", {
  shouldForwardProp: (prop) => (0, import_is_prop_valid2.default)(prop) && prop !== "rotate"
})`
  align-self: stretch;
  align-items: start;
  color: ${({ bgColor }) => getTextColor(bgColor)};
  cursor: pointer;
  display: flex;

  :hover {
    path {
      fill: ${({ hoverColor }) => hoverColor};
    }
  }

  :focus {
    outline: none;

    path {
      fill: ${({ hoverColor }) => hoverColor};
    }
  }

  > div {
    align-items: center;
    display: inline-flex;
    height: ${({ minHeight }) => getComponentMinHeight(minHeight)};
    justify-content: center;
    min-width: 30px;
    transition: transform 0.2s ease-in-out;
    transform: rotate(${({ status }) => status ? 180 : 0}deg);
  }
`;
function Handle(props) {
  const {
    methods: { getDropdownRef, getLabels: getLabels2, getStyles: getStyles2, setStatus },
    props: { handleComponent, onClickSelector },
    state: { status }
  } = props;
  const { toggle } = getLabels2();
  const handleClick = (event) => {
    getDropdownRef()?.focus();
    setStatus("toggle", event);
    if (onClickSelector) {
      onClickSelector(status);
    }
  };
  return /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
    StyledHandle,
    {
      "aria-label": toggle,
      className: `${SLUG}-handle`,
      "data-component-name": "DropdownHandle",
      onClick: handleClick,
      status,
      tabIndex: 0,
      title: toggle,
      ...getStyles2(),
      children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("div", { children: handleComponent ? handleComponent(props) : /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(Arrow, {}) })
    }
  );
}

// src/components/Loading.tsx
var import_styled6 = __toESM(require("@emotion/styled"));

// src/icons/Spinner.tsx
var import_jsx_runtime8 = require("react/jsx-runtime");
function Spinner({ size = 12 }) {
  return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(
    "svg",
    {
      height: px(size),
      preserveAspectRatio: "xMidYMid",
      version: "1.1",
      viewBox: "0 0 16.0 16.0",
      width: px(size),
      xmlns: "http://www.w3.org/2000/svg",
      children: /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)("g", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(
          "path",
          {
            d: "M8,0 L8,2.4 C4.907208,2.4 2.4,4.907208 2.4,8 L0,8 C0,3.58172 3.58172,0 8,0 Z",
            fill: "currentColor"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(
          "path",
          {
            d: "M8,0 C12.41824,0 16,3.58172 16,8 C16,12.41824 12.41824,16 8,16 C3.58172,16 0,12.41824 0,8 C0,3.58172 3.58172,0 8,0 Z M8,2.4 C4.907208,2.4 2.4,4.907208 2.4,8 C2.4,11.0928 4.907208,13.6 8,13.6 C11.0928,13.6 13.6,11.0928 13.6,8 C13.6,4.907208 11.0928,2.4 8,2.4 Z",
            fill: "currentColor",
            fillOpacity: "0.3"
          }
        )
      ] })
    }
  );
}

// src/components/Loading.tsx
var import_jsx_runtime9 = require("react/jsx-runtime");
var StyledLoading = import_styled6.default.div`
  @keyframes spin {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

  align-items: center;
  color: ${({ bgColor }) => getTextColor(bgColor)};
  cursor: pointer;
  display: inline-flex;
  justify-content: center;
  min-height: ${({ minHeight }) => getComponentMinHeight(minHeight)};
  width: 24px;

  path:nth-of-type(1) {
    transform-origin: 50% 50%;
    animation: spin 1s linear infinite;
  }
`;
function Loading(props) {
  const {
    methods: { getStyles: getStyles2 },
    props: { loaderComponent }
  } = props;
  if (loaderComponent) {
    return loaderComponent(props);
  }
  return /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(StyledLoading, { className: `${SLUG}-loading`, ...getStyles2(), children: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(Spinner, {}) });
}
var Loading_default = Loading;

// src/components/Menu.tsx
var import_react7 = require("react");
var import_react8 = require("@emotion/react");
var import_styled10 = __toESM(require("@emotion/styled"));

// src/components/Create.tsx
var import_styled7 = __toESM(require("@emotion/styled"));
var import_jsx_runtime10 = require("react/jsx-runtime");
var StyledCreate = import_styled7.default.div`
  color: ${({ color }) => color};
  padding: 5px 10px;

  :hover,
  :focus {
    background-color: ${({ color }) => hexToRGBA(color, 0.1)};
    outline: none;
    cursor: pointer;
  }

  &.${SLUG}-create-active {
    background-color: ${({ color }) => color};
    color: ${({ color }) => getTextColor(color)};
  }
`;
function Create(props) {
  const {
    methods: { createItem, getLabels: getLabels2, getStyles: getStyles2 },
    props: { create, options },
    state: { cursor, search, values }
  } = props;
  const shouldRender = create && search && !matchOptions([...values, ...options], search, false);
  const { create: createLabel } = getLabels2();
  const handleClick = (event) => {
    event.stopPropagation();
    createItem(search);
  };
  if (!shouldRender) {
    return null;
  }
  const classes = [`${SLUG}-create`];
  if (cursor === 0) {
    classes.push(`${SLUG}-create-active`);
  }
  return /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
    StyledCreate,
    {
      className: classes.join(" "),
      "data-component-name": "DropdownCreate",
      onClick: handleClick,
      role: "button",
      ...getStyles2(),
      children: createLabel.replace("{search}", `"${search}"`)
    }
  );
}

// src/components/MenuItem.tsx
var import_react5 = require("react");
var import_react6 = require("@emotion/react");
var import_styled8 = __toESM(require("@emotion/styled"));
var import_jsx_runtime11 = require("react/jsx-runtime");
var StyledMenuItem = import_styled8.default.div((props) => {
  const {
    bgColor,
    color,
    disabled,
    disabledItemBgColor,
    disabledItemColor,
    hoverColor,
    hoverOpacity,
    spacingX,
    spacingY
  } = props;
  return import_react6.css`
    color: ${getTextColor(bgColor)};
    cursor: pointer;
    padding: ${spacingY} ${spacingX};

    &.${SLUG}-item-active {
      ${!disabled && `background-color: ${hexToRGBA(color, 0.2)};`}
    }

    + div {
      border-top: 1px solid #fff;
    }

    :hover,
    :focus {
      background-color: ${hexToRGBA(hoverColor, hoverOpacity)};
      outline: none;
    }

    &.${SLUG}-item-selected {
      background-color: ${color};
      color: ${getTextColor(color)};

      &.${SLUG}-item-active {
        background-color: ${hexToRGBA(color, 0.9)};
      }
    }

    ${disabled && import_react6.css`
      background-color: ${disabledItemBgColor} !important;
      color: ${disabledItemColor} !important;
      cursor: not-allowed;

      ins {
        border-radius: 2px;
        border: 1px solid ${disabledItemColor};
        font-size: x-small;
        padding: 0 3px;
        text-decoration: none;
        text-transform: uppercase;
      }
    `}
  `;
});
function MenuItem(props) {
  const {
    item,
    itemIndex,
    methods: { addItem, getLabels: getLabels2, getStyles: getStyles2, isSelected, removeItem },
    props: { keepSelectedInList, menuItemComponent },
    state: { cursor }
  } = props;
  const ref = (0, import_react5.useRef)(null);
  const disabled = item.disabled || false;
  const { disabled: disabledLabel } = getLabels2();
  (0, import_react5.useEffect)(() => {
    if (cursor === itemIndex) {
      ref.current?.scrollIntoView({ behavior: "smooth", block: "nearest", inline: "start" });
    }
  }, [cursor, itemIndex]);
  const handleClick = (event) => {
    event.stopPropagation();
    if (disabled) {
      return;
    }
    if (isSelected(item)) {
      removeItem(null, item, false);
    } else {
      addItem(item);
    }
  };
  if (menuItemComponent) {
    return menuItemComponent(props);
  }
  if (!keepSelectedInList && isSelected(item)) {
    return null;
  }
  const classes = [`${SLUG}-item`];
  if (isSelected(item)) {
    classes.push(`${SLUG}-item-selected`);
  }
  if (cursor === itemIndex) {
    classes.push(`${SLUG}-item-active`);
  }
  if (disabled) {
    classes.push(`${SLUG}-item-disabled`);
  }
  return /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)(
    StyledMenuItem,
    {
      ref,
      "aria-disabled": disabled,
      "aria-label": getOptionData(item, "label"),
      "aria-selected": isSelected(item),
      className: classes.join(" "),
      "data-component-name": "DropdownMenuItem",
      disabled,
      onClick: handleClick,
      role: "option",
      tabIndex: -1,
      ...getStyles2(),
      style: item.style,
      children: [
        getOptionData(item, "label"),
        " ",
        disabled && /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("ins", { children: disabledLabel })
      ]
    },
    `${getOptionData(item, "value")}${getOptionData(item, "label")}`
  );
}

// src/components/NoData.tsx
var import_styled9 = __toESM(require("@emotion/styled"));
var import_jsx_runtime12 = require("react/jsx-runtime");
var StyledNoData = import_styled9.default.div`
  color: ${({ color }) => color};
  padding: 10px;
  text-align: center;
`;
function NoData(props) {
  const {
    methods: { getLabels: getLabels2, getStyles: getStyles2 },
    props: { noDataComponent }
  } = props;
  const { noData } = getLabels2();
  if (noDataComponent) {
    return noDataComponent(props);
  }
  return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
    StyledNoData,
    {
      className: `${SLUG}-no-data`,
      "data-component-name": "DropdownNoData",
      ...getStyles2(),
      children: noData
    }
  );
}
var NoData_default = NoData;

// src/components/Menu.tsx
var import_jsx_runtime13 = require("react/jsx-runtime");
var StyledMenu = (0, import_styled10.default)("div")((props) => {
  const {
    bgColor,
    borderColor,
    borderRadius,
    dropdownBounds,
    gap,
    isVisible,
    menuMaxHeight,
    position
  } = props;
  const borderWidth = 2;
  return import_react8.css`
    background-color: ${bgColor};
    border-radius: ${borderRadius};
    border: 1px solid ${borderColor};
    box-shadow: 0 0 10px 0 ${hexToRGBA("#000000", 0.2)};
    display: flex;
    flex-direction: column;
    left: -1px;
    max-height: ${px(menuMaxHeight)};
    opacity: ${isVisible ? 1 : 0};
    overflow: auto;
    position: absolute;
    width: ${dropdownBounds.width}px;
    z-index: 9;
    ${position === "top" ? `bottom: ${dropdownBounds.height + borderWidth + gap}px` : `top: ${dropdownBounds.height + borderWidth + gap}px`};

    :focus {
      outline: none;
    }
  }
  `;
});
function Menu(props) {
  const {
    methods: { getStyles: getStyles2 },
    props: { menuComponent },
    state: { dropdownBounds, searchResults }
  } = props;
  const listRef = (0, import_react7.useRef)(null);
  const [isVisible, setVisible] = (0, import_react7.useState)(false);
  (0, import_react7.useEffect)(() => {
    setVisible(true);
  }, []);
  const position = getPosition(props, listRef.current);
  return /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(
    StyledMenu,
    {
      ref: listRef,
      className: `${SLUG}-menu ${SLUG}-menu-position-${position}`,
      "data-component-name": "DropdownMenu",
      dropdownBounds,
      isVisible,
      position,
      role: "list",
      tabIndex: -1,
      ...getStyles2(),
      children: menuComponent ? menuComponent(props) : /* @__PURE__ */ (0, import_jsx_runtime13.jsxs)(import_jsx_runtime13.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(Create, { ...props }),
        searchResults.length ? searchResults.map((item, itemIndex) => /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(MenuItem, { item, itemIndex, ...props }, item.value)) : /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(NoData_default, { ...props })
      ] })
    }
  );
}
var Menu_default = Menu;

// src/components/Separator.tsx
var import_styled11 = __toESM(require("@emotion/styled"));
var import_jsx_runtime14 = require("react/jsx-runtime");
var StyledSeparator = import_styled11.default.div`
  align-self: stretch;
  background-color: ${({ borderColor }) => borderColor};
  display: block;
  width: 1px;
`;
function Separator(props) {
  const {
    methods: { getStyles: getStyles2 },
    props: { separatorComponent }
  } = props;
  if (separatorComponent) {
    return separatorComponent(props);
  }
  return /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(StyledSeparator, { className: `${SLUG}-separator`, ...getStyles2() });
}

// src/index.tsx
var import_jsx_runtime15 = require("react/jsx-runtime");
var ReactDropdown = (0, import_styled12.default)(
  "div",
  styledOptions
)((props) => {
  const { bgColor, borderColor, borderRadius, color, direction, disabled, minHeight, width } = props;
  return import_react10.css`
    align-items: start;
    background-color: ${bgColor};
    border-radius: ${borderRadius};
    border: 1px solid ${borderColor};
    box-sizing: border-box;
    cursor: pointer;
    direction: ${direction};
    display: flex;
    flex-direction: row;
    min-height: ${px(minHeight)};
    position: relative;
    width: ${width};
    ${disabled ? `
      cursor: not-allowed;
      opacity: 0.6;
      pointer-events: none;
      ` : `
      pointer-events: all;
      `};

    :hover,
    :focus-within {
      border-color: ${color};
    }

    :focus,
    :focus-within {
      outline: 0;
      box-shadow: 0 0 0 3px ${hexToRGBA(color, 0.2)};
    }

    * {
      box-sizing: border-box;
    }
  `;
});
var Dropdown = class extends import_react9.Component {
  dropdownRef;
  methods;
  static defaultProps = defaultProps;
  constructor(props) {
    super(props);
    this.state = {
      cursor: null,
      dropdownBounds: {},
      search: "",
      searchResults: props.options,
      status: props.open || false,
      values: props.values || []
    };
    this.methods = {
      addItem: this.addItem,
      areAllSelected: this.areAllSelected,
      clearAll: this.clearAll,
      createItem: this.createItem,
      // eslint-disable-next-line react/destructuring-assignment
      getDropdownBounds: () => this.state.dropdownBounds,
      getDropdownRef: () => this.dropdownRef.current,
      getInputSize: this.getInputSize,
      getLabels: this.getLabels,
      getOptionData: this.getOptionData,
      getStyles: this.getStyles,
      handleKeyDown: this.handleKeyDown,
      isSelected: this.isSelected,
      removeItem: this.removeItem,
      safeString: this.safeString,
      searchResults: this.searchResults,
      selectAll: this.selectAll,
      setSearch: this.setSearch,
      setStatus: this.setStatus,
      toggleAll: this.toggleAll
    };
    this.dropdownRef = (0, import_react9.createRef)();
  }
  componentDidMount() {
    if (!canUseDOM()) {
      return;
    }
    window.addEventListener("resize", this.handleResize, true);
    window.addEventListener("scroll", this.handleScroll, true);
    if (this.dropdownRef) {
      this.updateDropdownBounds();
    }
  }
  componentDidUpdate(previousProps, previousState) {
    const { search, status, values: stateValues } = this.state;
    const {
      closeOnSelect,
      comparatorFn = defaultProps.comparatorFn,
      multi,
      onChange,
      onClose,
      onOpen,
      open,
      options,
      values = []
    } = this.props;
    if (!comparatorFn(previousProps.values || [], values) && comparatorFn(previousProps.values || [], previousState.values)) {
      this.setState({ values });
      this.updateDropdownBounds();
    }
    if (!comparatorFn(previousProps.options, options)) {
      this.setState({ searchResults: this.searchResults() });
    }
    if (!comparatorFn(previousState.values, stateValues)) {
      this.updateDropdownBounds();
      if (onChange) {
        onChange(stateValues);
      }
    }
    if (previousState.search !== search) {
      this.updateDropdownBounds();
    }
    if (!(0, import_deep_equal2.default)(previousState.values, stateValues) && closeOnSelect) {
      this.setStatus("close");
    }
    if (previousProps.open !== open && typeof open === "boolean") {
      this.setStatus(open ? "open" : "close");
    }
    if (previousProps.multi !== multi) {
      this.updateDropdownBounds();
    }
    if (previousState.status && !status) {
      document.removeEventListener("click", this.handleClickOutside);
      this.setState({ cursor: null });
      if (onClose) {
        onClose();
      }
    }
    if (!previousState.status && status) {
      document.addEventListener("click", this.handleClickOutside);
      if (onOpen) {
        onOpen();
      }
    }
  }
  componentWillUnmount() {
    if (!canUseDOM()) {
      return;
    }
    window.removeEventListener("resize", this.handleResize, true);
    window.removeEventListener("scroll", this.handleScroll, true);
    document.removeEventListener("click", this.handleClickOutside);
  }
  handleClickOutside = (event) => {
    const { current } = this.dropdownRef;
    const { target } = event;
    if (!current || !target) {
      return;
    }
    if (current === target || !current.contains(target)) {
      this.setStatus("close");
    }
  };
  handleKeyDown = (event) => {
    const { cursor, search, searchResults, status, values } = this.state;
    const { create } = this.props;
    if (["ArrowDown", "ArrowUp"].includes(event.key)) {
      event.stopPropagation();
    }
    switch (event.key) {
      case "ArrowDown": {
        if (!status) {
          this.setStatus("open");
          this.setState({
            cursor: 0
          });
          return;
        }
        this.setState({
          cursor: getCursor(cursor, "down", searchResults)
        });
        break;
      }
      case "ArrowUp": {
        this.setState({
          cursor: getCursor(cursor, "up", searchResults)
        });
        break;
      }
      case "Backspace": {
        if (isNumber(cursor) && !search.length) {
          const nextValues = values.filter((value) => !(0, import_deep_equal2.default)(value, searchResults[cursor]));
          if (nextValues.length !== values.length) {
            this.setState({
              values: nextValues
            });
          }
        }
        break;
      }
      case "Enter": {
        if (isNumber(cursor)) {
          const currentItem = searchResults[cursor];
          if (currentItem && !currentItem.disabled) {
            if (create && matchOptions(values, search, false)) {
              return;
            }
            this.addItem(currentItem);
          } else if (search) {
            this.createItem(search);
          }
        } else if (!search) {
          this.setStatus("toggle", event);
        }
        break;
      }
      case "Escape": {
        this.setStatus("close");
        break;
      }
    }
  };
  // eslint-disable-next-line react/sort-comp
  handleResize = debounce(() => {
    this.updateDropdownBounds();
  }, 150);
  handleScroll = debounce(() => {
    const { status } = this.state;
    const { closeOnScroll } = this.props;
    this.updateDropdownBounds();
    if (closeOnScroll && status) {
      this.setStatus("close");
    }
  }, 150);
  setStatus = (action, event) => {
    const { search, status } = this.state;
    const { clearOnClose, closeOnScroll, closeOnSelect, open, options } = this.props;
    const target = event && (event.target || event.currentTarget);
    const isMenuTarget = target && target.offsetParent && target.offsetParent.classList.contains("react-dropdown-menu");
    if (!closeOnScroll && !closeOnSelect && event && isMenuTarget) {
      return;
    }
    if (typeof open === "boolean") {
      this.setState({ status: open });
      return;
    }
    if (action === "close" && status) {
      this.dropdownRef.current?.blur();
      this.setState({
        status: false,
        search: clearOnClose ? "" : search,
        searchResults: options
      });
      return;
    }
    if (action === "open" && !status) {
      this.setState({ status: true });
      return;
    }
    if (action === "toggle") {
      this.dropdownRef.current?.focus();
      this.setState({ status: !status });
    }
  };
  updateDropdownBounds = () => {
    if (this.dropdownRef.current) {
      this.setState({
        dropdownBounds: this.dropdownRef.current.getBoundingClientRect()
      });
    }
  };
  getInputSize = () => {
    const { placeholder, secondaryPlaceholder } = this.props;
    const { search, values } = this.state;
    if (search) {
      return search.length;
    }
    if (secondaryPlaceholder && values.length) {
      return secondaryPlaceholder.length;
    }
    return values.length ? 3 : placeholder?.length || 0;
  };
  getLabels = () => {
    const { labels } = this.props;
    return getLabels(labels);
  };
  // eslint-disable-next-line class-methods-use-this
  getOptionData = (input, key) => key === "label" ? getOptionData(input, "label") : getOptionData(input, "value");
  getStyles = () => {
    const { styles } = this.props;
    return getStyles(styles);
  };
  addItem = (item) => {
    const { values } = this.state;
    const { clearOnSelect, multi } = this.props;
    if (multi) {
      if (matchOptions(values, getOptionData(item, "value"))) {
        this.removeItem(null, item, false);
        return;
      }
      this.setState({
        values: [...values, item]
      });
    } else {
      this.setState({
        values: [item]
      });
      this.setStatus("close");
    }
    if (clearOnSelect) {
      this.setState({ search: "" });
    }
  };
  removeItem = (event, item, close = false) => {
    const { values } = this.state;
    if (event) {
      event.preventDefault();
      event.stopPropagation();
    }
    if (close) {
      this.setStatus("close");
    }
    this.setState({
      values: values.filter((data) => getOptionData(data, "value") !== getOptionData(item, "value"))
    });
  };
  setSearch = (event) => {
    this.setState(
      {
        cursor: null,
        search: event.target.value
      },
      () => {
        this.setState({ searchResults: this.searchResults() });
      }
    );
  };
  areAllSelected = () => {
    const { options } = this.props;
    const { values } = this.state;
    return values.length === getAllOptions(options, values).length;
  };
  clearAll = () => {
    const { onClearAll } = this.props;
    if (onClearAll) {
      onClearAll();
    }
    this.setState({
      values: []
    });
  };
  createItem = (search) => {
    const { onCreate, options } = this.props;
    const newValue = {
      label: search,
      value: search
    };
    this.addItem(newValue);
    if (onCreate) {
      onCreate(search, () => this.setStatus("close"));
    }
    this.setState({ search: "", searchResults: [...options, newValue] });
  };
  isSelected = (option) => {
    const { values } = this.state;
    return values.some((value) => getOptionData(value, "value") === getOptionData(option, "value"));
  };
  selectAll = (valuesList = []) => {
    const { values } = this.state;
    const { onSelectAll, options } = this.props;
    if (onSelectAll) {
      onSelectAll();
    }
    const nextValues = valuesList.length ? valuesList : getAllOptions(options, values);
    this.setState({ values: nextValues });
  };
  toggleAll = () => {
    const { values } = this.state;
    if (values.length) {
      this.clearAll();
    } else {
      this.selectAll();
    }
  };
  // eslint-disable-next-line class-methods-use-this
  safeString = (input) => input.replace(/[$()*+.?[\\\]^{|}]/g, "\\$&");
  searchFn = () => {
    const { search } = this.state;
    const { options, searchBy = "label" } = this.props;
    const regexp = new RegExp(this.safeString(search), "i");
    return options.filter((item) => regexp.test(`${this.getOptionData(item, searchBy)}`));
  };
  searchResults = () => {
    const { searchFn } = this.props;
    if (searchFn) {
      return searchFn({ methods: this.methods, props: this.props, state: this.state });
    }
    return this.searchFn();
  };
  render() {
    const { status, values } = this.state;
    const {
      className,
      direction = "ltr",
      disabled = false,
      hiddenInput,
      hideHandle,
      loading,
      showClearButton,
      showSeparator,
      style
    } = this.props;
    const classes = [SLUG, className].filter(Boolean).join(" ");
    return /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)(
      ReactDropdown,
      {
        ref: this.dropdownRef,
        "aria-expanded": status,
        "aria-label": "Dropdown",
        className: classes,
        "data-component-name": "Dropdown",
        direction,
        disabled,
        onKeyDown: this.handleKeyDown,
        style,
        tabIndex: disabled ? -1 : 0,
        ...this.getStyles(),
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(Content, { methods: this.methods, props: this.props, state: this.state }),
          hiddenInput && /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(
            "input",
            {
              defaultValue: values.map((value) => {
                const { key = "value" } = hiddenInput;
                if (key === "value") {
                  return getOptionData(value, "value");
                }
                return getOptionData(value, "label");
              }).join(hiddenInput.separator) || "",
              disabled,
              name: hiddenInput.name,
              pattern: hiddenInput.pattern,
              required: !!hiddenInput.required,
              style: { opacity: 0, width: 0, position: "absolute" },
              tabIndex: -1
            }
          ),
          showClearButton && !!values.length && /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(Clear, { methods: this.methods, props: this.props, state: this.state }),
          loading && /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(Loading_default, { methods: this.methods, props: this.props, state: this.state }),
          showSeparator && /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(Separator, { methods: this.methods, props: this.props, state: this.state }),
          !hideHandle && /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(Handle, { methods: this.methods, props: this.props, state: this.state }),
          status && !disabled && /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(Menu_default, { methods: this.methods, props: this.props, state: this.state })
        ]
      }
    );
  }
};
var src_default = Dropdown;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Dropdown
});
//# sourceMappingURL=index.js.map
// fix-cjs-exports
if (module.exports.default) {
  Object.assign(module.exports.default, module.exports);
  module.exports = module.exports.default;
  delete module.exports.default;
}
