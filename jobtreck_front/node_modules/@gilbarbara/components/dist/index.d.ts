import * as _gilbarbara_types from '@gilbarbara/types';
import { PlainObject, Simplify, LiteralToPrimitive, LiteralUnion, StringOrNumber, ValueOf, StringOrNull, RequireExactlyOne, PartialDeep } from '@gilbarbara/types';
import * as csstype from 'csstype';
import { StandardShorthandProperties, StandardLonghandProperties } from 'csstype';
import * as react from 'react';
import { JSXElementConstructor, CSSProperties, ReactNode, ElementType, HTMLProps, ReactElement, MouseEvent, KeyboardEvent, MouseEventHandler, ButtonHTMLAttributes, ChangeEventHandler, FocusEventHandler, JSX } from 'react';
import * as _emotion_react from '@emotion/react';
import { SerializedStyles } from '@emotion/react';
import { validatePassword } from '@gilbarbara/helpers';
export { px } from '@gilbarbara/helpers';
import { Option, HiddenInput, Props } from '@gilbarbara/react-dropdown';
import * as react_jsx_runtime from 'react/jsx-runtime';
import { DayPickerRangeProps, DayPickerSingleProps, DayPickerBase } from 'react-day-picker';
import { FieldValues, UseFormReturn, UseFormProps, SubmitHandler } from 'react-hook-form';

declare const icons: ({
    name: "align-bottom";
    categories: string[];
} | {
    name: "align-center";
    categories: string[];
} | {
    name: "align-left";
    categories: string[];
} | {
    name: "align-middle";
    categories: string[];
} | {
    name: "align-right";
    categories: string[];
} | {
    name: "align-top";
    categories: string[];
} | {
    name: "apple-watch";
    categories: string[];
} | {
    name: "arrange-back";
    categories: string[];
} | {
    name: "arrange-front";
    categories: string[];
} | {
    name: "attachment";
    categories: string[];
} | {
    name: "backspace";
    categories: string[];
} | {
    name: "band-aid";
    categories: string[];
} | {
    name: "battery";
    categories: string[];
} | {
    name: "battery-empty";
    categories: string[];
} | {
    name: "battery-full";
    categories: string[];
} | {
    name: "board";
    categories: string[];
} | {
    name: "border-all";
    categories: string[];
} | {
    name: "border-bottom";
    categories: string[];
} | {
    name: "border-left";
    categories: string[];
} | {
    name: "border-right";
    categories: string[];
} | {
    name: "border-style-dashed";
    categories: string[];
} | {
    name: "border-style-dotted";
    categories: string[];
} | {
    name: "border-style-solid";
    categories: string[];
} | {
    name: "border-top";
    categories: string[];
} | {
    name: "bot";
    categories: string[];
} | {
    name: "bowl";
    categories: string[];
} | {
    name: "boy";
    categories: string[];
} | {
    name: "briefcase";
    categories: string[];
} | {
    name: "browse";
    categories: string[];
} | {
    name: "browser";
    categories: string[];
} | {
    name: "calculator";
    categories: string[];
} | {
    name: "calendar-dates";
    categories: string[];
} | {
    name: "calendar-due";
    categories: string[];
} | {
    name: "calendar-next";
    categories: string[];
} | {
    name: "calendar-today";
    categories: string[];
} | {
    name: "calendar";
    categories: string[];
} | {
    name: "calibrate";
    categories: string[];
} | {
    name: "captions";
    categories: string[];
} | {
    name: "card-clubs";
    categories: string[];
} | {
    name: "card-diamonds";
    categories: string[];
} | {
    name: "card-hearts";
    categories: string[];
} | {
    name: "card-spades";
    categories: string[];
} | {
    name: "carousel";
    categories: string[];
} | {
    name: "cast";
    categories: string[];
} | {
    name: "chart";
    categories: string[];
} | {
    name: "clapper-board";
    categories: string[];
} | {
    name: "clipboard";
    categories: string[];
} | {
    name: "code";
    categories: string[];
} | {
    name: "code-slash";
    categories: string[];
} | {
    name: "collage";
    categories: string[];
} | {
    name: "color-bucket";
    categories: string[];
} | {
    name: "color-picker";
    categories: string[];
} | {
    name: "community";
    categories: string[];
} | {
    name: "components";
    categories: string[];
} | {
    name: "compress-left";
    categories: string[];
} | {
    name: "compress-right";
    categories: string[];
} | {
    name: "compress-v";
    categories: string[];
} | {
    name: "compress";
    categories: string[];
} | {
    name: "controller";
    categories: string[];
} | {
    name: "copy";
    categories: string[];
} | {
    name: "corner-double-down-left";
    categories: string[];
} | {
    name: "corner-double-down-right";
    categories: string[];
} | {
    name: "corner-double-left-down";
    categories: string[];
} | {
    name: "corner-double-left-up";
    categories: string[];
} | {
    name: "corner-double-right-down";
    categories: string[];
} | {
    name: "corner-double-right-up";
    categories: string[];
} | {
    name: "corner-double-up-left";
    categories: string[];
} | {
    name: "corner-double-up-right";
    categories: string[];
} | {
    name: "corner-down-left";
    categories: string[];
} | {
    name: "corner-down-right";
    categories: string[];
} | {
    name: "corner-left-down";
    categories: string[];
} | {
    name: "corner-left-up";
    categories: string[];
} | {
    name: "corner-right-down";
    categories: string[];
} | {
    name: "corner-right-up";
    categories: string[];
} | {
    name: "corner-up-left";
    categories: string[];
} | {
    name: "corner-up-right";
    categories: string[];
} | {
    name: "credit-card";
    categories: string[];
} | {
    name: "crop";
    categories: string[];
} | {
    name: "dark-mode";
    categories: string[];
} | {
    name: "desktop";
    categories: string[];
} | {
    name: "details-less";
    categories: string[];
} | {
    name: "details-more";
    categories: string[];
} | {
    name: "dialpad";
    categories: string[];
} | {
    name: "dice-1";
    categories: string[];
} | {
    name: "dice-2";
    categories: string[];
} | {
    name: "dice-3";
    categories: string[];
} | {
    name: "dice-4";
    categories: string[];
} | {
    name: "dice-5";
    categories: string[];
} | {
    name: "dice-6";
    categories: string[];
} | {
    name: "display-flex";
    categories: string[];
} | {
    name: "display-fullwidth";
    categories: string[];
} | {
    name: "display-grid";
    categories: string[];
} | {
    name: "display-spacing";
    categories: string[];
} | {
    name: "distribute-horizontal";
    categories: string[];
} | {
    name: "distribute-vertical";
    categories: string[];
} | {
    name: "dock-bottom";
    categories: string[];
} | {
    name: "dock-left";
    categories: string[];
} | {
    name: "dock-right";
    categories: string[];
} | {
    name: "dock-window";
    categories: string[];
} | {
    name: "drive";
    categories: string[];
} | {
    name: "drop-invert";
    categories: string[];
} | {
    name: "drop-opacity";
    categories: string[];
} | {
    name: "drop";
    categories: string[];
} | {
    name: "duplicate";
    categories: string[];
} | {
    name: "edit-black-point";
    categories: string[];
} | {
    name: "edit-contrast";
    categories: string[];
} | {
    name: "edit-exposure";
    categories: string[];
} | {
    name: "edit-fade";
    categories: string[];
} | {
    name: "edit-flip-h";
    categories: string[];
} | {
    name: "edit-flip-v";
    categories: string[];
} | {
    name: "edit-highlight";
    categories: string[];
} | {
    name: "edit-markup";
    categories: string[];
} | {
    name: "edit-mask";
    categories: string[];
} | {
    name: "edit-noise";
    categories: string[];
} | {
    name: "edit-shadows";
    categories: string[];
} | {
    name: "edit-straight";
    categories: string[];
} | {
    name: "edit-unmask";
    categories: string[];
} | {
    name: "enter";
    categories: string[];
} | {
    name: "erase";
    categories: string[];
} | {
    name: "euro";
    categories: string[];
} | {
    name: "export";
    categories: string[];
} | {
    name: "extension-add";
    categories: string[];
} | {
    name: "extension-remove";
    categories: string[];
} | {
    name: "extension";
    categories: string[];
} | {
    name: "external";
    categories: string[];
} | {
    name: "feed";
    categories: string[];
} | {
    name: "file-add";
    categories: string[];
} | {
    name: "file-document";
    categories: string[];
} | {
    name: "file-remove";
    categories: string[];
} | {
    name: "file";
    categories: string[];
} | {
    name: "film";
    categories: string[];
} | {
    name: "filters";
    categories: string[];
} | {
    name: "folder-add";
    categories: string[];
} | {
    name: "folder-remove";
    categories: string[];
} | {
    name: "folder";
    categories: string[];
} | {
    name: "font-height";
    categories: string[];
} | {
    name: "font-spacing";
    categories: string[];
} | {
    name: "format-center";
    categories: string[];
} | {
    name: "format-color";
    categories: string[];
} | {
    name: "format-heading";
    categories: string[];
} | {
    name: "format-indent-decrease";
    categories: string[];
} | {
    name: "format-indent-increase";
    categories: string[];
} | {
    name: "format-italic";
    categories: string[];
} | {
    name: "format-justify";
    categories: string[];
} | {
    name: "format-left";
    categories: string[];
} | {
    name: "format-line-height";
    categories: string[];
} | {
    name: "format-right";
    categories: string[];
} | {
    name: "format-separator";
    categories: string[];
} | {
    name: "format-slash";
    categories: string[];
} | {
    name: "format-text";
    categories: string[];
} | {
    name: "format-underline";
    categories: string[];
} | {
    name: "format-uppercase";
    categories: string[];
} | {
    name: "games";
    categories: string[];
} | {
    name: "gender-female";
    categories: string[];
} | {
    name: "gender-male";
    categories: string[];
} | {
    name: "girl";
    categories: string[];
} | {
    name: "glass-alt";
    categories: string[];
} | {
    name: "home-screen";
    categories: string[];
} | {
    name: "image";
    categories: string[];
} | {
    name: "import";
    categories: string[];
} | {
    name: "inpicture";
    categories: string[];
} | {
    name: "insert-after-o";
    categories: string[];
} | {
    name: "insert-after-r";
    categories: string[];
} | {
    name: "insert-after";
    categories: string[];
} | {
    name: "insert-before-o";
    categories: string[];
} | {
    name: "insert-before-r";
    categories: string[];
} | {
    name: "insert-before";
    categories: string[];
} | {
    name: "insights";
    categories: string[];
} | {
    name: "internal";
    categories: string[];
} | {
    name: "laptop";
    categories: string[];
} | {
    name: "list-tree";
    categories: string[];
} | {
    name: "list";
    categories: string[];
} | {
    name: "lock-unlock";
    categories: string[];
} | {
    name: "lock";
    categories: string[];
} | {
    name: "log-off";
    categories: string[];
} | {
    name: "loupe";
    categories: string[];
} | {
    name: "magnet";
    categories: string[];
} | {
    name: "mail-forward";
    categories: string[];
} | {
    name: "mail-reply";
    categories: string[];
} | {
    name: "maximize-alt";
    categories: string[];
} | {
    name: "maximize";
    categories: string[];
} | {
    name: "menu-boxed";
    categories: string[];
} | {
    name: "menu-grid-o";
    categories: string[];
} | {
    name: "menu-grid-r";
    categories: string[];
} | {
    name: "menu-left-alt";
    categories: string[];
} | {
    name: "menu-left";
    categories: string[];
} | {
    name: "menu-motion";
    categories: string[];
} | {
    name: "menu-right-alt";
    categories: string[];
} | {
    name: "menu-right";
    categories: string[];
} | {
    name: "menu";
    categories: string[];
} | {
    name: "merge-horizontal";
    categories: string[];
} | {
    name: "merge-vertical";
    categories: string[];
} | {
    name: "mini-player";
    categories: string[];
} | {
    name: "minimize-alt";
    categories: string[];
} | {
    name: "minimize";
    categories: string[];
} | {
    name: "moon";
    categories: string[];
} | {
    name: "mouse";
    categories: string[];
} | {
    name: "move-down";
    categories: string[];
} | {
    name: "move-left";
    categories: string[];
} | {
    name: "move-right";
    categories: string[];
} | {
    name: "move-up";
    categories: string[];
} | {
    name: "notifications";
    categories: string[];
} | {
    name: "pacman";
    categories: string[];
} | {
    name: "path-back";
    categories: string[];
} | {
    name: "path-crop";
    categories: string[];
} | {
    name: "path-divide";
    categories: string[];
} | {
    name: "path-exclude";
    categories: string[];
} | {
    name: "path-front";
    categories: string[];
} | {
    name: "path-intersect";
    categories: string[];
} | {
    name: "path-outline";
    categories: string[];
} | {
    name: "path-trim";
    categories: string[];
} | {
    name: "path-unite";
    categories: string[];
} | {
    name: "performance";
    categories: string[];
} | {
    name: "piano";
    categories: string[];
} | {
    name: "pill";
    categories: string[];
} | {
    name: "plug";
    categories: string[];
} | {
    name: "pokemon";
    categories: string[];
} | {
    name: "poll";
    categories: string[];
} | {
    name: "printer";
    categories: string[];
} | {
    name: "profile";
    categories: string[];
} | {
    name: "pull-clear";
    categories: string[];
} | {
    name: "push-chevron-down-o";
    categories: string[];
} | {
    name: "push-chevron-down-r";
    categories: string[];
} | {
    name: "push-chevron-down";
    categories: string[];
} | {
    name: "push-chevron-left-o";
    categories: string[];
} | {
    name: "push-chevron-left-r";
    categories: string[];
} | {
    name: "push-chevron-left";
    categories: string[];
} | {
    name: "push-chevron-right-o";
    categories: string[];
} | {
    name: "push-chevron-right-r";
    categories: string[];
} | {
    name: "push-chevron-right";
    categories: string[];
} | {
    name: "push-chevron-up-o";
    categories: string[];
} | {
    name: "push-chevron-up-r";
    categories: string[];
} | {
    name: "push-chevron-up";
    categories: string[];
} | {
    name: "push-down";
    categories: string[];
} | {
    name: "push-left";
    categories: string[];
} | {
    name: "push-right";
    categories: string[];
} | {
    name: "push-up";
    categories: string[];
} | {
    name: "qr";
    categories: string[];
} | {
    name: "quote-o";
    categories: string[];
} | {
    name: "quote";
    categories: string[];
} | {
    name: "radio-check";
    categories: string[];
} | {
    name: "radio-checked";
    categories: string[];
} | {
    name: "ratio";
    categories: string[];
} | {
    name: "redo";
    categories: string[];
} | {
    name: "remove-r";
    categories: string[];
} | {
    name: "remove";
    categories: string[];
} | {
    name: "rename";
    categories: string[];
} | {
    name: "reorder";
    categories: string[];
} | {
    name: "row-first";
    categories: string[];
} | {
    name: "row-last";
    categories: string[];
} | {
    name: "ruler";
    categories: string[];
} | {
    name: "scan";
    categories: string[];
} | {
    name: "screen-mirror";
    categories: string[];
} | {
    name: "screen-wide";
    categories: string[];
} | {
    name: "screen";
    categories: string[];
} | {
    name: "scroll-h";
    categories: string[];
} | {
    name: "scroll-v";
    categories: string[];
} | {
    name: "search-found";
    categories: string[];
} | {
    name: "search-loading";
    categories: string[];
} | {
    name: "search";
    categories: string[];
} | {
    name: "select-o";
    categories: string[];
} | {
    name: "select-r";
    categories: string[];
} | {
    name: "select";
    categories: string[];
} | {
    name: "shopping-bag";
    categories: string[];
} | {
    name: "shopping-cart";
    categories: string[];
} | {
    name: "sidebar-open";
    categories: string[];
} | {
    name: "sidebar-right";
    categories: string[];
} | {
    name: "sidebar";
    categories: string[];
} | {
    name: "signal";
    categories: string[];
} | {
    name: "size";
    categories: string[];
} | {
    name: "smartphone";
    categories: string[];
} | {
    name: "smile-mouth-open";
    categories: string[];
} | {
    name: "smile-neutral";
    categories: string[];
} | {
    name: "smile-no-mouth";
    categories: string[];
} | {
    name: "smile-none";
    categories: string[];
} | {
    name: "smile-sad";
    categories: string[];
} | {
    name: "smile-upside";
    categories: string[];
} | {
    name: "smile";
    categories: string[];
} | {
    name: "space-between-v";
    categories: string[];
} | {
    name: "space-between";
    categories: string[];
} | {
    name: "spinner-alt";
    categories: string[];
} | {
    name: "spinner-two-alt";
    categories: string[];
} | {
    name: "spinner-two";
    categories: string[];
} | {
    name: "spinner";
    categories: string[];
} | {
    name: "sun";
    categories: string[];
} | {
    name: "swap-vertical";
    categories: string[];
} | {
    name: "swap";
    categories: string[];
} | {
    name: "tab";
    categories: string[];
} | {
    name: "terrain";
    categories: string[];
} | {
    name: "thermostat";
    categories: string[];
} | {
    name: "today";
    categories: string[];
} | {
    name: "toggle-off";
    categories: string[];
} | {
    name: "toggle-on";
    categories: string[];
} | {
    name: "toggle-square-off";
    categories: string[];
} | {
    name: "toggle-square";
    categories: string[];
} | {
    name: "toolbar-bottom";
    categories: string[];
} | {
    name: "toolbar-left";
    categories: string[];
} | {
    name: "toolbar-right";
    categories: string[];
} | {
    name: "toolbar-top";
    categories: string[];
} | {
    name: "toolbox";
    categories: string[];
} | {
    name: "touchpad";
    categories: string[];
} | {
    name: "track";
    categories: string[];
} | {
    name: "transcript";
    categories: string[];
} | {
    name: "trash-empty";
    categories: string[];
} | {
    name: "trash";
    categories: string[];
} | {
    name: "trending-down";
    categories: string[];
} | {
    name: "trending";
    categories: string[];
} | {
    name: "tv";
    categories: string[];
} | {
    name: "ui-kit";
    categories: string[];
} | {
    name: "umbrella";
    categories: string[];
} | {
    name: "undo";
    categories: string[];
} | {
    name: "usb";
    categories: string[];
} | {
    name: "usb-c";
    categories: string[];
} | {
    name: "view-cols";
    categories: string[];
} | {
    name: "view-comfortable";
    categories: string[];
} | {
    name: "view-day";
    categories: string[];
} | {
    name: "view-grid";
    categories: string[];
} | {
    name: "view-list";
    categories: string[];
} | {
    name: "view-month";
    categories: string[];
} | {
    name: "view-split";
    categories: string[];
} | {
    name: "voicemail-o";
    categories: string[];
} | {
    name: "voicemail-r";
    categories: string[];
} | {
    name: "voicemail";
    categories: string[];
} | {
    name: "work-alt";
    categories: string[];
} | {
    name: "yinyang";
    categories: string[];
} | {
    name: "zoom-in";
    categories: string[];
} | {
    name: "zoom-out";
    categories: string[];
} | {
    name: "accessibility";
    categories: string[];
} | {
    name: "accessibility-circle";
    categories: string[];
} | {
    name: "accessibility-o";
    categories: string[];
} | {
    name: "airplane";
    categories: string[];
} | {
    name: "airpods";
    categories: string[];
} | {
    name: "alarm";
    categories: string[];
} | {
    name: "album";
    categories: string[];
} | {
    name: "anchor";
    categories: string[];
} | {
    name: "angular";
    categories: string[];
} | {
    name: "apple";
    categories: string[];
} | {
    name: "approximately-equal";
    categories: string[];
} | {
    name: "archive";
    categories: string[];
} | {
    name: "arrow-bottom-left-o";
    categories: string[];
} | {
    name: "arrow-bottom-left-r";
    categories: string[];
} | {
    name: "arrow-bottom-left";
    categories: string[];
} | {
    name: "arrow-bottom-right-o";
    categories: string[];
} | {
    name: "arrow-bottom-right-r";
    categories: string[];
} | {
    name: "arrow-bottom-right";
    categories: string[];
} | {
    name: "arrow-down-o";
    categories: string[];
} | {
    name: "arrow-down-r";
    categories: string[];
} | {
    name: "arrow-down";
    categories: string[];
} | {
    name: "arrows-exchange-alt-v";
    categories: string[];
} | {
    name: "arrows-exchange-alt";
    categories: string[];
} | {
    name: "arrows-exchange-v";
    categories: string[];
} | {
    name: "arrows-exchange";
    categories: string[];
} | {
    name: "arrows-expand-down-left";
    categories: string[];
} | {
    name: "arrows-expand-down-right";
    categories: string[];
} | {
    name: "arrows-expand-left";
    categories: string[];
} | {
    name: "arrows-expand-right";
    categories: string[];
} | {
    name: "arrows-expand-up-left";
    categories: string[];
} | {
    name: "arrows-expand-up-right";
    categories: string[];
} | {
    name: "arrows-h";
    categories: string[];
} | {
    name: "arrows-h-alt";
    categories: string[];
} | {
    name: "arrow-left-o";
    categories: string[];
} | {
    name: "arrow-left-r";
    categories: string[];
} | {
    name: "arrow-left";
    categories: string[];
} | {
    name: "arrow-right-o";
    categories: string[];
} | {
    name: "arrow-right-r";
    categories: string[];
} | {
    name: "arrow-right";
    categories: string[];
} | {
    name: "arrows-scroll-h";
    categories: string[];
} | {
    name: "arrows-scroll-v";
    categories: string[];
} | {
    name: "arrow-switch";
    categories: string[];
} | {
    name: "arrow-switch-o";
    categories: string[];
} | {
    name: "arrow-switch-r";
    categories: string[];
} | {
    name: "arrow-top-left-o";
    categories: string[];
} | {
    name: "arrow-top-left-r";
    categories: string[];
} | {
    name: "arrow-top-left";
    categories: string[];
} | {
    name: "arrow-top-right-o";
    categories: string[];
} | {
    name: "arrow-top-right-r";
    categories: string[];
} | {
    name: "arrow-top-right";
    categories: string[];
} | {
    name: "arrow-up-o";
    categories: string[];
} | {
    name: "arrow-up-r";
    categories: string[];
} | {
    name: "arrow-up";
    categories: string[];
} | {
    name: "arrows-v";
    categories: string[];
} | {
    name: "arrows-v-alt";
    categories: string[];
} | {
    name: "asterisk";
    categories: string[];
} | {
    name: "asterisk-o";
    categories: string[];
} | {
    name: "asterisk-r";
    categories: string[];
} | {
    name: "atlassian";
    categories: string[];
} | {
    name: "attribution";
    categories: string[];
} | {
    name: "award";
    categories: string[];
} | {
    name: "badge";
    categories: string[];
} | {
    name: "bamboo";
    categories: string[];
} | {
    name: "bell";
    categories: string[];
} | {
    name: "bell-o";
    categories: string[];
} | {
    name: "bell-slash";
    categories: string[];
} | {
    name: "bitbucket";
    categories: string[];
} | {
    name: "block-o";
    categories: string[];
} | {
    name: "blocked";
    categories: string[];
} | {
    name: "bluetooth";
    categories: string[];
} | {
    name: "book";
    categories: string[];
} | {
    name: "bookmark";
    categories: string[];
} | {
    name: "bookmark-slash";
    categories: string[];
} | {
    name: "bug";
    categories: string[];
} | {
    name: "bullseye";
    categories: string[];
} | {
    name: "bullseye-arrow";
    categories: string[];
} | {
    name: "c-plus-plus";
    categories: string[];
} | {
    name: "cache";
    categories: string[];
} | {
    name: "camera";
    categories: string[];
} | {
    name: "camera-alt";
    categories: string[];
} | {
    name: "categories";
    categories: string[];
} | {
    name: "check";
    categories: string[];
} | {
    name: "check-circle";
    categories: string[];
} | {
    name: "check-o";
    categories: string[];
} | {
    name: "check-r";
    categories: string[];
} | {
    name: "checklist";
    categories: string[];
} | {
    name: "chevron-double-down-o";
    categories: string[];
} | {
    name: "chevron-double-down-r";
    categories: string[];
} | {
    name: "chevron-double-left-o";
    categories: string[];
} | {
    name: "chevron-double-left-r";
    categories: string[];
} | {
    name: "chevron-double-right-o";
    categories: string[];
} | {
    name: "chevron-double-right-r";
    categories: string[];
} | {
    name: "chevron-double-up-o";
    categories: string[];
} | {
    name: "chevron-double-up-r";
    categories: string[];
} | {
    name: "chevron-down-o";
    categories: string[];
} | {
    name: "chevron-down-r";
    categories: string[];
} | {
    name: "chevron-down";
    categories: string[];
} | {
    name: "chevron-left-o";
    categories: string[];
} | {
    name: "chevron-left-r";
    categories: string[];
} | {
    name: "chevron-left";
    categories: string[];
} | {
    name: "chevron-right-o";
    categories: string[];
} | {
    name: "chevron-right-r";
    categories: string[];
} | {
    name: "chevron-right";
    categories: string[];
} | {
    name: "chevron-up-o";
    categories: string[];
} | {
    name: "chevron-up-r";
    categories: string[];
} | {
    name: "chevron-up";
    categories: string[];
} | {
    name: "chevron-double-down";
    categories: string[];
} | {
    name: "chevron-double-left";
    categories: string[];
} | {
    name: "chevron-double-right";
    categories: string[];
} | {
    name: "chevron-double-up";
    categories: string[];
} | {
    name: "chip";
    categories: string[];
} | {
    name: "circle";
    categories: string[];
} | {
    name: "circle-ci";
    categories: string[];
} | {
    name: "circle-half";
    categories: string[];
} | {
    name: "clock";
    categories: string[];
} | {
    name: "close";
    categories: string[];
} | {
    name: "close-circle";
    categories: string[];
} | {
    name: "close-o";
    categories: string[];
} | {
    name: "close-r";
    categories: string[];
} | {
    name: "cloud";
    categories: string[];
} | {
    name: "cloud-slash";
    categories: string[];
} | {
    name: "code-climate";
    categories: string[];
} | {
    name: "code-review";
    categories: string[];
} | {
    name: "codepen";
    categories: string[];
} | {
    name: "codesandbox";
    categories: string[];
} | {
    name: "codescan";
    categories: string[];
} | {
    name: "coffee";
    categories: string[];
} | {
    name: "cog";
    categories: string[];
} | {
    name: "command-key";
    categories: string[];
} | {
    name: "command-palette";
    categories: string[];
} | {
    name: "comment";
    categories: string[];
} | {
    name: "comment-external";
    categories: string[];
} | {
    name: "container";
    categories: string[];
} | {
    name: "control-key";
    categories: string[];
} | {
    name: "copyright";
    categories: string[];
} | {
    name: "cross";
    categories: string[];
} | {
    name: "crown";
    categories: string[];
} | {
    name: "danger-circle";
    categories: string[];
} | {
    name: "danger-o";
    categories: string[];
} | {
    name: "database";
    categories: string[];
} | {
    name: "diamond";
    categories: string[];
} | {
    name: "digital-ocean";
    categories: string[];
} | {
    name: "disc";
    categories: string[];
} | {
    name: "discord";
    categories: string[];
} | {
    name: "discussion";
    categories: string[];
} | {
    name: "discussion-closed";
    categories: string[];
} | {
    name: "discussion-duplicated";
    categories: string[];
} | {
    name: "discussion-outdated";
    categories: string[];
} | {
    name: "divide";
    categories: string[];
} | {
    name: "download";
    categories: string[];
} | {
    name: "draft";
    categories: string[];
} | {
    name: "dribble";
    categories: string[];
} | {
    name: "dropbox";
    categories: string[];
} | {
    name: "eject";
    categories: string[];
} | {
    name: "ellipsis";
    categories: string[];
} | {
    name: "equal";
    categories: string[];
} | {
    name: "expand";
    categories: string[];
} | {
    name: "eye";
    categories: string[];
} | {
    name: "eye-slash";
    categories: string[];
} | {
    name: "facebook";
    categories: string[];
} | {
    name: "figma";
    categories: string[];
} | {
    name: "filter";
    categories: string[];
} | {
    name: "flag";
    categories: string[];
} | {
    name: "flame";
    categories: string[];
} | {
    name: "flash";
    categories: string[];
} | {
    name: "flash-circle";
    categories: string[];
} | {
    name: "flash-o";
    categories: string[];
} | {
    name: "focus";
    categories: string[];
} | {
    name: "fold";
    categories: string[];
} | {
    name: "fold-down";
    categories: string[];
} | {
    name: "fold-up";
    categories: string[];
} | {
    name: "format-bold";
    categories: string[];
} | {
    name: "format-strikethrough";
    categories: string[];
} | {
    name: "framer";
    categories: string[];
} | {
    name: "ghost";
    categories: string[];
} | {
    name: "gift";
    categories: string[];
} | {
    name: "git";
    categories: string[];
} | {
    name: "git-branch";
    categories: string[];
} | {
    name: "git-commit";
    categories: string[];
} | {
    name: "git-compare";
    categories: string[];
} | {
    name: "git-fork";
    categories: string[];
} | {
    name: "git-merge";
    categories: string[];
} | {
    name: "git-pull-request";
    categories: string[];
} | {
    name: "github";
    categories: string[];
} | {
    name: "github-actions";
    categories: string[];
} | {
    name: "github-copilot";
    categories: string[];
} | {
    name: "gitlab";
    categories: string[];
} | {
    name: "gitter";
    categories: string[];
} | {
    name: "glass";
    categories: string[];
} | {
    name: "glasses";
    categories: string[];
} | {
    name: "globe";
    categories: string[];
} | {
    name: "google";
    categories: string[];
} | {
    name: "google-calendar";
    categories: string[];
} | {
    name: "google-drive";
    categories: string[];
} | {
    name: "google-meet";
    categories: string[];
} | {
    name: "grabber";
    categories: string[];
} | {
    name: "graph";
    categories: string[];
} | {
    name: "greater-than";
    categories: string[];
} | {
    name: "greater-than-or-equal";
    categories: string[];
} | {
    name: "hash";
    categories: string[];
} | {
    name: "headphone";
    categories: string[];
} | {
    name: "heart";
    categories: string[];
} | {
    name: "heart-o";
    categories: string[];
} | {
    name: "help";
    categories: string[];
} | {
    name: "hexagon";
    categories: string[];
} | {
    name: "history";
    categories: string[];
} | {
    name: "home";
    categories: string[];
} | {
    name: "hourglass";
    categories: string[];
} | {
    name: "inbox";
    categories: string[];
} | {
    name: "infinity";
    categories: string[];
} | {
    name: "info-circle";
    categories: string[];
} | {
    name: "info-o";
    categories: string[];
} | {
    name: "instagram";
    categories: string[];
} | {
    name: "invision";
    categories: string[];
} | {
    name: "iterations";
    categories: string[];
} | {
    name: "javascript";
    categories: string[];
} | {
    name: "jenkins";
    categories: string[];
} | {
    name: "jest";
    categories: string[];
} | {
    name: "jsfiddle";
    categories: string[];
} | {
    name: "key";
    categories: string[];
} | {
    name: "key-alt";
    categories: string[];
} | {
    name: "keyboard";
    categories: string[];
} | {
    name: "keyhole-circle";
    categories: string[];
} | {
    name: "keyhole-o";
    categories: string[];
} | {
    name: "kotlin";
    categories: string[];
} | {
    name: "law";
    categories: string[];
} | {
    name: "layout-grid";
    categories: string[];
} | {
    name: "layout-grid-small";
    categories: string[];
} | {
    name: "layout-list";
    categories: string[];
} | {
    name: "layout-pin";
    categories: string[];
} | {
    name: "leaf";
    categories: string[];
} | {
    name: "less-than";
    categories: string[];
} | {
    name: "less-than-or-equal";
    categories: string[];
} | {
    name: "lightbulb";
    categories: string[];
} | {
    name: "link";
    categories: string[];
} | {
    name: "linkedin";
    categories: string[];
} | {
    name: "live";
    categories: string[];
} | {
    name: "live-photo";
    categories: string[];
} | {
    name: "loadbar";
    categories: string[];
} | {
    name: "loadbar-alt";
    categories: string[];
} | {
    name: "loadbar-doc";
    categories: string[];
} | {
    name: "loadbar-sound";
    categories: string[];
} | {
    name: "location";
    categories: string[];
} | {
    name: "log";
    categories: string[];
} | {
    name: "loom";
    categories: string[];
} | {
    name: "mail";
    categories: string[];
} | {
    name: "mail-read";
    categories: string[];
} | {
    name: "markdown";
    categories: string[];
} | {
    name: "megaphone";
    categories: string[];
} | {
    name: "mention";
    categories: string[];
} | {
    name: "menu-close";
    categories: string[];
} | {
    name: "menu-open";
    categories: string[];
} | {
    name: "menu-round-circle";
    categories: string[];
} | {
    name: "menu-round-o";
    categories: string[];
} | {
    name: "message";
    categories: string[];
} | {
    name: "message-circle";
    categories: string[];
} | {
    name: "message-o";
    categories: string[];
} | {
    name: "messenger";
    categories: string[];
} | {
    name: "meta";
    categories: string[];
} | {
    name: "meter";
    categories: string[];
} | {
    name: "mic";
    categories: string[];
} | {
    name: "mic-slash";
    categories: string[];
} | {
    name: "microsoft";
    categories: string[];
} | {
    name: "microsoft-teams";
    categories: string[];
} | {
    name: "microsoft-windows";
    categories: string[];
} | {
    name: "milestone";
    categories: string[];
} | {
    name: "minus";
    categories: string[];
} | {
    name: "minus-circle";
    categories: string[];
} | {
    name: "minus-o";
    categories: string[];
} | {
    name: "minus-r";
    categories: string[];
} | {
    name: "money-sign";
    categories: string[];
} | {
    name: "more";
    categories: string[];
} | {
    name: "more-circle";
    categories: string[];
} | {
    name: "more-o";
    categories: string[];
} | {
    name: "more-r";
    categories: string[];
} | {
    name: "more-vertical";
    categories: string[];
} | {
    name: "more-vertical-circle";
    categories: string[];
} | {
    name: "more-vertical-o";
    categories: string[];
} | {
    name: "more-vertical-r";
    categories: string[];
} | {
    name: "multi-select";
    categories: string[];
} | {
    name: "music-note";
    categories: string[];
} | {
    name: "music-note-alt";
    categories: string[];
} | {
    name: "next";
    categories: string[];
} | {
    name: "next-o";
    categories: string[];
} | {
    name: "next-r";
    categories: string[];
} | {
    name: "next.js";
    categories: string[];
} | {
    name: "node.js";
    categories: string[];
} | {
    name: "not-equal";
    categories: string[];
} | {
    name: "note";
    categories: string[];
} | {
    name: "notebook";
    categories: string[];
} | {
    name: "npm";
    categories: string[];
} | {
    name: "numbers";
    categories: string[];
} | {
    name: "option-key";
    categories: string[];
} | {
    name: "options";
    categories: string[];
} | {
    name: "organization";
    categories: string[];
} | {
    name: "package";
    categories: string[];
} | {
    name: "paintbrush";
    categories: string[];
} | {
    name: "paperclip";
    categories: string[];
} | {
    name: "password";
    categories: string[];
} | {
    name: "patreon";
    categories: string[];
} | {
    name: "pause";
    categories: string[];
} | {
    name: "pause-o";
    categories: string[];
} | {
    name: "pause-r";
    categories: string[];
} | {
    name: "paypal";
    categories: string[];
} | {
    name: "pencil";
    categories: string[];
} | {
    name: "percent";
    categories: string[];
} | {
    name: "phone";
    categories: string[];
} | {
    name: "phone-o";
    categories: string[];
} | {
    name: "pi";
    categories: string[];
} | {
    name: "pin";
    categories: string[];
} | {
    name: "pin-slash";
    categories: string[];
} | {
    name: "play";
    categories: string[];
} | {
    name: "play-backwards";
    categories: string[];
} | {
    name: "play-forwards";
    categories: string[];
} | {
    name: "play-o";
    categories: string[];
} | {
    name: "play-r";
    categories: string[];
} | {
    name: "playlist";
    categories: string[];
} | {
    name: "playlist-add";
    categories: string[];
} | {
    name: "playlist-check";
    categories: string[];
} | {
    name: "playlist-remove";
    categories: string[];
} | {
    name: "playlist-search";
    categories: string[];
} | {
    name: "plus";
    categories: string[];
} | {
    name: "plus-circle";
    categories: string[];
} | {
    name: "plus-minus";
    categories: string[];
} | {
    name: "plus-minus-slash";
    categories: string[];
} | {
    name: "plus-o";
    categories: string[];
} | {
    name: "plus-r";
    categories: string[];
} | {
    name: "podcast";
    categories: string[];
} | {
    name: "previous";
    categories: string[];
} | {
    name: "previous-o";
    categories: string[];
} | {
    name: "previous-r";
    categories: string[];
} | {
    name: "product-hunt";
    categories: string[];
} | {
    name: "project";
    categories: string[];
} | {
    name: "pulse";
    categories: string[];
} | {
    name: "python";
    categories: string[];
} | {
    name: "ram";
    categories: string[];
} | {
    name: "react";
    categories: string[];
} | {
    name: "record-o";
    categories: string[];
} | {
    name: "redux";
    categories: string[];
} | {
    name: "repeat";
    categories: string[];
} | {
    name: "repo";
    categories: string[];
} | {
    name: "report";
    categories: string[];
} | {
    name: "return";
    categories: string[];
} | {
    name: "roadmap";
    categories: string[];
} | {
    name: "rocket";
    categories: string[];
} | {
    name: "rocket-chat";
    categories: string[];
} | {
    name: "rust";
    categories: string[];
} | {
    name: "safe";
    categories: string[];
} | {
    name: "send";
    categories: string[];
} | {
    name: "send-alt";
    categories: string[];
} | {
    name: "server";
    categories: string[];
} | {
    name: "serverless";
    categories: string[];
} | {
    name: "share";
    categories: string[];
} | {
    name: "share-mobile";
    categories: string[];
} | {
    name: "shield";
    categories: string[];
} | {
    name: "shield-slash";
    categories: string[];
} | {
    name: "shift-key";
    categories: string[];
} | {
    name: "shortcuts";
    categories: string[];
} | {
    name: "shuffle";
    categories: string[];
} | {
    name: "side-by-side";
    categories: string[];
} | {
    name: "sigma";
    categories: string[];
} | {
    name: "sign-in";
    categories: string[];
} | {
    name: "sign-out";
    categories: string[];
} | {
    name: "single-select";
    categories: string[];
} | {
    name: "skype";
    categories: string[];
} | {
    name: "slack";
    categories: string[];
} | {
    name: "sort";
    categories: string[];
} | {
    name: "sort-asc";
    categories: string[];
} | {
    name: "sort-desc";
    categories: string[];
} | {
    name: "sparkle";
    categories: string[];
} | {
    name: "sparkle-o";
    categories: string[];
} | {
    name: "speaker";
    categories: string[];
} | {
    name: "spotify";
    categories: string[];
} | {
    name: "square";
    categories: string[];
} | {
    name: "square-payments";
    categories: string[];
} | {
    name: "square-root";
    categories: string[];
} | {
    name: "stack";
    categories: string[];
} | {
    name: "stacked";
    categories: string[];
} | {
    name: "star";
    categories: string[];
} | {
    name: "star-o";
    categories: string[];
} | {
    name: "stop";
    categories: string[];
} | {
    name: "stop-o";
    categories: string[];
} | {
    name: "stop-r";
    categories: string[];
} | {
    name: "stop-sign";
    categories: string[];
} | {
    name: "stopwatch";
    categories: string[];
} | {
    name: "storybook";
    categories: string[];
} | {
    name: "student";
    categories: string[];
} | {
    name: "style";
    categories: string[];
} | {
    name: "svelte";
    categories: string[];
} | {
    name: "swift";
    categories: string[];
} | {
    name: "sync";
    categories: string[];
} | {
    name: "sync-alt";
    categories: string[];
} | {
    name: "tab-key";
    categories: string[];
} | {
    name: "tag";
    categories: string[];
} | {
    name: "tags";
    categories: string[];
} | {
    name: "tasklist";
    categories: string[];
} | {
    name: "template";
    categories: string[];
} | {
    name: "terminal";
    categories: string[];
} | {
    name: "thumbs-down";
    categories: string[];
} | {
    name: "thumbs-up";
    categories: string[];
} | {
    name: "tidal";
    categories: string[];
} | {
    name: "timelapse";
    categories: string[];
} | {
    name: "timer";
    categories: string[];
} | {
    name: "times";
    categories: string[];
} | {
    name: "tools";
    categories: string[];
} | {
    name: "tools-alt";
    categories: string[];
} | {
    name: "touch-id";
    categories: string[];
} | {
    name: "travis-ci";
    categories: string[];
} | {
    name: "tree";
    categories: string[];
} | {
    name: "trello";
    categories: string[];
} | {
    name: "triangle";
    categories: string[];
} | {
    name: "trophy";
    categories: string[];
} | {
    name: "tumblr";
    categories: string[];
} | {
    name: "twilio";
    categories: string[];
} | {
    name: "twitch";
    categories: string[];
} | {
    name: "twitter";
    categories: string[];
} | {
    name: "typescript";
    categories: string[];
} | {
    name: "unavailable-o";
    categories: string[];
} | {
    name: "unblock-o";
    categories: string[];
} | {
    name: "unfold";
    categories: string[];
} | {
    name: "unlink";
    categories: string[];
} | {
    name: "unread";
    categories: string[];
} | {
    name: "unverified";
    categories: string[];
} | {
    name: "upload";
    categories: string[];
} | {
    name: "user";
    categories: string[];
} | {
    name: "user-add";
    categories: string[];
} | {
    name: "user-remove";
    categories: string[];
} | {
    name: "users";
    categories: string[];
} | {
    name: "vector";
    categories: string[];
} | {
    name: "vercel";
    categories: string[];
} | {
    name: "verified";
    categories: string[];
} | {
    name: "versions";
    categories: string[];
} | {
    name: "video";
    categories: string[];
} | {
    name: "video-camera";
    categories: string[];
} | {
    name: "vimeo";
    categories: string[];
} | {
    name: "vinyl";
    categories: string[];
} | {
    name: "volume-high";
    categories: string[];
} | {
    name: "volume-low";
    categories: string[];
} | {
    name: "volume-mid";
    categories: string[];
} | {
    name: "vscode";
    categories: string[];
} | {
    name: "vue";
    categories: string[];
} | {
    name: "wand";
    categories: string[];
} | {
    name: "wave";
    categories: string[];
} | {
    name: "webcam";
    categories: string[];
} | {
    name: "webhook";
    categories: string[];
} | {
    name: "website";
    categories: string[];
} | {
    name: "webstorm";
    categories: string[];
} | {
    name: "whatsapp";
    categories: string[];
} | {
    name: "wheelchair";
    categories: string[];
} | {
    name: "wi-fi";
    categories: string[];
} | {
    name: "workflow";
    categories: string[];
} | {
    name: "workplace";
    categories: string[];
} | {
    name: "youtube";
    categories: string[];
} | {
    name: "zap";
    categories: string[];
} | {
    name: "zigzag";
    categories: string[];
} | {
    name: "zoom";
    categories: string[];
})[];
declare const inputTypes: readonly ["color", "date", "email", "file", "hidden", "number", "password", "search", "tel", "text"];
declare const sizes: readonly ["sm", "md", "lg"];
declare const sizesAll: readonly ["xs", "sm", "md", "lg"];

type Concat<TBase extends string, TExtend extends string> = keyof {
    [K in TBase as `${K}-${TExtend}`]: any;
};
type MapLiteralToPrimitive<T extends PlainObject> = Simplify<{
    [K in keyof T]: T[K] extends object ? T[K] : LiteralToPrimitive<T[K]>;
}>;

/**
 * Basics
 */
declare const fontFamily = "inherit";
declare const fontMonospace = "Courier, monospace";
declare const fontWeights: {
    normal: number;
    bold: number;
};
declare const breakpoints: {
    xxs: string;
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xxl: string;
    xxxl: string;
};
declare const easing = "cubic-bezier(0.35, 0.01, 0.77, 0.34);";
declare const opacity: {
    semiOpaque: number;
    intense: number;
    medium: number;
    light: number;
    semiTransparent: number;
};
declare const radius: {
    xxs: string;
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    round: string;
};
declare const dropShadow: {
    low: string;
    mid: string;
    high: string;
};
declare const shadow: {
    low: string;
    mid: string;
    high: string;
};
declare const spacing: {
    xxs: string;
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xxl: string;
    xxxl: string;
    jumbo: string;
};
declare const typography: {
    xs: {
        fontSize: string;
        lineHeight: number;
    };
    sm: {
        fontSize: string;
        lineHeight: number;
    };
    md: {
        fontSize: string;
        lineHeight: number;
    };
    lg: {
        fontSize: string;
        lineHeight: number;
    };
    h6: {
        fontSize: string;
        lineHeight: number;
    };
    h5: {
        fontSize: string;
        lineHeight: number;
    };
    h4: {
        fontSize: string;
        lineHeight: number;
    };
    h3: {
        fontSize: string;
        lineHeight: number;
    };
    h2: {
        fontSize: string;
        lineHeight: number;
    };
    h1: {
        fontSize: string;
        lineHeight: number;
    };
    jumbo: {
        fontSize: string;
        lineHeight: number;
    };
    jumboLarge: {
        fontSize: string;
        lineHeight: number;
    };
};
/**
 * Colors
 */
declare const black = "#000";
declare const white = "#fff";
declare const darkColor = "#101010";
declare const lightColor = "#f5f5f5";
declare const grayScale: {
    '10': string;
    '20': string;
    '30': string;
    /** Lightest */
    '40': string;
    '50': string;
    /** Lighter */
    '100': string;
    '150': string;
    /** Light */
    '200': string;
    '300': string;
    '400': string;
    /** Mid */
    '500': string;
    '600': string;
    /** Dark */
    '700': string;
    '750': string;
    /** Darker */
    '800': string;
    '850': string;
    /** Darkest */
    '900': string;
    '950': string;
};
declare const colors: {
    primary: string;
    secondary: string;
    gray: string;
    red: string;
    orange: string;
    yellow: string;
    green: string;
    teal: string;
    cyan: string;
    blue: string;
    indigo: string;
    purple: string;
    pink: string;
};
declare const variants: {
    primary: Record<ColorTone, string>;
    secondary: Record<ColorTone, string>;
    gray: Record<ColorTone, string>;
    red: Record<ColorTone, string>;
    orange: Record<ColorTone, string>;
    yellow: Record<ColorTone, string>;
    green: Record<ColorTone, string>;
    teal: Record<ColorTone, string>;
    cyan: Record<ColorTone, string>;
    blue: Record<ColorTone, string>;
    indigo: Record<ColorTone, string>;
    purple: Record<ColorTone, string>;
    pink: Record<ColorTone, string>;
};
/**
 * Components
 */
declare const avatar: {
    xxs: {
        size: string;
        fontSize: string;
    };
    xs: {
        size: string;
        fontSize: string;
    };
    sm: {
        size: string;
        fontSize: string;
    };
    md: {
        size: string;
        fontSize: string;
    };
    lg: {
        size: string;
        fontSize: string;
    };
    xl: {
        size: string;
        fontSize: string;
    };
    jumbo: {
        size: string;
        fontSize: string;
    };
};
declare const button: {
    xs: {
        borderRadius: string;
        fontSize: string;
        fontWeight: number;
        height: string;
        lineHeight: number;
        padding: string[];
    };
    sm: {
        borderRadius: string;
        fontSize: string;
        fontWeight: number;
        height: string;
        lineHeight: number;
        padding: string[];
    };
    md: {
        borderRadius: string;
        fontSize: string;
        fontWeight: number;
        height: string;
        lineHeight: number;
        padding: string[];
    };
    lg: {
        borderRadius: string;
        fontSize: string;
        fontWeight: number;
        height: string;
        lineHeight: number;
        padding: string[];
    };
};
declare const inputHeight: {
    normal: string;
    large: string;
};

declare const theme_avatar: typeof avatar;
declare const theme_black: typeof black;
declare const theme_breakpoints: typeof breakpoints;
declare const theme_button: typeof button;
declare const theme_colors: typeof colors;
declare const theme_darkColor: typeof darkColor;
declare const theme_dropShadow: typeof dropShadow;
declare const theme_easing: typeof easing;
declare const theme_fontFamily: typeof fontFamily;
declare const theme_fontMonospace: typeof fontMonospace;
declare const theme_fontWeights: typeof fontWeights;
declare const theme_grayScale: typeof grayScale;
declare const theme_inputHeight: typeof inputHeight;
declare const theme_lightColor: typeof lightColor;
declare const theme_opacity: typeof opacity;
declare const theme_radius: typeof radius;
declare const theme_shadow: typeof shadow;
declare const theme_spacing: typeof spacing;
declare const theme_typography: typeof typography;
declare const theme_variants: typeof variants;
declare const theme_white: typeof white;
declare namespace theme {
  export { theme_avatar as avatar, theme_black as black, theme_breakpoints as breakpoints, theme_button as button, theme_colors as colors, theme_darkColor as darkColor, theme_dropShadow as dropShadow, theme_easing as easing, theme_fontFamily as fontFamily, theme_fontMonospace as fontMonospace, theme_fontWeights as fontWeights, theme_grayScale as grayScale, theme_inputHeight as inputHeight, theme_lightColor as lightColor, theme_opacity as opacity, theme_radius as radius, theme_shadow as shadow, theme_spacing as spacing, theme_typography as typography, theme_variants as variants, theme_white as white };
}

type AvatarSize = keyof typeof avatar;
type BaseTheme = MapLiteralToPrimitive<typeof theme>;
type Breakpoint = keyof typeof breakpoints;
type ButtonSize = keyof typeof button;
type Color = keyof typeof colors;
type ColorTone = '50' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900';
type Radius = keyof typeof radius;
type Shadow = keyof typeof shadow;
type Spacing = keyof typeof spacing;
type Tone = keyof typeof variants.primary;
type Typography = keyof typeof typography;
type Variant = Color | 'black' | 'white';
type VariantWithTones = LiteralUnion<Variant | keyof {
    [key in Color as `${key}.${ColorTone}`]: unknown;
}, string>;
interface Theme extends BaseTheme {
    darkMode?: boolean;
}

type Alignment = 'left' | 'center' | 'right';
type BorderItemSide = 'bottom' | 'left' | 'right' | 'top' | 'start' | 'end' | 'all' | Direction;
interface BorderItem {
    /**
     * @default gray.100
     */
    color?: VariantWithTones;
    /**
     * @default all
     */
    side?: BorderItemSide;
    /**
     * @default 1px
     */
    size?: StandardShorthandProperties['borderWidth'] | number;
    /**
     * @default solid
     */
    style?: StandardShorthandProperties['borderStyle'];
}
type ButtonTypes = 'button' | 'submit' | 'reset';
type Direction = 'horizontal' | 'vertical';
type HeadingSizes = 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'jumbo';
type Icons = (typeof icons)[number]['name'];
type InputTypes = (typeof inputTypes)[number];
type Placement = Concat<Position, 'start' | 'middle' | 'end'>;
type PositionX = 'left-bottom' | 'left-top' | 'right-bottom' | 'right-top';
type PositionY = 'bottom-left' | 'bottom-right' | 'top-left' | 'top-right';
type Position = 'bottom' | 'left' | 'right' | 'top';
type Sizes = (typeof sizes)[number];
type SizesAll = (typeof sizesAll)[number];
type SortDirection = 'asc' | 'desc';
interface MediaQueries {
    [key: string]: any;
    _: string;
    lg: string;
    md: string;
    sm: string;
    xl: string;
    xs: string;
}
interface RecursiveChildrenEnhancerOptions {
    componentType?: JSXElementConstructor<any>;
    overrideProps?: boolean;
}
type ResponsiveSizes = '_' | Breakpoint | string;
type ResponsiveInput = {
    [key: ResponsiveSizes]: CSSProperties | SerializedStyles;
};
type ValidatePasswordOptions = Parameters<typeof validatePassword>[1];

type SpacingOrZero = Spacing | 0;
type SpacingAuto = SpacingOrZero | 'auto';
interface WithAccent<T = VariantWithTones> {
    /**
     * Component accent color
     * @default primary
     */
    accent?: T;
}
interface WithAlign {
    /**
     * Text alignment
     */
    align?: Alignment;
}
interface WithBlock {
    /**
     * Use the parent full width
     * @default false
     */
    block?: boolean;
}
interface WithBorder {
    border?: boolean | BorderItemSide | BorderItem | BorderItem[];
}
interface WithBorderless {
    /** @default false */
    borderless?: boolean;
}
interface WithButtonSize {
    /**
     * Button size
     * @default md
     */
    size?: ButtonSize;
}
interface WithBusy {
    /**
     * Add an animated icon
     * @default false
     */
    busy?: boolean;
}
interface WithChildren {
    /** Required */
    children: ReactNode;
}
interface WithChildrenOptional {
    /** Optional */
    children?: ReactNode;
}
interface WithColors {
    /**
     * Component background color
     */
    bg?: VariantWithTones;
    /**
     * Component color
     */
    color?: VariantWithTones;
}
interface WithColorsDefaultBg extends WithColors {
    /** @default primary */
    bg?: VariantWithTones;
}
interface WithColorsDefaultColor extends WithColors {
    /** @default primary */
    color?: VariantWithTones;
}
interface WithComponentSize {
    /**
     * Component size
     * @default md
     */
    size?: Sizes;
}
interface WithDimension {
    height?: StandardLonghandProperties['height'] | number;
    maxHeight?: StandardLonghandProperties['maxHeight'] | number;
    maxWidth?: StandardLonghandProperties['maxWidth'] | number;
    minHeight?: StandardLonghandProperties['minHeight'] | number;
    minWidth?: StandardLonghandProperties['minWidth'] | number;
    width?: StandardLonghandProperties['width'] | number;
}
interface WithDisabled {
    /** @default false */
    disabled?: boolean;
}
interface WithDisplay {
    display?: StandardLonghandProperties['display'];
}
interface WithElementSpacing {
    /** @default false */
    prefixSpacing?: boolean | StringOrNumber;
    /** @default false */
    suffixSpacing?: boolean | StringOrNumber;
}
interface WithFlexBox {
    /**
     * How to align the contents along the cross axis.<br />
     * Any 'align-items' valid CSS value is accepted.
     */
    align?: StandardLonghandProperties['alignItems'];
    /**
     * How to align the contents when there is extra space in the cross axis.
     */
    alignContent?: StandardLonghandProperties['alignContent'];
    /**
     * How children are placed in the flex container.<br />
     * Any 'flex-direction' valid CSS value is accepted.
     */
    direction?: StandardLonghandProperties['flexDirection'];
    /**
     * The gap CSS property sets the gaps (gutters) between rows and columns.
     * It is a shorthand for row-gap and column-gap.
     */
    gap?: StringOrNumber;
    /**
     * How to align the contents along the main axis.<br />
     * Any 'justify-content' valid CSS value is accepted.
     */
    justify?: StandardLonghandProperties['justifyContent'];
    /**
     * How to align the contents when there is extra space in the main axis.
     */
    justifyItems?: StandardLonghandProperties['justifyItems'];
    /**
     * Sets whether flex items are forced onto one line or can wrap onto multiple lines.
     */
    wrap?: StandardLonghandProperties['flexWrap'];
}
interface WithFlexItem {
    /**
     * How to align along the cross axis when contained in a Box.
     */
    alignSelf?: StandardLonghandProperties['alignSelf'];
    /**
     * A fixed or relative size along its container's main axis.
     */
    basis?: StandardLonghandProperties['flexBasis'];
    /**
     * Set width and/or height to fill the container.
     */
    fill?: boolean | Direction;
    /**
     * Set flex-grow and/or flex-shrink.
     */
    flex?: boolean | 'grow' | 'shrink' | {
        grow?: number;
        shrink?: number;
    };
    /**
     * Sets how the item is justified inside its container along the appropriate axis.
     */
    justifySelf?: StandardLonghandProperties['justifySelf'];
    /**
     * Sets the order to lay out an item in a flex container.
     */
    order?: StandardLonghandProperties['order'];
}
interface WithFormElements extends WithDisabled {
    name: string;
    /** @default false */
    readOnly?: boolean;
    width?: StringOrNumber;
}
interface WithInline {
    /**
     * Display as an inline element
     * @default false
     */
    inline?: boolean;
}
interface WithInvert {
    /**
     * Invert background
     * @default false
     */
    invert?: boolean;
}
interface WithLayout extends WithDisplay, WithDimension {
    opacity?: StandardLonghandProperties['opacity'] | number;
    overflow?: StandardShorthandProperties['overflow'];
    pointerEvents?: StandardLonghandProperties['pointerEvents'];
    textAlign?: StandardLonghandProperties['textAlign'];
    transform?: StandardLonghandProperties['transform'];
    transformOrigin?: StandardLonghandProperties['transformOrigin'];
    transition?: StandardShorthandProperties['transition'];
}
interface WithLight {
    /**
     * Remove bold style
     */
    light?: boolean;
}
interface WithMargin {
    /** Also accepts the shortcuts: mb (margin-bottom), ml, mr, mt, mx (margin horizontal), my (margin vertical) */
    margin?: SpacingOrZero;
    /** margin-bottom */
    mb?: SpacingAuto;
    /** margin-left */
    ml?: SpacingAuto;
    /** margin-right */
    mr?: SpacingAuto;
    /** margin-top */
    mt?: SpacingAuto;
    /** margin horizontal axis */
    mx?: SpacingAuto;
    /** margin vertical axis */
    my?: SpacingOrZero;
}
interface WithOpen {
    /**
     * Controlled status
     */
    open?: boolean;
}
interface WithPadding {
    /** Also accepts the shortcuts: pb (padding-bottom), pl, pr, pt, px (padding horizontal), py (padding vertical) */
    padding?: SpacingOrZero;
    /** padding-bottom */
    pb?: Spacing;
    /** padding-left */
    pl?: Spacing;
    /** padding-right */
    pr?: Spacing;
    /** padding-top */
    pt?: Spacing;
    /** padding horizontal axis */
    px?: Spacing;
    /** padding vertical axis */
    py?: Spacing;
}
interface WithPositioning {
    bottom?: StandardLonghandProperties['bottom'] | number;
    left?: StandardLonghandProperties['left'] | number;
    position?: StandardLonghandProperties['position'];
    right?: StandardLonghandProperties['right'] | number;
    top?: StandardLonghandProperties['top'] | number;
    transform?: StandardLonghandProperties['transform'];
    zIndex?: StandardLonghandProperties['zIndex'] | number;
}
interface WithRadius {
    radius?: Radius | {
        bottom?: Radius;
        left?: Radius;
        right?: Radius;
        top?: Radius;
    } | false;
}
interface WithShadow {
    shadow?: Shadow | false;
}
interface WithTextSize<T = SizesAll> {
    /**
     * Text size
     */
    size?: T;
}
interface WithTextOptions<T extends SizesAll | HeadingSizes = SizesAll> extends WithTextSize<T> {
    /**
     * Bold text
     * @default false
     */
    bold?: boolean;
    /**
     * Italic text
     * @default false
     */
    italic?: boolean;
    letterSpacing?: StandardLonghandProperties['letterSpacing'];
    lineHeight?: StandardLonghandProperties['lineHeight'];
    textDecoration?: StandardShorthandProperties['textDecoration'];
    textTransform?: StandardLonghandProperties['textTransform'];
    wordSpacing?: StandardLonghandProperties['wordSpacing'];
}
interface WithTheme {
    theme?: Partial<Theme>;
}
interface WithTransparent {
    /**
     * Remove background and color
     * @default false
     */
    transparent?: boolean;
}

interface BaseProps {
    [hey: string]: any;
    theme?: Partial<Theme>;
}
interface StyledProps {
    as?: ElementType;
    theme?: Theme;
}
interface CheckboxItem extends WithDisabled {
    label?: ReactNode;
    name: string;
}
interface DropdownOption extends Option {
    prefix?: ReactNode;
    suffix?: ReactNode;
    type?: string;
}
type OmitElementProps<TElement, TProps, TProperties extends string = never> = TProps & Omit<HTMLProps<TElement>, 'ref' | 'size' | keyof TProps | TProperties>;
interface RadioItem extends WithDisabled {
    accent?: VariantWithTones;
    label?: ReactNode;
    value: StringOrNumber;
}

type index_Alignment = Alignment;
type index_AvatarSize = AvatarSize;
type index_BaseProps = BaseProps;
type index_BaseTheme = BaseTheme;
type index_BorderItem = BorderItem;
type index_BorderItemSide = BorderItemSide;
type index_Breakpoint = Breakpoint;
type index_ButtonSize = ButtonSize;
type index_ButtonTypes = ButtonTypes;
type index_CheckboxItem = CheckboxItem;
type index_Color = Color;
type index_ColorTone = ColorTone;
type index_Direction = Direction;
type index_DropdownOption = DropdownOption;
type index_HeadingSizes = HeadingSizes;
type index_Icons = Icons;
type index_InputTypes = InputTypes;
type index_MediaQueries = MediaQueries;
type index_OmitElementProps<TElement, TProps, TProperties extends string = never> = OmitElementProps<TElement, TProps, TProperties>;
type index_Placement = Placement;
type index_Position = Position;
type index_PositionX = PositionX;
type index_PositionY = PositionY;
type index_RadioItem = RadioItem;
type index_Radius = Radius;
type index_RecursiveChildrenEnhancerOptions = RecursiveChildrenEnhancerOptions;
type index_ResponsiveInput = ResponsiveInput;
type index_ResponsiveSizes = ResponsiveSizes;
type index_Shadow = Shadow;
type index_Sizes = Sizes;
type index_SizesAll = SizesAll;
type index_SortDirection = SortDirection;
type index_Spacing = Spacing;
type index_StyledProps = StyledProps;
type index_Theme = Theme;
type index_Tone = Tone;
type index_Typography = Typography;
type index_ValidatePasswordOptions = ValidatePasswordOptions;
type index_Variant = Variant;
type index_VariantWithTones = VariantWithTones;
type index_WithAccent<T = VariantWithTones> = WithAccent<T>;
type index_WithAlign = WithAlign;
type index_WithBlock = WithBlock;
type index_WithBorder = WithBorder;
type index_WithBorderless = WithBorderless;
type index_WithBusy = WithBusy;
type index_WithButtonSize = WithButtonSize;
type index_WithChildren = WithChildren;
type index_WithChildrenOptional = WithChildrenOptional;
type index_WithColors = WithColors;
type index_WithColorsDefaultBg = WithColorsDefaultBg;
type index_WithColorsDefaultColor = WithColorsDefaultColor;
type index_WithComponentSize = WithComponentSize;
type index_WithDimension = WithDimension;
type index_WithDisabled = WithDisabled;
type index_WithDisplay = WithDisplay;
type index_WithElementSpacing = WithElementSpacing;
type index_WithFlexBox = WithFlexBox;
type index_WithFlexItem = WithFlexItem;
type index_WithFormElements = WithFormElements;
type index_WithInline = WithInline;
type index_WithInvert = WithInvert;
type index_WithLayout = WithLayout;
type index_WithLight = WithLight;
type index_WithMargin = WithMargin;
type index_WithOpen = WithOpen;
type index_WithPadding = WithPadding;
type index_WithPositioning = WithPositioning;
type index_WithRadius = WithRadius;
type index_WithShadow = WithShadow;
type index_WithTextOptions<T extends SizesAll | HeadingSizes = SizesAll> = WithTextOptions<T>;
type index_WithTextSize<T = SizesAll> = WithTextSize<T>;
type index_WithTheme = WithTheme;
type index_WithTransparent = WithTransparent;
declare namespace index {
  export type { index_Alignment as Alignment, index_AvatarSize as AvatarSize, index_BaseProps as BaseProps, index_BaseTheme as BaseTheme, index_BorderItem as BorderItem, index_BorderItemSide as BorderItemSide, index_Breakpoint as Breakpoint, index_ButtonSize as ButtonSize, index_ButtonTypes as ButtonTypes, index_CheckboxItem as CheckboxItem, index_Color as Color, index_ColorTone as ColorTone, index_Direction as Direction, index_DropdownOption as DropdownOption, index_HeadingSizes as HeadingSizes, index_Icons as Icons, index_InputTypes as InputTypes, index_MediaQueries as MediaQueries, index_OmitElementProps as OmitElementProps, index_Placement as Placement, index_Position as Position, index_PositionX as PositionX, index_PositionY as PositionY, index_RadioItem as RadioItem, index_Radius as Radius, index_RecursiveChildrenEnhancerOptions as RecursiveChildrenEnhancerOptions, index_ResponsiveInput as ResponsiveInput, index_ResponsiveSizes as ResponsiveSizes, index_Shadow as Shadow, index_Sizes as Sizes, index_SizesAll as SizesAll, index_SortDirection as SortDirection, index_Spacing as Spacing, index_StyledProps as StyledProps, index_Theme as Theme, index_Tone as Tone, index_Typography as Typography, index_ValidatePasswordOptions as ValidatePasswordOptions, index_Variant as Variant, index_VariantWithTones as VariantWithTones, index_WithAccent as WithAccent, index_WithAlign as WithAlign, index_WithBlock as WithBlock, index_WithBorder as WithBorder, index_WithBorderless as WithBorderless, index_WithBusy as WithBusy, index_WithButtonSize as WithButtonSize, index_WithChildren as WithChildren, index_WithChildrenOptional as WithChildrenOptional, index_WithColors as WithColors, index_WithColorsDefaultBg as WithColorsDefaultBg, index_WithColorsDefaultColor as WithColorsDefaultColor, index_WithComponentSize as WithComponentSize, index_WithDimension as WithDimension, index_WithDisabled as WithDisabled, index_WithDisplay as WithDisplay, index_WithElementSpacing as WithElementSpacing, index_WithFlexBox as WithFlexBox, index_WithFlexItem as WithFlexItem, index_WithFormElements as WithFormElements, index_WithInline as WithInline, index_WithInvert as WithInvert, index_WithLayout as WithLayout, index_WithLight as WithLight, index_WithMargin as WithMargin, index_WithOpen as WithOpen, index_WithPadding as WithPadding, index_WithPositioning as WithPositioning, index_WithRadius as WithRadius, index_WithShadow as WithShadow, index_WithTextOptions as WithTextOptions, index_WithTextSize as WithTextSize, index_WithTheme as WithTheme, index_WithTransparent as WithTransparent };
}

interface AlertKnownProps extends StyledProps, WithBorder, WithChildren, Omit<WithFlexBox, 'alignContent' | 'justifyItems'>, WithDimension, WithMargin, WithPadding, WithRadius {
    hideIcon?: boolean;
    /**
     * Custom icon.
     */
    icon?: Icons;
    /**
     * Icon size.
     * @default 20
     */
    iconSize?: number;
    /**
     * Use a light background color.
     * @default false
     */
    light?: boolean;
    /** @default success */
    type: 'success' | 'warning' | 'error' | 'info' | 'neutral';
}
type AlertProps = Simplify<AlertKnownProps>;
declare const Alert: react.ForwardRefExoticComponent<{
    hideIcon?: boolean | undefined;
    icon?: "align-bottom" | "align-center" | "align-left" | "align-middle" | "align-right" | "align-top" | "apple-watch" | "arrange-back" | "arrange-front" | "attachment" | "backspace" | "band-aid" | "battery" | "battery-empty" | "battery-full" | "board" | "border-all" | "border-bottom" | "border-left" | "border-right" | "border-style-dashed" | "border-style-dotted" | "border-style-solid" | "border-top" | "bot" | "bowl" | "boy" | "briefcase" | "browse" | "browser" | "calculator" | "calendar-dates" | "calendar-due" | "calendar-next" | "calendar-today" | "calendar" | "calibrate" | "captions" | "card-clubs" | "card-diamonds" | "card-hearts" | "card-spades" | "carousel" | "cast" | "chart" | "clapper-board" | "clipboard" | "code" | "code-slash" | "collage" | "color-bucket" | "color-picker" | "community" | "components" | "compress-left" | "compress-right" | "compress-v" | "compress" | "controller" | "copy" | "corner-double-down-left" | "corner-double-down-right" | "corner-double-left-down" | "corner-double-left-up" | "corner-double-right-down" | "corner-double-right-up" | "corner-double-up-left" | "corner-double-up-right" | "corner-down-left" | "corner-down-right" | "corner-left-down" | "corner-left-up" | "corner-right-down" | "corner-right-up" | "corner-up-left" | "corner-up-right" | "credit-card" | "crop" | "dark-mode" | "desktop" | "details-less" | "details-more" | "dialpad" | "dice-1" | "dice-2" | "dice-3" | "dice-4" | "dice-5" | "dice-6" | "display-flex" | "display-fullwidth" | "display-grid" | "display-spacing" | "distribute-horizontal" | "distribute-vertical" | "dock-bottom" | "dock-left" | "dock-right" | "dock-window" | "drive" | "drop-invert" | "drop-opacity" | "drop" | "duplicate" | "edit-black-point" | "edit-contrast" | "edit-exposure" | "edit-fade" | "edit-flip-h" | "edit-flip-v" | "edit-highlight" | "edit-markup" | "edit-mask" | "edit-noise" | "edit-shadows" | "edit-straight" | "edit-unmask" | "enter" | "erase" | "euro" | "export" | "extension-add" | "extension-remove" | "extension" | "external" | "feed" | "file-add" | "file-document" | "file-remove" | "file" | "film" | "filters" | "folder-add" | "folder-remove" | "folder" | "font-height" | "font-spacing" | "format-center" | "format-color" | "format-heading" | "format-indent-decrease" | "format-indent-increase" | "format-italic" | "format-justify" | "format-left" | "format-line-height" | "format-right" | "format-separator" | "format-slash" | "format-text" | "format-underline" | "format-uppercase" | "games" | "gender-female" | "gender-male" | "girl" | "glass-alt" | "home-screen" | "image" | "import" | "inpicture" | "insert-after-o" | "insert-after-r" | "insert-after" | "insert-before-o" | "insert-before-r" | "insert-before" | "insights" | "internal" | "laptop" | "list-tree" | "list" | "lock-unlock" | "lock" | "log-off" | "loupe" | "magnet" | "mail-forward" | "mail-reply" | "maximize-alt" | "maximize" | "menu-boxed" | "menu-grid-o" | "menu-grid-r" | "menu-left-alt" | "menu-left" | "menu-motion" | "menu-right-alt" | "menu-right" | "menu" | "merge-horizontal" | "merge-vertical" | "mini-player" | "minimize-alt" | "minimize" | "moon" | "mouse" | "move-down" | "move-left" | "move-right" | "move-up" | "notifications" | "pacman" | "path-back" | "path-crop" | "path-divide" | "path-exclude" | "path-front" | "path-intersect" | "path-outline" | "path-trim" | "path-unite" | "performance" | "piano" | "pill" | "plug" | "pokemon" | "poll" | "printer" | "profile" | "pull-clear" | "push-chevron-down-o" | "circle" | "push-chevron-down-r" | "square" | "push-chevron-down" | "push-chevron-left-o" | "push-chevron-left-r" | "push-chevron-left" | "push-chevron-right-o" | "push-chevron-right-r" | "push-chevron-right" | "push-chevron-up-o" | "push-chevron-up-r" | "push-chevron-up" | "push-down" | "push-left" | "push-right" | "push-up" | "qr" | "quote-o" | "quote" | "radio-check" | "radio-checked" | "ratio" | "redo" | "remove-r" | "remove" | "rename" | "reorder" | "row-first" | "row-last" | "ruler" | "scan" | "screen-mirror" | "screen-wide" | "screen" | "scroll-h" | "scroll-v" | "search-found" | "search-loading" | "search" | "select-o" | "select-r" | "select" | "shopping-bag" | "shopping-cart" | "sidebar-open" | "sidebar-right" | "sidebar" | "signal" | "size" | "smartphone" | "smile-mouth-open" | "smile-neutral" | "smile-no-mouth" | "smile-none" | "smile-sad" | "smile-upside" | "smile" | "space-between-v" | "space-between" | "spinner-alt" | "spinner-two-alt" | "spinner-two" | "spinner" | "sun" | "swap-vertical" | "swap" | "tab" | "terrain" | "thermostat" | "today" | "toggle-off" | "toggle-on" | "toggle-square-off" | "toggle-square" | "toolbar-bottom" | "toolbar-left" | "toolbar-right" | "toolbar-top" | "toolbox" | "touchpad" | "track" | "transcript" | "trash-empty" | "trash" | "trending-down" | "trending" | "tv" | "ui-kit" | "umbrella" | "undo" | "usb" | "usb-c" | "view-cols" | "view-comfortable" | "view-day" | "view-grid" | "view-list" | "view-month" | "view-split" | "voicemail-o" | "voicemail-r" | "voicemail" | "work-alt" | "yinyang" | "zoom-in" | "zoom-out" | "accessibility" | "accessibility-circle" | "accessibility-o" | "airplane" | "airpods" | "alarm" | "album" | "anchor" | "angular" | "apple" | "approximately-equal" | "archive" | "arrow-bottom-left-o" | "arrow-bottom-left-r" | "arrow-bottom-left" | "arrow-bottom-right-o" | "arrow-bottom-right-r" | "arrow-bottom-right" | "arrow-down-o" | "arrow-down-r" | "arrow-down" | "arrows-exchange-alt-v" | "arrows-exchange-alt" | "arrows-exchange-v" | "arrows-exchange" | "arrows-expand-down-left" | "arrows-expand-down-right" | "arrows-expand-left" | "arrows-expand-right" | "arrows-expand-up-left" | "arrows-expand-up-right" | "arrows-h" | "arrows-h-alt" | "arrow-left-o" | "arrow-left-r" | "arrow-left" | "arrow-right-o" | "arrow-right-r" | "arrow-right" | "arrows-scroll-h" | "arrows-scroll-v" | "arrow-switch" | "arrow-switch-o" | "arrow-switch-r" | "arrow-top-left-o" | "arrow-top-left-r" | "arrow-top-left" | "arrow-top-right-o" | "arrow-top-right-r" | "arrow-top-right" | "arrow-up-o" | "arrow-up-r" | "arrow-up" | "arrows-v" | "arrows-v-alt" | "asterisk" | "asterisk-o" | "asterisk-r" | "atlassian" | "attribution" | "award" | "badge" | "bamboo" | "bell" | "bell-o" | "bell-slash" | "bitbucket" | "block-o" | "blocked" | "bluetooth" | "book" | "bookmark" | "bookmark-slash" | "bug" | "bullseye" | "bullseye-arrow" | "c-plus-plus" | "cache" | "camera" | "camera-alt" | "categories" | "check" | "check-circle" | "check-o" | "check-r" | "checklist" | "chevron-double-down-o" | "chevron-double-down-r" | "chevron-double-left-o" | "chevron-double-left-r" | "chevron-double-right-o" | "chevron-double-right-r" | "chevron-double-up-o" | "chevron-double-up-r" | "chevron-down-o" | "chevron-down-r" | "chevron-down" | "chevron-left-o" | "chevron-left-r" | "chevron-left" | "chevron-right-o" | "chevron-right-r" | "chevron-right" | "chevron-up-o" | "chevron-up-r" | "chevron-up" | "chevron-double-down" | "chevron-double-left" | "chevron-double-right" | "chevron-double-up" | "chip" | "circle-ci" | "circle-half" | "clock" | "close" | "close-circle" | "close-o" | "close-r" | "cloud" | "cloud-slash" | "code-climate" | "code-review" | "codepen" | "codesandbox" | "codescan" | "coffee" | "cog" | "command-key" | "command-palette" | "comment" | "comment-external" | "container" | "control-key" | "copyright" | "cross" | "crown" | "danger-circle" | "danger-o" | "database" | "diamond" | "digital-ocean" | "disc" | "discord" | "discussion" | "discussion-closed" | "discussion-duplicated" | "discussion-outdated" | "divide" | "download" | "draft" | "dribble" | "dropbox" | "eject" | "ellipsis" | "equal" | "expand" | "eye" | "eye-slash" | "facebook" | "figma" | "filter" | "flag" | "flame" | "flash" | "flash-circle" | "flash-o" | "focus" | "fold" | "fold-down" | "fold-up" | "format-bold" | "format-strikethrough" | "framer" | "ghost" | "gift" | "git" | "git-branch" | "git-commit" | "git-compare" | "git-fork" | "git-merge" | "git-pull-request" | "github" | "github-actions" | "github-copilot" | "gitlab" | "gitter" | "glass" | "glasses" | "globe" | "google" | "google-calendar" | "google-drive" | "google-meet" | "grabber" | "graph" | "greater-than" | "greater-than-or-equal" | "hash" | "headphone" | "heart" | "heart-o" | "help" | "hexagon" | "history" | "home" | "hourglass" | "inbox" | "infinity" | "info-circle" | "info-o" | "instagram" | "invision" | "iterations" | "javascript" | "jenkins" | "jest" | "jsfiddle" | "key" | "key-alt" | "keyboard" | "keyhole-circle" | "keyhole-o" | "kotlin" | "law" | "layout-grid" | "layout-grid-small" | "layout-list" | "layout-pin" | "leaf" | "less-than" | "less-than-or-equal" | "lightbulb" | "link" | "linkedin" | "live" | "live-photo" | "loadbar" | "loadbar-alt" | "loadbar-doc" | "loadbar-sound" | "location" | "log" | "loom" | "mail" | "mail-read" | "markdown" | "megaphone" | "mention" | "menu-close" | "menu-open" | "menu-round-circle" | "menu-round-o" | "message" | "message-circle" | "message-o" | "messenger" | "meta" | "meter" | "mic" | "mic-slash" | "microsoft" | "microsoft-teams" | "microsoft-windows" | "milestone" | "minus" | "minus-circle" | "minus-o" | "minus-r" | "money-sign" | "more" | "more-circle" | "more-o" | "more-r" | "more-vertical" | "more-vertical-circle" | "more-vertical-o" | "more-vertical-r" | "multi-select" | "music-note" | "music-note-alt" | "next" | "next-o" | "next-r" | "next.js" | "node.js" | "not-equal" | "note" | "notebook" | "npm" | "numbers" | "option-key" | "options" | "organization" | "package" | "paintbrush" | "paperclip" | "password" | "patreon" | "pause" | "pause-o" | "pause-r" | "paypal" | "pencil" | "percent" | "phone" | "phone-o" | "pi" | "pin" | "pin-slash" | "play" | "play-backwards" | "play-forwards" | "play-o" | "play-r" | "playlist" | "playlist-add" | "playlist-check" | "playlist-remove" | "playlist-search" | "plus" | "plus-circle" | "plus-minus" | "plus-minus-slash" | "plus-o" | "plus-r" | "podcast" | "previous" | "previous-o" | "previous-r" | "product-hunt" | "project" | "pulse" | "python" | "ram" | "react" | "record-o" | "redux" | "repeat" | "repo" | "report" | "return" | "roadmap" | "rocket" | "rocket-chat" | "rust" | "safe" | "send" | "send-alt" | "server" | "serverless" | "share" | "share-mobile" | "shield" | "shield-slash" | "shift-key" | "shortcuts" | "shuffle" | "side-by-side" | "sigma" | "sign-in" | "sign-out" | "single-select" | "skype" | "slack" | "sort" | "sort-asc" | "sort-desc" | "sparkle" | "sparkle-o" | "speaker" | "spotify" | "square-payments" | "square-root" | "stack" | "stacked" | "star" | "star-o" | "stop" | "stop-o" | "stop-r" | "stop-sign" | "stopwatch" | "storybook" | "student" | "style" | "svelte" | "swift" | "sync" | "sync-alt" | "tab-key" | "tag" | "tags" | "tasklist" | "template" | "terminal" | "thumbs-down" | "thumbs-up" | "tidal" | "timelapse" | "timer" | "times" | "tools" | "tools-alt" | "touch-id" | "travis-ci" | "tree" | "trello" | "triangle" | "trophy" | "tumblr" | "twilio" | "twitch" | "twitter" | "typescript" | "unavailable-o" | "unblock-o" | "unfold" | "unlink" | "unread" | "unverified" | "upload" | "user" | "user-add" | "user-remove" | "users" | "vector" | "vercel" | "verified" | "versions" | "video" | "video-camera" | "vimeo" | "vinyl" | "volume-high" | "volume-low" | "volume-mid" | "vscode" | "vue" | "wand" | "wave" | "webcam" | "webhook" | "website" | "webstorm" | "whatsapp" | "wheelchair" | "wi-fi" | "workflow" | "workplace" | "youtube" | "zap" | "zigzag" | "zoom" | undefined;
    iconSize?: number | undefined;
    light?: boolean | undefined;
    type: 'success' | 'warning' | 'error' | 'info' | 'neutral';
    as?: react.ElementType | undefined;
    theme?: Theme | undefined;
    border?: boolean | BorderItemSide | BorderItem | BorderItem[] | undefined;
    children: react.ReactNode;
    wrap?: csstype.Property.FlexWrap | undefined;
    justify?: csstype.Property.JustifyContent | undefined;
    direction?: csstype.Property.FlexDirection | undefined;
    gap?: _gilbarbara_types.StringOrNumber | undefined;
    align?: csstype.Property.AlignItems | undefined;
    height?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | undefined;
    maxHeight?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "none" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "-webkit-min-content" | "intrinsic" | undefined;
    maxWidth?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "none" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "-webkit-min-content" | "intrinsic" | undefined;
    minHeight?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "-webkit-min-content" | "intrinsic" | undefined;
    minWidth?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "-webkit-min-content" | "intrinsic" | "-webkit-fill-available" | "min-intrinsic" | undefined;
    width?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "intrinsic" | "min-intrinsic" | undefined;
    margin?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    mb?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    ml?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mr?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mt?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mx?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    my?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    padding?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    pb?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    pl?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    pr?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    pt?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    px?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    py?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    radius?: false | "sm" | "md" | "lg" | "xs" | "xl" | "xxs" | "round" | {
        bottom?: "sm" | "md" | "lg" | "xs" | "xl" | "xxs" | "round" | undefined;
        left?: "sm" | "md" | "lg" | "xs" | "xl" | "xxs" | "round" | undefined;
        right?: "sm" | "md" | "lg" | "xs" | "xl" | "xxs" | "round" | undefined;
        top?: "sm" | "md" | "lg" | "xs" | "xl" | "xxs" | "round" | undefined;
    } | undefined;
} & react.RefAttributes<HTMLDivElement>>;

interface AnchorKnownProps extends StyledProps, WithChildren, Pick<WithColorsDefaultColor, 'color'>, WithDisplay, WithMargin, WithPadding, WithTextOptions {
    external?: boolean;
    hideDecoration?: boolean;
    href: string;
    iconAfter?: Icons;
    iconBefore?: Icons;
    name?: string;
}
type AnchorProps = Simplify<OmitElementProps<HTMLAnchorElement, AnchorKnownProps>>;
declare const Anchor: react.ForwardRefExoticComponent<{
    external?: boolean | undefined;
    hideDecoration?: boolean | undefined;
    href: string;
    iconAfter?: "align-bottom" | "align-center" | "align-left" | "align-middle" | "align-right" | "align-top" | "apple-watch" | "arrange-back" | "arrange-front" | "attachment" | "backspace" | "band-aid" | "battery" | "battery-empty" | "battery-full" | "board" | "border-all" | "border-bottom" | "border-left" | "border-right" | "border-style-dashed" | "border-style-dotted" | "border-style-solid" | "border-top" | "bot" | "bowl" | "boy" | "briefcase" | "browse" | "browser" | "calculator" | "calendar-dates" | "calendar-due" | "calendar-next" | "calendar-today" | "calendar" | "calibrate" | "captions" | "card-clubs" | "card-diamonds" | "card-hearts" | "card-spades" | "carousel" | "cast" | "chart" | "clapper-board" | "clipboard" | "code" | "code-slash" | "collage" | "color-bucket" | "color-picker" | "community" | "components" | "compress-left" | "compress-right" | "compress-v" | "compress" | "controller" | "copy" | "corner-double-down-left" | "corner-double-down-right" | "corner-double-left-down" | "corner-double-left-up" | "corner-double-right-down" | "corner-double-right-up" | "corner-double-up-left" | "corner-double-up-right" | "corner-down-left" | "corner-down-right" | "corner-left-down" | "corner-left-up" | "corner-right-down" | "corner-right-up" | "corner-up-left" | "corner-up-right" | "credit-card" | "crop" | "dark-mode" | "desktop" | "details-less" | "details-more" | "dialpad" | "dice-1" | "dice-2" | "dice-3" | "dice-4" | "dice-5" | "dice-6" | "display-flex" | "display-fullwidth" | "display-grid" | "display-spacing" | "distribute-horizontal" | "distribute-vertical" | "dock-bottom" | "dock-left" | "dock-right" | "dock-window" | "drive" | "drop-invert" | "drop-opacity" | "drop" | "duplicate" | "edit-black-point" | "edit-contrast" | "edit-exposure" | "edit-fade" | "edit-flip-h" | "edit-flip-v" | "edit-highlight" | "edit-markup" | "edit-mask" | "edit-noise" | "edit-shadows" | "edit-straight" | "edit-unmask" | "enter" | "erase" | "euro" | "export" | "extension-add" | "extension-remove" | "extension" | "external" | "feed" | "file-add" | "file-document" | "file-remove" | "file" | "film" | "filters" | "folder-add" | "folder-remove" | "folder" | "font-height" | "font-spacing" | "format-center" | "format-color" | "format-heading" | "format-indent-decrease" | "format-indent-increase" | "format-italic" | "format-justify" | "format-left" | "format-line-height" | "format-right" | "format-separator" | "format-slash" | "format-text" | "format-underline" | "format-uppercase" | "games" | "gender-female" | "gender-male" | "girl" | "glass-alt" | "home-screen" | "image" | "import" | "inpicture" | "insert-after-o" | "insert-after-r" | "insert-after" | "insert-before-o" | "insert-before-r" | "insert-before" | "insights" | "internal" | "laptop" | "list-tree" | "list" | "lock-unlock" | "lock" | "log-off" | "loupe" | "magnet" | "mail-forward" | "mail-reply" | "maximize-alt" | "maximize" | "menu-boxed" | "menu-grid-o" | "menu-grid-r" | "menu-left-alt" | "menu-left" | "menu-motion" | "menu-right-alt" | "menu-right" | "menu" | "merge-horizontal" | "merge-vertical" | "mini-player" | "minimize-alt" | "minimize" | "moon" | "mouse" | "move-down" | "move-left" | "move-right" | "move-up" | "notifications" | "pacman" | "path-back" | "path-crop" | "path-divide" | "path-exclude" | "path-front" | "path-intersect" | "path-outline" | "path-trim" | "path-unite" | "performance" | "piano" | "pill" | "plug" | "pokemon" | "poll" | "printer" | "profile" | "pull-clear" | "push-chevron-down-o" | "circle" | "push-chevron-down-r" | "square" | "push-chevron-down" | "push-chevron-left-o" | "push-chevron-left-r" | "push-chevron-left" | "push-chevron-right-o" | "push-chevron-right-r" | "push-chevron-right" | "push-chevron-up-o" | "push-chevron-up-r" | "push-chevron-up" | "push-down" | "push-left" | "push-right" | "push-up" | "qr" | "quote-o" | "quote" | "radio-check" | "radio-checked" | "ratio" | "redo" | "remove-r" | "remove" | "rename" | "reorder" | "row-first" | "row-last" | "ruler" | "scan" | "screen-mirror" | "screen-wide" | "screen" | "scroll-h" | "scroll-v" | "search-found" | "search-loading" | "search" | "select-o" | "select-r" | "select" | "shopping-bag" | "shopping-cart" | "sidebar-open" | "sidebar-right" | "sidebar" | "signal" | "size" | "smartphone" | "smile-mouth-open" | "smile-neutral" | "smile-no-mouth" | "smile-none" | "smile-sad" | "smile-upside" | "smile" | "space-between-v" | "space-between" | "spinner-alt" | "spinner-two-alt" | "spinner-two" | "spinner" | "sun" | "swap-vertical" | "swap" | "tab" | "terrain" | "thermostat" | "today" | "toggle-off" | "toggle-on" | "toggle-square-off" | "toggle-square" | "toolbar-bottom" | "toolbar-left" | "toolbar-right" | "toolbar-top" | "toolbox" | "touchpad" | "track" | "transcript" | "trash-empty" | "trash" | "trending-down" | "trending" | "tv" | "ui-kit" | "umbrella" | "undo" | "usb" | "usb-c" | "view-cols" | "view-comfortable" | "view-day" | "view-grid" | "view-list" | "view-month" | "view-split" | "voicemail-o" | "voicemail-r" | "voicemail" | "work-alt" | "yinyang" | "zoom-in" | "zoom-out" | "accessibility" | "accessibility-circle" | "accessibility-o" | "airplane" | "airpods" | "alarm" | "album" | "anchor" | "angular" | "apple" | "approximately-equal" | "archive" | "arrow-bottom-left-o" | "arrow-bottom-left-r" | "arrow-bottom-left" | "arrow-bottom-right-o" | "arrow-bottom-right-r" | "arrow-bottom-right" | "arrow-down-o" | "arrow-down-r" | "arrow-down" | "arrows-exchange-alt-v" | "arrows-exchange-alt" | "arrows-exchange-v" | "arrows-exchange" | "arrows-expand-down-left" | "arrows-expand-down-right" | "arrows-expand-left" | "arrows-expand-right" | "arrows-expand-up-left" | "arrows-expand-up-right" | "arrows-h" | "arrows-h-alt" | "arrow-left-o" | "arrow-left-r" | "arrow-left" | "arrow-right-o" | "arrow-right-r" | "arrow-right" | "arrows-scroll-h" | "arrows-scroll-v" | "arrow-switch" | "arrow-switch-o" | "arrow-switch-r" | "arrow-top-left-o" | "arrow-top-left-r" | "arrow-top-left" | "arrow-top-right-o" | "arrow-top-right-r" | "arrow-top-right" | "arrow-up-o" | "arrow-up-r" | "arrow-up" | "arrows-v" | "arrows-v-alt" | "asterisk" | "asterisk-o" | "asterisk-r" | "atlassian" | "attribution" | "award" | "badge" | "bamboo" | "bell" | "bell-o" | "bell-slash" | "bitbucket" | "block-o" | "blocked" | "bluetooth" | "book" | "bookmark" | "bookmark-slash" | "bug" | "bullseye" | "bullseye-arrow" | "c-plus-plus" | "cache" | "camera" | "camera-alt" | "categories" | "check" | "check-circle" | "check-o" | "check-r" | "checklist" | "chevron-double-down-o" | "chevron-double-down-r" | "chevron-double-left-o" | "chevron-double-left-r" | "chevron-double-right-o" | "chevron-double-right-r" | "chevron-double-up-o" | "chevron-double-up-r" | "chevron-down-o" | "chevron-down-r" | "chevron-down" | "chevron-left-o" | "chevron-left-r" | "chevron-left" | "chevron-right-o" | "chevron-right-r" | "chevron-right" | "chevron-up-o" | "chevron-up-r" | "chevron-up" | "chevron-double-down" | "chevron-double-left" | "chevron-double-right" | "chevron-double-up" | "chip" | "circle-ci" | "circle-half" | "clock" | "close" | "close-circle" | "close-o" | "close-r" | "cloud" | "cloud-slash" | "code-climate" | "code-review" | "codepen" | "codesandbox" | "codescan" | "coffee" | "cog" | "command-key" | "command-palette" | "comment" | "comment-external" | "container" | "control-key" | "copyright" | "cross" | "crown" | "danger-circle" | "danger-o" | "database" | "diamond" | "digital-ocean" | "disc" | "discord" | "discussion" | "discussion-closed" | "discussion-duplicated" | "discussion-outdated" | "divide" | "download" | "draft" | "dribble" | "dropbox" | "eject" | "ellipsis" | "equal" | "expand" | "eye" | "eye-slash" | "facebook" | "figma" | "filter" | "flag" | "flame" | "flash" | "flash-circle" | "flash-o" | "focus" | "fold" | "fold-down" | "fold-up" | "format-bold" | "format-strikethrough" | "framer" | "ghost" | "gift" | "git" | "git-branch" | "git-commit" | "git-compare" | "git-fork" | "git-merge" | "git-pull-request" | "github" | "github-actions" | "github-copilot" | "gitlab" | "gitter" | "glass" | "glasses" | "globe" | "google" | "google-calendar" | "google-drive" | "google-meet" | "grabber" | "graph" | "greater-than" | "greater-than-or-equal" | "hash" | "headphone" | "heart" | "heart-o" | "help" | "hexagon" | "history" | "home" | "hourglass" | "inbox" | "infinity" | "info-circle" | "info-o" | "instagram" | "invision" | "iterations" | "javascript" | "jenkins" | "jest" | "jsfiddle" | "key" | "key-alt" | "keyboard" | "keyhole-circle" | "keyhole-o" | "kotlin" | "law" | "layout-grid" | "layout-grid-small" | "layout-list" | "layout-pin" | "leaf" | "less-than" | "less-than-or-equal" | "lightbulb" | "link" | "linkedin" | "live" | "live-photo" | "loadbar" | "loadbar-alt" | "loadbar-doc" | "loadbar-sound" | "location" | "log" | "loom" | "mail" | "mail-read" | "markdown" | "megaphone" | "mention" | "menu-close" | "menu-open" | "menu-round-circle" | "menu-round-o" | "message" | "message-circle" | "message-o" | "messenger" | "meta" | "meter" | "mic" | "mic-slash" | "microsoft" | "microsoft-teams" | "microsoft-windows" | "milestone" | "minus" | "minus-circle" | "minus-o" | "minus-r" | "money-sign" | "more" | "more-circle" | "more-o" | "more-r" | "more-vertical" | "more-vertical-circle" | "more-vertical-o" | "more-vertical-r" | "multi-select" | "music-note" | "music-note-alt" | "next" | "next-o" | "next-r" | "next.js" | "node.js" | "not-equal" | "note" | "notebook" | "npm" | "numbers" | "option-key" | "options" | "organization" | "package" | "paintbrush" | "paperclip" | "password" | "patreon" | "pause" | "pause-o" | "pause-r" | "paypal" | "pencil" | "percent" | "phone" | "phone-o" | "pi" | "pin" | "pin-slash" | "play" | "play-backwards" | "play-forwards" | "play-o" | "play-r" | "playlist" | "playlist-add" | "playlist-check" | "playlist-remove" | "playlist-search" | "plus" | "plus-circle" | "plus-minus" | "plus-minus-slash" | "plus-o" | "plus-r" | "podcast" | "previous" | "previous-o" | "previous-r" | "product-hunt" | "project" | "pulse" | "python" | "ram" | "react" | "record-o" | "redux" | "repeat" | "repo" | "report" | "return" | "roadmap" | "rocket" | "rocket-chat" | "rust" | "safe" | "send" | "send-alt" | "server" | "serverless" | "share" | "share-mobile" | "shield" | "shield-slash" | "shift-key" | "shortcuts" | "shuffle" | "side-by-side" | "sigma" | "sign-in" | "sign-out" | "single-select" | "skype" | "slack" | "sort" | "sort-asc" | "sort-desc" | "sparkle" | "sparkle-o" | "speaker" | "spotify" | "square-payments" | "square-root" | "stack" | "stacked" | "star" | "star-o" | "stop" | "stop-o" | "stop-r" | "stop-sign" | "stopwatch" | "storybook" | "student" | "style" | "svelte" | "swift" | "sync" | "sync-alt" | "tab-key" | "tag" | "tags" | "tasklist" | "template" | "terminal" | "thumbs-down" | "thumbs-up" | "tidal" | "timelapse" | "timer" | "times" | "tools" | "tools-alt" | "touch-id" | "travis-ci" | "tree" | "trello" | "triangle" | "trophy" | "tumblr" | "twilio" | "twitch" | "twitter" | "typescript" | "unavailable-o" | "unblock-o" | "unfold" | "unlink" | "unread" | "unverified" | "upload" | "user" | "user-add" | "user-remove" | "users" | "vector" | "vercel" | "verified" | "versions" | "video" | "video-camera" | "vimeo" | "vinyl" | "volume-high" | "volume-low" | "volume-mid" | "vscode" | "vue" | "wand" | "wave" | "webcam" | "webhook" | "website" | "webstorm" | "whatsapp" | "wheelchair" | "wi-fi" | "workflow" | "workplace" | "youtube" | "zap" | "zigzag" | "zoom" | undefined;
    iconBefore?: "align-bottom" | "align-center" | "align-left" | "align-middle" | "align-right" | "align-top" | "apple-watch" | "arrange-back" | "arrange-front" | "attachment" | "backspace" | "band-aid" | "battery" | "battery-empty" | "battery-full" | "board" | "border-all" | "border-bottom" | "border-left" | "border-right" | "border-style-dashed" | "border-style-dotted" | "border-style-solid" | "border-top" | "bot" | "bowl" | "boy" | "briefcase" | "browse" | "browser" | "calculator" | "calendar-dates" | "calendar-due" | "calendar-next" | "calendar-today" | "calendar" | "calibrate" | "captions" | "card-clubs" | "card-diamonds" | "card-hearts" | "card-spades" | "carousel" | "cast" | "chart" | "clapper-board" | "clipboard" | "code" | "code-slash" | "collage" | "color-bucket" | "color-picker" | "community" | "components" | "compress-left" | "compress-right" | "compress-v" | "compress" | "controller" | "copy" | "corner-double-down-left" | "corner-double-down-right" | "corner-double-left-down" | "corner-double-left-up" | "corner-double-right-down" | "corner-double-right-up" | "corner-double-up-left" | "corner-double-up-right" | "corner-down-left" | "corner-down-right" | "corner-left-down" | "corner-left-up" | "corner-right-down" | "corner-right-up" | "corner-up-left" | "corner-up-right" | "credit-card" | "crop" | "dark-mode" | "desktop" | "details-less" | "details-more" | "dialpad" | "dice-1" | "dice-2" | "dice-3" | "dice-4" | "dice-5" | "dice-6" | "display-flex" | "display-fullwidth" | "display-grid" | "display-spacing" | "distribute-horizontal" | "distribute-vertical" | "dock-bottom" | "dock-left" | "dock-right" | "dock-window" | "drive" | "drop-invert" | "drop-opacity" | "drop" | "duplicate" | "edit-black-point" | "edit-contrast" | "edit-exposure" | "edit-fade" | "edit-flip-h" | "edit-flip-v" | "edit-highlight" | "edit-markup" | "edit-mask" | "edit-noise" | "edit-shadows" | "edit-straight" | "edit-unmask" | "enter" | "erase" | "euro" | "export" | "extension-add" | "extension-remove" | "extension" | "external" | "feed" | "file-add" | "file-document" | "file-remove" | "file" | "film" | "filters" | "folder-add" | "folder-remove" | "folder" | "font-height" | "font-spacing" | "format-center" | "format-color" | "format-heading" | "format-indent-decrease" | "format-indent-increase" | "format-italic" | "format-justify" | "format-left" | "format-line-height" | "format-right" | "format-separator" | "format-slash" | "format-text" | "format-underline" | "format-uppercase" | "games" | "gender-female" | "gender-male" | "girl" | "glass-alt" | "home-screen" | "image" | "import" | "inpicture" | "insert-after-o" | "insert-after-r" | "insert-after" | "insert-before-o" | "insert-before-r" | "insert-before" | "insights" | "internal" | "laptop" | "list-tree" | "list" | "lock-unlock" | "lock" | "log-off" | "loupe" | "magnet" | "mail-forward" | "mail-reply" | "maximize-alt" | "maximize" | "menu-boxed" | "menu-grid-o" | "menu-grid-r" | "menu-left-alt" | "menu-left" | "menu-motion" | "menu-right-alt" | "menu-right" | "menu" | "merge-horizontal" | "merge-vertical" | "mini-player" | "minimize-alt" | "minimize" | "moon" | "mouse" | "move-down" | "move-left" | "move-right" | "move-up" | "notifications" | "pacman" | "path-back" | "path-crop" | "path-divide" | "path-exclude" | "path-front" | "path-intersect" | "path-outline" | "path-trim" | "path-unite" | "performance" | "piano" | "pill" | "plug" | "pokemon" | "poll" | "printer" | "profile" | "pull-clear" | "push-chevron-down-o" | "circle" | "push-chevron-down-r" | "square" | "push-chevron-down" | "push-chevron-left-o" | "push-chevron-left-r" | "push-chevron-left" | "push-chevron-right-o" | "push-chevron-right-r" | "push-chevron-right" | "push-chevron-up-o" | "push-chevron-up-r" | "push-chevron-up" | "push-down" | "push-left" | "push-right" | "push-up" | "qr" | "quote-o" | "quote" | "radio-check" | "radio-checked" | "ratio" | "redo" | "remove-r" | "remove" | "rename" | "reorder" | "row-first" | "row-last" | "ruler" | "scan" | "screen-mirror" | "screen-wide" | "screen" | "scroll-h" | "scroll-v" | "search-found" | "search-loading" | "search" | "select-o" | "select-r" | "select" | "shopping-bag" | "shopping-cart" | "sidebar-open" | "sidebar-right" | "sidebar" | "signal" | "size" | "smartphone" | "smile-mouth-open" | "smile-neutral" | "smile-no-mouth" | "smile-none" | "smile-sad" | "smile-upside" | "smile" | "space-between-v" | "space-between" | "spinner-alt" | "spinner-two-alt" | "spinner-two" | "spinner" | "sun" | "swap-vertical" | "swap" | "tab" | "terrain" | "thermostat" | "today" | "toggle-off" | "toggle-on" | "toggle-square-off" | "toggle-square" | "toolbar-bottom" | "toolbar-left" | "toolbar-right" | "toolbar-top" | "toolbox" | "touchpad" | "track" | "transcript" | "trash-empty" | "trash" | "trending-down" | "trending" | "tv" | "ui-kit" | "umbrella" | "undo" | "usb" | "usb-c" | "view-cols" | "view-comfortable" | "view-day" | "view-grid" | "view-list" | "view-month" | "view-split" | "voicemail-o" | "voicemail-r" | "voicemail" | "work-alt" | "yinyang" | "zoom-in" | "zoom-out" | "accessibility" | "accessibility-circle" | "accessibility-o" | "airplane" | "airpods" | "alarm" | "album" | "anchor" | "angular" | "apple" | "approximately-equal" | "archive" | "arrow-bottom-left-o" | "arrow-bottom-left-r" | "arrow-bottom-left" | "arrow-bottom-right-o" | "arrow-bottom-right-r" | "arrow-bottom-right" | "arrow-down-o" | "arrow-down-r" | "arrow-down" | "arrows-exchange-alt-v" | "arrows-exchange-alt" | "arrows-exchange-v" | "arrows-exchange" | "arrows-expand-down-left" | "arrows-expand-down-right" | "arrows-expand-left" | "arrows-expand-right" | "arrows-expand-up-left" | "arrows-expand-up-right" | "arrows-h" | "arrows-h-alt" | "arrow-left-o" | "arrow-left-r" | "arrow-left" | "arrow-right-o" | "arrow-right-r" | "arrow-right" | "arrows-scroll-h" | "arrows-scroll-v" | "arrow-switch" | "arrow-switch-o" | "arrow-switch-r" | "arrow-top-left-o" | "arrow-top-left-r" | "arrow-top-left" | "arrow-top-right-o" | "arrow-top-right-r" | "arrow-top-right" | "arrow-up-o" | "arrow-up-r" | "arrow-up" | "arrows-v" | "arrows-v-alt" | "asterisk" | "asterisk-o" | "asterisk-r" | "atlassian" | "attribution" | "award" | "badge" | "bamboo" | "bell" | "bell-o" | "bell-slash" | "bitbucket" | "block-o" | "blocked" | "bluetooth" | "book" | "bookmark" | "bookmark-slash" | "bug" | "bullseye" | "bullseye-arrow" | "c-plus-plus" | "cache" | "camera" | "camera-alt" | "categories" | "check" | "check-circle" | "check-o" | "check-r" | "checklist" | "chevron-double-down-o" | "chevron-double-down-r" | "chevron-double-left-o" | "chevron-double-left-r" | "chevron-double-right-o" | "chevron-double-right-r" | "chevron-double-up-o" | "chevron-double-up-r" | "chevron-down-o" | "chevron-down-r" | "chevron-down" | "chevron-left-o" | "chevron-left-r" | "chevron-left" | "chevron-right-o" | "chevron-right-r" | "chevron-right" | "chevron-up-o" | "chevron-up-r" | "chevron-up" | "chevron-double-down" | "chevron-double-left" | "chevron-double-right" | "chevron-double-up" | "chip" | "circle-ci" | "circle-half" | "clock" | "close" | "close-circle" | "close-o" | "close-r" | "cloud" | "cloud-slash" | "code-climate" | "code-review" | "codepen" | "codesandbox" | "codescan" | "coffee" | "cog" | "command-key" | "command-palette" | "comment" | "comment-external" | "container" | "control-key" | "copyright" | "cross" | "crown" | "danger-circle" | "danger-o" | "database" | "diamond" | "digital-ocean" | "disc" | "discord" | "discussion" | "discussion-closed" | "discussion-duplicated" | "discussion-outdated" | "divide" | "download" | "draft" | "dribble" | "dropbox" | "eject" | "ellipsis" | "equal" | "expand" | "eye" | "eye-slash" | "facebook" | "figma" | "filter" | "flag" | "flame" | "flash" | "flash-circle" | "flash-o" | "focus" | "fold" | "fold-down" | "fold-up" | "format-bold" | "format-strikethrough" | "framer" | "ghost" | "gift" | "git" | "git-branch" | "git-commit" | "git-compare" | "git-fork" | "git-merge" | "git-pull-request" | "github" | "github-actions" | "github-copilot" | "gitlab" | "gitter" | "glass" | "glasses" | "globe" | "google" | "google-calendar" | "google-drive" | "google-meet" | "grabber" | "graph" | "greater-than" | "greater-than-or-equal" | "hash" | "headphone" | "heart" | "heart-o" | "help" | "hexagon" | "history" | "home" | "hourglass" | "inbox" | "infinity" | "info-circle" | "info-o" | "instagram" | "invision" | "iterations" | "javascript" | "jenkins" | "jest" | "jsfiddle" | "key" | "key-alt" | "keyboard" | "keyhole-circle" | "keyhole-o" | "kotlin" | "law" | "layout-grid" | "layout-grid-small" | "layout-list" | "layout-pin" | "leaf" | "less-than" | "less-than-or-equal" | "lightbulb" | "link" | "linkedin" | "live" | "live-photo" | "loadbar" | "loadbar-alt" | "loadbar-doc" | "loadbar-sound" | "location" | "log" | "loom" | "mail" | "mail-read" | "markdown" | "megaphone" | "mention" | "menu-close" | "menu-open" | "menu-round-circle" | "menu-round-o" | "message" | "message-circle" | "message-o" | "messenger" | "meta" | "meter" | "mic" | "mic-slash" | "microsoft" | "microsoft-teams" | "microsoft-windows" | "milestone" | "minus" | "minus-circle" | "minus-o" | "minus-r" | "money-sign" | "more" | "more-circle" | "more-o" | "more-r" | "more-vertical" | "more-vertical-circle" | "more-vertical-o" | "more-vertical-r" | "multi-select" | "music-note" | "music-note-alt" | "next" | "next-o" | "next-r" | "next.js" | "node.js" | "not-equal" | "note" | "notebook" | "npm" | "numbers" | "option-key" | "options" | "organization" | "package" | "paintbrush" | "paperclip" | "password" | "patreon" | "pause" | "pause-o" | "pause-r" | "paypal" | "pencil" | "percent" | "phone" | "phone-o" | "pi" | "pin" | "pin-slash" | "play" | "play-backwards" | "play-forwards" | "play-o" | "play-r" | "playlist" | "playlist-add" | "playlist-check" | "playlist-remove" | "playlist-search" | "plus" | "plus-circle" | "plus-minus" | "plus-minus-slash" | "plus-o" | "plus-r" | "podcast" | "previous" | "previous-o" | "previous-r" | "product-hunt" | "project" | "pulse" | "python" | "ram" | "react" | "record-o" | "redux" | "repeat" | "repo" | "report" | "return" | "roadmap" | "rocket" | "rocket-chat" | "rust" | "safe" | "send" | "send-alt" | "server" | "serverless" | "share" | "share-mobile" | "shield" | "shield-slash" | "shift-key" | "shortcuts" | "shuffle" | "side-by-side" | "sigma" | "sign-in" | "sign-out" | "single-select" | "skype" | "slack" | "sort" | "sort-asc" | "sort-desc" | "sparkle" | "sparkle-o" | "speaker" | "spotify" | "square-payments" | "square-root" | "stack" | "stacked" | "star" | "star-o" | "stop" | "stop-o" | "stop-r" | "stop-sign" | "stopwatch" | "storybook" | "student" | "style" | "svelte" | "swift" | "sync" | "sync-alt" | "tab-key" | "tag" | "tags" | "tasklist" | "template" | "terminal" | "thumbs-down" | "thumbs-up" | "tidal" | "timelapse" | "timer" | "times" | "tools" | "tools-alt" | "touch-id" | "travis-ci" | "tree" | "trello" | "triangle" | "trophy" | "tumblr" | "twilio" | "twitch" | "twitter" | "typescript" | "unavailable-o" | "unblock-o" | "unfold" | "unlink" | "unread" | "unverified" | "upload" | "user" | "user-add" | "user-remove" | "users" | "vector" | "vercel" | "verified" | "versions" | "video" | "video-camera" | "vimeo" | "vinyl" | "volume-high" | "volume-low" | "volume-mid" | "vscode" | "vue" | "wand" | "wave" | "webcam" | "webhook" | "website" | "webstorm" | "whatsapp" | "wheelchair" | "wi-fi" | "workflow" | "workplace" | "youtube" | "zap" | "zigzag" | "zoom" | undefined;
    name?: string | undefined;
    as?: react.ElementType | undefined;
    theme?: Theme | undefined;
    children: react.ReactNode;
    color?: VariantWithTones | undefined;
    display?: csstype.Property.Display | undefined;
    margin?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    mb?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    ml?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mr?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mt?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mx?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    my?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    padding?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    pb?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    pl?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    pr?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    pt?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    px?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    py?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    bold?: boolean | undefined;
    italic?: boolean | undefined;
    letterSpacing?: csstype.Property.LetterSpacing<0 | (string & {})> | undefined;
    lineHeight?: csstype.Property.LineHeight<0 | (string & {})> | undefined;
    textDecoration?: csstype.Property.TextDecoration<0 | (string & {})> | undefined;
    textTransform?: csstype.Property.TextTransform | undefined;
    wordSpacing?: csstype.Property.WordSpacing<0 | (string & {})> | undefined;
    size?: "sm" | "md" | "lg" | "xs" | undefined;
    list?: string | undefined;
    download?: any;
    key?: react.Key | null | undefined;
    style?: react.CSSProperties | undefined;
    hidden?: boolean | undefined;
    start?: number | undefined;
    height?: string | number | undefined;
    width?: string | number | undefined;
    wrap?: string | undefined;
    content?: string | undefined;
    readOnly?: boolean | undefined;
    low?: number | undefined;
    high?: number | undefined;
    cite?: string | undefined;
    data?: string | undefined;
    form?: string | undefined;
    label?: string | undefined;
    slot?: string | undefined;
    span?: number | undefined;
    summary?: string | undefined;
    title?: string | undefined;
    pattern?: string | undefined;
    prefix?: string | undefined;
    type?: string | undefined;
    disabled?: boolean | undefined;
    value?: string | number | readonly string[] | undefined;
    accept?: string | undefined;
    acceptCharset?: string | undefined;
    action?: string | undefined;
    allowFullScreen?: boolean | undefined;
    allowTransparency?: boolean | undefined;
    alt?: string | undefined;
    async?: boolean | undefined;
    autoComplete?: string | undefined;
    autoPlay?: boolean | undefined;
    capture?: boolean | "user" | "environment" | undefined;
    cellPadding?: string | number | undefined;
    cellSpacing?: string | number | undefined;
    charSet?: string | undefined;
    challenge?: string | undefined;
    checked?: boolean | undefined;
    classID?: string | undefined;
    cols?: number | undefined;
    colSpan?: number | undefined;
    controls?: boolean | undefined;
    coords?: string | undefined;
    crossOrigin?: "" | "anonymous" | "use-credentials" | undefined;
    dateTime?: string | undefined;
    default?: boolean | undefined;
    defer?: boolean | undefined;
    encType?: string | undefined;
    formAction?: string | undefined;
    formEncType?: string | undefined;
    formMethod?: string | undefined;
    formNoValidate?: boolean | undefined;
    formTarget?: string | undefined;
    frameBorder?: string | number | undefined;
    headers?: string | undefined;
    hrefLang?: string | undefined;
    htmlFor?: string | undefined;
    httpEquiv?: string | undefined;
    integrity?: string | undefined;
    keyParams?: string | undefined;
    keyType?: string | undefined;
    kind?: string | undefined;
    loop?: boolean | undefined;
    manifest?: string | undefined;
    marginHeight?: number | undefined;
    marginWidth?: number | undefined;
    max?: string | number | undefined;
    maxLength?: number | undefined;
    media?: string | undefined;
    mediaGroup?: string | undefined;
    method?: string | undefined;
    min?: string | number | undefined;
    minLength?: number | undefined;
    multiple?: boolean | undefined;
    muted?: boolean | undefined;
    noValidate?: boolean | undefined;
    open?: boolean | undefined;
    optimum?: number | undefined;
    placeholder?: string | undefined;
    playsInline?: boolean | undefined;
    poster?: string | undefined;
    preload?: string | undefined;
    required?: boolean | undefined;
    reversed?: boolean | undefined;
    rows?: number | undefined;
    rowSpan?: number | undefined;
    sandbox?: string | undefined;
    scope?: string | undefined;
    scoped?: boolean | undefined;
    scrolling?: string | undefined;
    seamless?: boolean | undefined;
    selected?: boolean | undefined;
    shape?: string | undefined;
    sizes?: string | undefined;
    src?: string | undefined;
    srcDoc?: string | undefined;
    srcLang?: string | undefined;
    srcSet?: string | undefined;
    step?: string | number | undefined;
    target?: string | undefined;
    useMap?: string | undefined;
    wmode?: string | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    autoFocus?: boolean | undefined;
    className?: string | undefined;
    contentEditable?: "inherit" | (boolean | "false" | "true") | "plaintext-only" | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "false" | "true") | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    nonce?: string | undefined;
    spellCheck?: (boolean | "false" | "true") | undefined;
    tabIndex?: number | undefined;
    translate?: "yes" | "no" | undefined;
    radioGroup?: string | undefined;
    role?: react.AriaRole | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    property?: string | undefined;
    rel?: string | undefined;
    resource?: string | undefined;
    rev?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "search" | "email" | "tel" | "text" | "none" | "url" | "numeric" | "decimal" | undefined;
    is?: string | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: (boolean | "false" | "true") | undefined;
    "aria-autocomplete"?: "list" | "none" | "inline" | "both" | undefined;
    "aria-braillelabel"?: string | undefined;
    "aria-brailleroledescription"?: string | undefined;
    "aria-busy"?: (boolean | "false" | "true") | undefined;
    "aria-checked"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colindextext"?: string | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "date" | "time" | "location" | "step" | "page" | "false" | "true" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-description"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: (boolean | "false" | "true") | undefined;
    "aria-dropeffect"?: "copy" | "link" | "none" | "move" | "execute" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: (boolean | "false" | "true") | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: (boolean | "false" | "true") | undefined;
    "aria-haspopup"?: boolean | "menu" | "tree" | "grid" | "dialog" | "listbox" | "false" | "true" | undefined;
    "aria-hidden"?: (boolean | "false" | "true") | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: (boolean | "false" | "true") | undefined;
    "aria-multiline"?: (boolean | "false" | "true") | undefined;
    "aria-multiselectable"?: (boolean | "false" | "true") | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-readonly"?: (boolean | "false" | "true") | undefined;
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    "aria-required"?: (boolean | "false" | "true") | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowindextext"?: string | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: (boolean | "false" | "true") | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    } | undefined;
    onCopy?: react.ClipboardEventHandler<HTMLAnchorElement> | undefined;
    onCopyCapture?: react.ClipboardEventHandler<HTMLAnchorElement> | undefined;
    onCut?: react.ClipboardEventHandler<HTMLAnchorElement> | undefined;
    onCutCapture?: react.ClipboardEventHandler<HTMLAnchorElement> | undefined;
    onPaste?: react.ClipboardEventHandler<HTMLAnchorElement> | undefined;
    onPasteCapture?: react.ClipboardEventHandler<HTMLAnchorElement> | undefined;
    onCompositionEnd?: react.CompositionEventHandler<HTMLAnchorElement> | undefined;
    onCompositionEndCapture?: react.CompositionEventHandler<HTMLAnchorElement> | undefined;
    onCompositionStart?: react.CompositionEventHandler<HTMLAnchorElement> | undefined;
    onCompositionStartCapture?: react.CompositionEventHandler<HTMLAnchorElement> | undefined;
    onCompositionUpdate?: react.CompositionEventHandler<HTMLAnchorElement> | undefined;
    onCompositionUpdateCapture?: react.CompositionEventHandler<HTMLAnchorElement> | undefined;
    onFocus?: react.FocusEventHandler<HTMLAnchorElement> | undefined;
    onFocusCapture?: react.FocusEventHandler<HTMLAnchorElement> | undefined;
    onBlur?: react.FocusEventHandler<HTMLAnchorElement> | undefined;
    onBlurCapture?: react.FocusEventHandler<HTMLAnchorElement> | undefined;
    onChange?: react.FormEventHandler<HTMLAnchorElement> | undefined;
    onChangeCapture?: react.FormEventHandler<HTMLAnchorElement> | undefined;
    onBeforeInput?: react.FormEventHandler<HTMLAnchorElement> | undefined;
    onBeforeInputCapture?: react.FormEventHandler<HTMLAnchorElement> | undefined;
    onInput?: react.FormEventHandler<HTMLAnchorElement> | undefined;
    onInputCapture?: react.FormEventHandler<HTMLAnchorElement> | undefined;
    onReset?: react.FormEventHandler<HTMLAnchorElement> | undefined;
    onResetCapture?: react.FormEventHandler<HTMLAnchorElement> | undefined;
    onSubmit?: react.FormEventHandler<HTMLAnchorElement> | undefined;
    onSubmitCapture?: react.FormEventHandler<HTMLAnchorElement> | undefined;
    onInvalid?: react.FormEventHandler<HTMLAnchorElement> | undefined;
    onInvalidCapture?: react.FormEventHandler<HTMLAnchorElement> | undefined;
    onLoad?: react.ReactEventHandler<HTMLAnchorElement> | undefined;
    onLoadCapture?: react.ReactEventHandler<HTMLAnchorElement> | undefined;
    onError?: react.ReactEventHandler<HTMLAnchorElement> | undefined;
    onErrorCapture?: react.ReactEventHandler<HTMLAnchorElement> | undefined;
    onKeyDown?: react.KeyboardEventHandler<HTMLAnchorElement> | undefined;
    onKeyDownCapture?: react.KeyboardEventHandler<HTMLAnchorElement> | undefined;
    onKeyPress?: react.KeyboardEventHandler<HTMLAnchorElement> | undefined;
    onKeyPressCapture?: react.KeyboardEventHandler<HTMLAnchorElement> | undefined;
    onKeyUp?: react.KeyboardEventHandler<HTMLAnchorElement> | undefined;
    onKeyUpCapture?: react.KeyboardEventHandler<HTMLAnchorElement> | undefined;
    onAbort?: react.ReactEventHandler<HTMLAnchorElement> | undefined;
    onAbortCapture?: react.ReactEventHandler<HTMLAnchorElement> | undefined;
    onCanPlay?: react.ReactEventHandler<HTMLAnchorElement> | undefined;
    onCanPlayCapture?: react.ReactEventHandler<HTMLAnchorElement> | undefined;
    onCanPlayThrough?: react.ReactEventHandler<HTMLAnchorElement> | undefined;
    onCanPlayThroughCapture?: react.ReactEventHandler<HTMLAnchorElement> | undefined;
    onDurationChange?: react.ReactEventHandler<HTMLAnchorElement> | undefined;
    onDurationChangeCapture?: react.ReactEventHandler<HTMLAnchorElement> | undefined;
    onEmptied?: react.ReactEventHandler<HTMLAnchorElement> | undefined;
    onEmptiedCapture?: react.ReactEventHandler<HTMLAnchorElement> | undefined;
    onEncrypted?: react.ReactEventHandler<HTMLAnchorElement> | undefined;
    onEncryptedCapture?: react.ReactEventHandler<HTMLAnchorElement> | undefined;
    onEnded?: react.ReactEventHandler<HTMLAnchorElement> | undefined;
    onEndedCapture?: react.ReactEventHandler<HTMLAnchorElement> | undefined;
    onLoadedData?: react.ReactEventHandler<HTMLAnchorElement> | undefined;
    onLoadedDataCapture?: react.ReactEventHandler<HTMLAnchorElement> | undefined;
    onLoadedMetadata?: react.ReactEventHandler<HTMLAnchorElement> | undefined;
    onLoadedMetadataCapture?: react.ReactEventHandler<HTMLAnchorElement> | undefined;
    onLoadStart?: react.ReactEventHandler<HTMLAnchorElement> | undefined;
    onLoadStartCapture?: react.ReactEventHandler<HTMLAnchorElement> | undefined;
    onPause?: react.ReactEventHandler<HTMLAnchorElement> | undefined;
    onPauseCapture?: react.ReactEventHandler<HTMLAnchorElement> | undefined;
    onPlay?: react.ReactEventHandler<HTMLAnchorElement> | undefined;
    onPlayCapture?: react.ReactEventHandler<HTMLAnchorElement> | undefined;
    onPlaying?: react.ReactEventHandler<HTMLAnchorElement> | undefined;
    onPlayingCapture?: react.ReactEventHandler<HTMLAnchorElement> | undefined;
    onProgress?: react.ReactEventHandler<HTMLAnchorElement> | undefined;
    onProgressCapture?: react.ReactEventHandler<HTMLAnchorElement> | undefined;
    onRateChange?: react.ReactEventHandler<HTMLAnchorElement> | undefined;
    onRateChangeCapture?: react.ReactEventHandler<HTMLAnchorElement> | undefined;
    onResize?: react.ReactEventHandler<HTMLAnchorElement> | undefined;
    onResizeCapture?: react.ReactEventHandler<HTMLAnchorElement> | undefined;
    onSeeked?: react.ReactEventHandler<HTMLAnchorElement> | undefined;
    onSeekedCapture?: react.ReactEventHandler<HTMLAnchorElement> | undefined;
    onSeeking?: react.ReactEventHandler<HTMLAnchorElement> | undefined;
    onSeekingCapture?: react.ReactEventHandler<HTMLAnchorElement> | undefined;
    onStalled?: react.ReactEventHandler<HTMLAnchorElement> | undefined;
    onStalledCapture?: react.ReactEventHandler<HTMLAnchorElement> | undefined;
    onSuspend?: react.ReactEventHandler<HTMLAnchorElement> | undefined;
    onSuspendCapture?: react.ReactEventHandler<HTMLAnchorElement> | undefined;
    onTimeUpdate?: react.ReactEventHandler<HTMLAnchorElement> | undefined;
    onTimeUpdateCapture?: react.ReactEventHandler<HTMLAnchorElement> | undefined;
    onVolumeChange?: react.ReactEventHandler<HTMLAnchorElement> | undefined;
    onVolumeChangeCapture?: react.ReactEventHandler<HTMLAnchorElement> | undefined;
    onWaiting?: react.ReactEventHandler<HTMLAnchorElement> | undefined;
    onWaitingCapture?: react.ReactEventHandler<HTMLAnchorElement> | undefined;
    onAuxClick?: react.MouseEventHandler<HTMLAnchorElement> | undefined;
    onAuxClickCapture?: react.MouseEventHandler<HTMLAnchorElement> | undefined;
    onClick?: react.MouseEventHandler<HTMLAnchorElement> | undefined;
    onClickCapture?: react.MouseEventHandler<HTMLAnchorElement> | undefined;
    onContextMenu?: react.MouseEventHandler<HTMLAnchorElement> | undefined;
    onContextMenuCapture?: react.MouseEventHandler<HTMLAnchorElement> | undefined;
    onDoubleClick?: react.MouseEventHandler<HTMLAnchorElement> | undefined;
    onDoubleClickCapture?: react.MouseEventHandler<HTMLAnchorElement> | undefined;
    onDrag?: react.DragEventHandler<HTMLAnchorElement> | undefined;
    onDragCapture?: react.DragEventHandler<HTMLAnchorElement> | undefined;
    onDragEnd?: react.DragEventHandler<HTMLAnchorElement> | undefined;
    onDragEndCapture?: react.DragEventHandler<HTMLAnchorElement> | undefined;
    onDragEnter?: react.DragEventHandler<HTMLAnchorElement> | undefined;
    onDragEnterCapture?: react.DragEventHandler<HTMLAnchorElement> | undefined;
    onDragExit?: react.DragEventHandler<HTMLAnchorElement> | undefined;
    onDragExitCapture?: react.DragEventHandler<HTMLAnchorElement> | undefined;
    onDragLeave?: react.DragEventHandler<HTMLAnchorElement> | undefined;
    onDragLeaveCapture?: react.DragEventHandler<HTMLAnchorElement> | undefined;
    onDragOver?: react.DragEventHandler<HTMLAnchorElement> | undefined;
    onDragOverCapture?: react.DragEventHandler<HTMLAnchorElement> | undefined;
    onDragStart?: react.DragEventHandler<HTMLAnchorElement> | undefined;
    onDragStartCapture?: react.DragEventHandler<HTMLAnchorElement> | undefined;
    onDrop?: react.DragEventHandler<HTMLAnchorElement> | undefined;
    onDropCapture?: react.DragEventHandler<HTMLAnchorElement> | undefined;
    onMouseDown?: react.MouseEventHandler<HTMLAnchorElement> | undefined;
    onMouseDownCapture?: react.MouseEventHandler<HTMLAnchorElement> | undefined;
    onMouseEnter?: react.MouseEventHandler<HTMLAnchorElement> | undefined;
    onMouseLeave?: react.MouseEventHandler<HTMLAnchorElement> | undefined;
    onMouseMove?: react.MouseEventHandler<HTMLAnchorElement> | undefined;
    onMouseMoveCapture?: react.MouseEventHandler<HTMLAnchorElement> | undefined;
    onMouseOut?: react.MouseEventHandler<HTMLAnchorElement> | undefined;
    onMouseOutCapture?: react.MouseEventHandler<HTMLAnchorElement> | undefined;
    onMouseOver?: react.MouseEventHandler<HTMLAnchorElement> | undefined;
    onMouseOverCapture?: react.MouseEventHandler<HTMLAnchorElement> | undefined;
    onMouseUp?: react.MouseEventHandler<HTMLAnchorElement> | undefined;
    onMouseUpCapture?: react.MouseEventHandler<HTMLAnchorElement> | undefined;
    onSelect?: react.ReactEventHandler<HTMLAnchorElement> | undefined;
    onSelectCapture?: react.ReactEventHandler<HTMLAnchorElement> | undefined;
    onTouchCancel?: react.TouchEventHandler<HTMLAnchorElement> | undefined;
    onTouchCancelCapture?: react.TouchEventHandler<HTMLAnchorElement> | undefined;
    onTouchEnd?: react.TouchEventHandler<HTMLAnchorElement> | undefined;
    onTouchEndCapture?: react.TouchEventHandler<HTMLAnchorElement> | undefined;
    onTouchMove?: react.TouchEventHandler<HTMLAnchorElement> | undefined;
    onTouchMoveCapture?: react.TouchEventHandler<HTMLAnchorElement> | undefined;
    onTouchStart?: react.TouchEventHandler<HTMLAnchorElement> | undefined;
    onTouchStartCapture?: react.TouchEventHandler<HTMLAnchorElement> | undefined;
    onPointerDown?: react.PointerEventHandler<HTMLAnchorElement> | undefined;
    onPointerDownCapture?: react.PointerEventHandler<HTMLAnchorElement> | undefined;
    onPointerMove?: react.PointerEventHandler<HTMLAnchorElement> | undefined;
    onPointerMoveCapture?: react.PointerEventHandler<HTMLAnchorElement> | undefined;
    onPointerUp?: react.PointerEventHandler<HTMLAnchorElement> | undefined;
    onPointerUpCapture?: react.PointerEventHandler<HTMLAnchorElement> | undefined;
    onPointerCancel?: react.PointerEventHandler<HTMLAnchorElement> | undefined;
    onPointerCancelCapture?: react.PointerEventHandler<HTMLAnchorElement> | undefined;
    onPointerEnter?: react.PointerEventHandler<HTMLAnchorElement> | undefined;
    onPointerLeave?: react.PointerEventHandler<HTMLAnchorElement> | undefined;
    onPointerOver?: react.PointerEventHandler<HTMLAnchorElement> | undefined;
    onPointerOverCapture?: react.PointerEventHandler<HTMLAnchorElement> | undefined;
    onPointerOut?: react.PointerEventHandler<HTMLAnchorElement> | undefined;
    onPointerOutCapture?: react.PointerEventHandler<HTMLAnchorElement> | undefined;
    onGotPointerCapture?: react.PointerEventHandler<HTMLAnchorElement> | undefined;
    onGotPointerCaptureCapture?: react.PointerEventHandler<HTMLAnchorElement> | undefined;
    onLostPointerCapture?: react.PointerEventHandler<HTMLAnchorElement> | undefined;
    onLostPointerCaptureCapture?: react.PointerEventHandler<HTMLAnchorElement> | undefined;
    onScroll?: react.UIEventHandler<HTMLAnchorElement> | undefined;
    onScrollCapture?: react.UIEventHandler<HTMLAnchorElement> | undefined;
    onWheel?: react.WheelEventHandler<HTMLAnchorElement> | undefined;
    onWheelCapture?: react.WheelEventHandler<HTMLAnchorElement> | undefined;
    onAnimationStart?: react.AnimationEventHandler<HTMLAnchorElement> | undefined;
    onAnimationStartCapture?: react.AnimationEventHandler<HTMLAnchorElement> | undefined;
    onAnimationEnd?: react.AnimationEventHandler<HTMLAnchorElement> | undefined;
    onAnimationEndCapture?: react.AnimationEventHandler<HTMLAnchorElement> | undefined;
    onAnimationIteration?: react.AnimationEventHandler<HTMLAnchorElement> | undefined;
    onAnimationIterationCapture?: react.AnimationEventHandler<HTMLAnchorElement> | undefined;
    onTransitionEnd?: react.TransitionEventHandler<HTMLAnchorElement> | undefined;
    onTransitionEndCapture?: react.TransitionEventHandler<HTMLAnchorElement> | undefined;
} & react.RefAttributes<HTMLAnchorElement>>;

interface AspectRatioKnownProps extends StyledProps, WithChildren, WithMargin {
    maxWidth?: number;
    ratio: number;
}
type AspectRatioProps = Simplify<OmitElementProps<HTMLDivElement, AspectRatioKnownProps>>;
declare const AspectRatio: react.ForwardRefExoticComponent<{
    maxWidth?: number | undefined;
    ratio: number;
    as?: react.ElementType | undefined;
    theme?: Theme | undefined;
    children: react.ReactNode;
    margin?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    mb?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    ml?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mr?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mt?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mx?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    my?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    list?: string | undefined;
    download?: any;
    key?: react.Key | null | undefined;
    style?: react.CSSProperties | undefined;
    name?: string | undefined;
    color?: string | undefined;
    hidden?: boolean | undefined;
    start?: number | undefined;
    height?: string | number | undefined;
    width?: string | number | undefined;
    wrap?: string | undefined;
    content?: string | undefined;
    readOnly?: boolean | undefined;
    low?: number | undefined;
    high?: number | undefined;
    cite?: string | undefined;
    data?: string | undefined;
    form?: string | undefined;
    label?: string | undefined;
    slot?: string | undefined;
    span?: number | undefined;
    summary?: string | undefined;
    title?: string | undefined;
    pattern?: string | undefined;
    prefix?: string | undefined;
    type?: string | undefined;
    disabled?: boolean | undefined;
    value?: string | number | readonly string[] | undefined;
    accept?: string | undefined;
    acceptCharset?: string | undefined;
    action?: string | undefined;
    allowFullScreen?: boolean | undefined;
    allowTransparency?: boolean | undefined;
    alt?: string | undefined;
    async?: boolean | undefined;
    autoComplete?: string | undefined;
    autoPlay?: boolean | undefined;
    capture?: boolean | "user" | "environment" | undefined;
    cellPadding?: string | number | undefined;
    cellSpacing?: string | number | undefined;
    charSet?: string | undefined;
    challenge?: string | undefined;
    checked?: boolean | undefined;
    classID?: string | undefined;
    cols?: number | undefined;
    colSpan?: number | undefined;
    controls?: boolean | undefined;
    coords?: string | undefined;
    crossOrigin?: "" | "anonymous" | "use-credentials" | undefined;
    dateTime?: string | undefined;
    default?: boolean | undefined;
    defer?: boolean | undefined;
    encType?: string | undefined;
    formAction?: string | undefined;
    formEncType?: string | undefined;
    formMethod?: string | undefined;
    formNoValidate?: boolean | undefined;
    formTarget?: string | undefined;
    frameBorder?: string | number | undefined;
    headers?: string | undefined;
    href?: string | undefined;
    hrefLang?: string | undefined;
    htmlFor?: string | undefined;
    httpEquiv?: string | undefined;
    integrity?: string | undefined;
    keyParams?: string | undefined;
    keyType?: string | undefined;
    kind?: string | undefined;
    loop?: boolean | undefined;
    manifest?: string | undefined;
    marginHeight?: number | undefined;
    marginWidth?: number | undefined;
    max?: string | number | undefined;
    maxLength?: number | undefined;
    media?: string | undefined;
    mediaGroup?: string | undefined;
    method?: string | undefined;
    min?: string | number | undefined;
    minLength?: number | undefined;
    multiple?: boolean | undefined;
    muted?: boolean | undefined;
    noValidate?: boolean | undefined;
    open?: boolean | undefined;
    optimum?: number | undefined;
    placeholder?: string | undefined;
    playsInline?: boolean | undefined;
    poster?: string | undefined;
    preload?: string | undefined;
    required?: boolean | undefined;
    reversed?: boolean | undefined;
    rows?: number | undefined;
    rowSpan?: number | undefined;
    sandbox?: string | undefined;
    scope?: string | undefined;
    scoped?: boolean | undefined;
    scrolling?: string | undefined;
    seamless?: boolean | undefined;
    selected?: boolean | undefined;
    shape?: string | undefined;
    sizes?: string | undefined;
    src?: string | undefined;
    srcDoc?: string | undefined;
    srcLang?: string | undefined;
    srcSet?: string | undefined;
    step?: string | number | undefined;
    target?: string | undefined;
    useMap?: string | undefined;
    wmode?: string | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    autoFocus?: boolean | undefined;
    className?: string | undefined;
    contentEditable?: "inherit" | (boolean | "false" | "true") | "plaintext-only" | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "false" | "true") | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    nonce?: string | undefined;
    spellCheck?: (boolean | "false" | "true") | undefined;
    tabIndex?: number | undefined;
    translate?: "yes" | "no" | undefined;
    radioGroup?: string | undefined;
    role?: react.AriaRole | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    property?: string | undefined;
    rel?: string | undefined;
    resource?: string | undefined;
    rev?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "search" | "email" | "tel" | "text" | "none" | "url" | "numeric" | "decimal" | undefined;
    is?: string | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: (boolean | "false" | "true") | undefined;
    "aria-autocomplete"?: "list" | "none" | "inline" | "both" | undefined;
    "aria-braillelabel"?: string | undefined;
    "aria-brailleroledescription"?: string | undefined;
    "aria-busy"?: (boolean | "false" | "true") | undefined;
    "aria-checked"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colindextext"?: string | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "date" | "time" | "location" | "step" | "page" | "false" | "true" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-description"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: (boolean | "false" | "true") | undefined;
    "aria-dropeffect"?: "copy" | "link" | "none" | "move" | "execute" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: (boolean | "false" | "true") | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: (boolean | "false" | "true") | undefined;
    "aria-haspopup"?: boolean | "menu" | "tree" | "grid" | "dialog" | "listbox" | "false" | "true" | undefined;
    "aria-hidden"?: (boolean | "false" | "true") | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: (boolean | "false" | "true") | undefined;
    "aria-multiline"?: (boolean | "false" | "true") | undefined;
    "aria-multiselectable"?: (boolean | "false" | "true") | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-readonly"?: (boolean | "false" | "true") | undefined;
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    "aria-required"?: (boolean | "false" | "true") | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowindextext"?: string | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: (boolean | "false" | "true") | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    } | undefined;
    onCopy?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCopyCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCut?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCutCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onPaste?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onPasteCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCompositionEnd?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionEndCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionStart?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionStartCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionUpdate?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionUpdateCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onFocus?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onFocusCapture?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onBlur?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onBlurCapture?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onChange?: react.FormEventHandler<HTMLDivElement> | undefined;
    onChangeCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onBeforeInput?: react.FormEventHandler<HTMLDivElement> | undefined;
    onBeforeInputCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInput?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInputCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onReset?: react.FormEventHandler<HTMLDivElement> | undefined;
    onResetCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onSubmit?: react.FormEventHandler<HTMLDivElement> | undefined;
    onSubmitCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInvalid?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInvalidCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onLoad?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onError?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onErrorCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onKeyDown?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyDownCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyPress?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyPressCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyUp?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyUpCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onAbort?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onAbortCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlay?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayThrough?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayThroughCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onDurationChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onDurationChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEmptied?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEmptiedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEncrypted?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEncryptedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEnded?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEndedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedData?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedDataCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedMetadata?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedMetadataCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadStart?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadStartCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPause?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPauseCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlay?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlayCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlaying?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlayingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onProgress?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onProgressCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onRateChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onRateChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onResize?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onResizeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeeked?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeekedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeeking?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeekingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onStalled?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onStalledCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSuspend?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSuspendCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onTimeUpdate?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onTimeUpdateCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onVolumeChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onVolumeChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onWaiting?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onWaitingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onAuxClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onAuxClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onContextMenu?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onContextMenuCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onDoubleClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onDoubleClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onDrag?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnd?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEndCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnter?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnterCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragExit?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragExitCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragLeave?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragLeaveCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragOver?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragOverCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragStart?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragStartCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDrop?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDropCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onMouseDown?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseDownCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseEnter?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseLeave?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseMove?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseMoveCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOut?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOutCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOver?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOverCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseUp?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseUpCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onSelect?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSelectCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onTouchCancel?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchCancelCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchEnd?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchEndCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchMove?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchMoveCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchStart?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchStartCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onPointerDown?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerDownCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerMove?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerMoveCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerUp?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerUpCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerCancel?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerCancelCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerEnter?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerLeave?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOver?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOverCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOut?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOutCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onGotPointerCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onGotPointerCaptureCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onLostPointerCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onLostPointerCaptureCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onScroll?: react.UIEventHandler<HTMLDivElement> | undefined;
    onScrollCapture?: react.UIEventHandler<HTMLDivElement> | undefined;
    onWheel?: react.WheelEventHandler<HTMLDivElement> | undefined;
    onWheelCapture?: react.WheelEventHandler<HTMLDivElement> | undefined;
    onAnimationStart?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationStartCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationEnd?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationEndCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationIteration?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationIterationCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onTransitionEnd?: react.TransitionEventHandler<HTMLDivElement> | undefined;
    onTransitionEndCapture?: react.TransitionEventHandler<HTMLDivElement> | undefined;
} & react.RefAttributes<HTMLDivElement>>;

interface AvatarKnownProps extends StyledProps, WithBorder, WithColorsDefaultBg, WithFlexItem {
    image?: string;
    name: string;
    /** @default md */
    size?: AvatarSize;
    style?: CSSProperties;
}
type AvatarProps = Simplify<AvatarKnownProps>;
declare const Avatar: react.ForwardRefExoticComponent<{
    image?: string | undefined;
    name: string;
    size?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | undefined;
    style?: CSSProperties | undefined;
    as?: react.ElementType | undefined;
    theme?: Theme | undefined;
    border?: boolean | BorderItemSide | BorderItem | BorderItem[] | undefined;
    bg?: VariantWithTones | undefined;
    color?: VariantWithTones | undefined;
    alignSelf?: csstype.Property.AlignSelf | undefined;
    basis?: csstype.Property.FlexBasis<0 | (string & {})> | undefined;
    fill?: boolean | Direction | undefined;
    flex?: boolean | {
        grow?: number | undefined;
        shrink?: number | undefined;
    } | "grow" | "shrink" | undefined;
    justifySelf?: csstype.Property.JustifySelf | undefined;
    order?: csstype.Property.Order | undefined;
} & react.RefAttributes<HTMLDivElement>>;

interface BoxKnownProps extends StyledProps, WithBorder, WithChildrenOptional, WithColors, WithFlexBox, WithFlexItem, WithLayout, WithMargin, WithPadding, WithPositioning, WithRadius, WithShadow {
    /**
     * Set the display to flex.
     * @default false
     */
    flexBox?: boolean;
}
type BoxProps<T = HTMLDivElement> = Simplify<OmitElementProps<T, BoxKnownProps>>;
/**
 * A container that lays out its contents using "block" (default) or "flex" (with the display prop).
 */
declare const Box: react.ForwardRefExoticComponent<{
    flexBox?: boolean | undefined;
    as?: react.ElementType | undefined;
    theme?: Theme | undefined;
    border?: boolean | BorderItemSide | BorderItem | BorderItem[] | undefined;
    children?: react.ReactNode;
    bg?: VariantWithTones | undefined;
    color?: VariantWithTones | undefined;
    align?: csstype.Property.AlignItems | undefined;
    alignContent?: csstype.Property.AlignContent | undefined;
    direction?: csstype.Property.FlexDirection | undefined;
    gap?: _gilbarbara_types.StringOrNumber | undefined;
    justify?: csstype.Property.JustifyContent | undefined;
    justifyItems?: csstype.Property.JustifyItems | undefined;
    wrap?: csstype.Property.FlexWrap | undefined;
    alignSelf?: csstype.Property.AlignSelf | undefined;
    basis?: csstype.Property.FlexBasis<0 | (string & {})> | undefined;
    fill?: boolean | Direction | undefined;
    flex?: boolean | {
        grow?: number | undefined;
        shrink?: number | undefined;
    } | "grow" | "shrink" | undefined;
    justifySelf?: csstype.Property.JustifySelf | undefined;
    order?: csstype.Property.Order | undefined;
    opacity?: number | csstype.Property.Opacity | undefined;
    overflow?: csstype.Property.Overflow | undefined;
    pointerEvents?: csstype.Property.PointerEvents | undefined;
    textAlign?: csstype.Property.TextAlign | undefined;
    transform?: csstype.Property.Transform | undefined;
    transformOrigin?: csstype.Property.TransformOrigin<0 | (string & {})> | undefined;
    transition?: csstype.Property.Transition<string & {}> | undefined;
    display?: csstype.Property.Display | undefined;
    height?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | undefined;
    maxHeight?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "none" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "-webkit-min-content" | "intrinsic" | undefined;
    maxWidth?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "none" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "-webkit-min-content" | "intrinsic" | undefined;
    minHeight?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "-webkit-min-content" | "intrinsic" | undefined;
    minWidth?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "-webkit-min-content" | "intrinsic" | "-webkit-fill-available" | "min-intrinsic" | undefined;
    width?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "intrinsic" | "min-intrinsic" | undefined;
    margin?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    mb?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    ml?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mr?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mt?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mx?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    my?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    padding?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    pb?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    pl?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    pr?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    pt?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    px?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    py?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    bottom?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | undefined;
    left?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | undefined;
    position?: csstype.Property.Position | undefined;
    right?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | undefined;
    top?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | undefined;
    zIndex?: number | csstype.Property.ZIndex | undefined;
    radius?: false | "sm" | "md" | "lg" | "xs" | "xl" | "xxs" | "round" | {
        bottom?: "sm" | "md" | "lg" | "xs" | "xl" | "xxs" | "round" | undefined;
        left?: "sm" | "md" | "lg" | "xs" | "xl" | "xxs" | "round" | undefined;
        right?: "sm" | "md" | "lg" | "xs" | "xl" | "xxs" | "round" | undefined;
        top?: "sm" | "md" | "lg" | "xs" | "xl" | "xxs" | "round" | undefined;
    } | undefined;
    shadow?: false | "low" | "mid" | "high" | undefined;
    list?: string | undefined;
    download?: any;
    key?: react.Key | null | undefined;
    style?: react.CSSProperties | undefined;
    name?: string | undefined;
    hidden?: boolean | undefined;
    start?: number | undefined;
    content?: string | undefined;
    readOnly?: boolean | undefined;
    low?: number | undefined;
    high?: number | undefined;
    cite?: string | undefined;
    data?: string | undefined;
    form?: string | undefined;
    label?: string | undefined;
    slot?: string | undefined;
    span?: number | undefined;
    summary?: string | undefined;
    title?: string | undefined;
    pattern?: string | undefined;
    prefix?: string | undefined;
    type?: string | undefined;
    disabled?: boolean | undefined;
    value?: string | number | readonly string[] | undefined;
    accept?: string | undefined;
    acceptCharset?: string | undefined;
    action?: string | undefined;
    allowFullScreen?: boolean | undefined;
    allowTransparency?: boolean | undefined;
    alt?: string | undefined;
    async?: boolean | undefined;
    autoComplete?: string | undefined;
    autoPlay?: boolean | undefined;
    capture?: boolean | "user" | "environment" | undefined;
    cellPadding?: string | number | undefined;
    cellSpacing?: string | number | undefined;
    charSet?: string | undefined;
    challenge?: string | undefined;
    checked?: boolean | undefined;
    classID?: string | undefined;
    cols?: number | undefined;
    colSpan?: number | undefined;
    controls?: boolean | undefined;
    coords?: string | undefined;
    crossOrigin?: "" | "anonymous" | "use-credentials" | undefined;
    dateTime?: string | undefined;
    default?: boolean | undefined;
    defer?: boolean | undefined;
    encType?: string | undefined;
    formAction?: string | undefined;
    formEncType?: string | undefined;
    formMethod?: string | undefined;
    formNoValidate?: boolean | undefined;
    formTarget?: string | undefined;
    frameBorder?: string | number | undefined;
    headers?: string | undefined;
    href?: string | undefined;
    hrefLang?: string | undefined;
    htmlFor?: string | undefined;
    httpEquiv?: string | undefined;
    integrity?: string | undefined;
    keyParams?: string | undefined;
    keyType?: string | undefined;
    kind?: string | undefined;
    loop?: boolean | undefined;
    manifest?: string | undefined;
    marginHeight?: number | undefined;
    marginWidth?: number | undefined;
    max?: string | number | undefined;
    maxLength?: number | undefined;
    media?: string | undefined;
    mediaGroup?: string | undefined;
    method?: string | undefined;
    min?: string | number | undefined;
    minLength?: number | undefined;
    multiple?: boolean | undefined;
    muted?: boolean | undefined;
    noValidate?: boolean | undefined;
    open?: boolean | undefined;
    optimum?: number | undefined;
    placeholder?: string | undefined;
    playsInline?: boolean | undefined;
    poster?: string | undefined;
    preload?: string | undefined;
    required?: boolean | undefined;
    reversed?: boolean | undefined;
    rows?: number | undefined;
    rowSpan?: number | undefined;
    sandbox?: string | undefined;
    scope?: string | undefined;
    scoped?: boolean | undefined;
    scrolling?: string | undefined;
    seamless?: boolean | undefined;
    selected?: boolean | undefined;
    shape?: string | undefined;
    sizes?: string | undefined;
    src?: string | undefined;
    srcDoc?: string | undefined;
    srcLang?: string | undefined;
    srcSet?: string | undefined;
    step?: string | number | undefined;
    target?: string | undefined;
    useMap?: string | undefined;
    wmode?: string | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    autoFocus?: boolean | undefined;
    className?: string | undefined;
    contentEditable?: "inherit" | (boolean | "false" | "true") | "plaintext-only" | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "false" | "true") | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    nonce?: string | undefined;
    spellCheck?: (boolean | "false" | "true") | undefined;
    tabIndex?: number | undefined;
    translate?: "yes" | "no" | undefined;
    radioGroup?: string | undefined;
    role?: react.AriaRole | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    property?: string | undefined;
    rel?: string | undefined;
    resource?: string | undefined;
    rev?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "search" | "email" | "tel" | "text" | "none" | "url" | "numeric" | "decimal" | undefined;
    is?: string | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: (boolean | "false" | "true") | undefined;
    "aria-autocomplete"?: "list" | "none" | "inline" | "both" | undefined;
    "aria-braillelabel"?: string | undefined;
    "aria-brailleroledescription"?: string | undefined;
    "aria-busy"?: (boolean | "false" | "true") | undefined;
    "aria-checked"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colindextext"?: string | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "date" | "time" | "location" | "step" | "page" | "false" | "true" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-description"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: (boolean | "false" | "true") | undefined;
    "aria-dropeffect"?: "copy" | "link" | "none" | "move" | "execute" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: (boolean | "false" | "true") | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: (boolean | "false" | "true") | undefined;
    "aria-haspopup"?: boolean | "menu" | "tree" | "grid" | "dialog" | "listbox" | "false" | "true" | undefined;
    "aria-hidden"?: (boolean | "false" | "true") | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: (boolean | "false" | "true") | undefined;
    "aria-multiline"?: (boolean | "false" | "true") | undefined;
    "aria-multiselectable"?: (boolean | "false" | "true") | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-readonly"?: (boolean | "false" | "true") | undefined;
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    "aria-required"?: (boolean | "false" | "true") | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowindextext"?: string | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: (boolean | "false" | "true") | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    } | undefined;
    onCopy?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCopyCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCut?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCutCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onPaste?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onPasteCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCompositionEnd?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionEndCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionStart?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionStartCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionUpdate?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionUpdateCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onFocus?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onFocusCapture?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onBlur?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onBlurCapture?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onChange?: react.FormEventHandler<HTMLDivElement> | undefined;
    onChangeCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onBeforeInput?: react.FormEventHandler<HTMLDivElement> | undefined;
    onBeforeInputCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInput?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInputCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onReset?: react.FormEventHandler<HTMLDivElement> | undefined;
    onResetCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onSubmit?: react.FormEventHandler<HTMLDivElement> | undefined;
    onSubmitCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInvalid?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInvalidCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onLoad?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onError?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onErrorCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onKeyDown?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyDownCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyPress?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyPressCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyUp?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyUpCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onAbort?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onAbortCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlay?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayThrough?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayThroughCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onDurationChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onDurationChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEmptied?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEmptiedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEncrypted?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEncryptedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEnded?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEndedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedData?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedDataCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedMetadata?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedMetadataCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadStart?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadStartCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPause?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPauseCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlay?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlayCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlaying?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlayingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onProgress?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onProgressCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onRateChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onRateChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onResize?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onResizeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeeked?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeekedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeeking?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeekingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onStalled?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onStalledCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSuspend?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSuspendCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onTimeUpdate?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onTimeUpdateCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onVolumeChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onVolumeChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onWaiting?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onWaitingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onAuxClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onAuxClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onContextMenu?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onContextMenuCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onDoubleClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onDoubleClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onDrag?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnd?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEndCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnter?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnterCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragExit?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragExitCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragLeave?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragLeaveCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragOver?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragOverCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragStart?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragStartCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDrop?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDropCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onMouseDown?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseDownCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseEnter?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseLeave?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseMove?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseMoveCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOut?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOutCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOver?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOverCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseUp?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseUpCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onSelect?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSelectCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onTouchCancel?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchCancelCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchEnd?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchEndCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchMove?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchMoveCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchStart?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchStartCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onPointerDown?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerDownCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerMove?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerMoveCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerUp?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerUpCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerCancel?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerCancelCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerEnter?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerLeave?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOver?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOverCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOut?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOutCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onGotPointerCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onGotPointerCaptureCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onLostPointerCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onLostPointerCaptureCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onScroll?: react.UIEventHandler<HTMLDivElement> | undefined;
    onScrollCapture?: react.UIEventHandler<HTMLDivElement> | undefined;
    onWheel?: react.WheelEventHandler<HTMLDivElement> | undefined;
    onWheelCapture?: react.WheelEventHandler<HTMLDivElement> | undefined;
    onAnimationStart?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationStartCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationEnd?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationEndCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationIteration?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationIterationCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onTransitionEnd?: react.TransitionEventHandler<HTMLDivElement> | undefined;
    onTransitionEndCapture?: react.TransitionEventHandler<HTMLDivElement> | undefined;
} & react.RefAttributes<HTMLDivElement>>;
declare const BoxCenter: react.ForwardRefExoticComponent<Omit<{
    flexBox?: boolean | undefined;
    as?: react.ElementType | undefined;
    theme?: Theme | undefined;
    border?: boolean | BorderItemSide | BorderItem | BorderItem[] | undefined;
    children?: react.ReactNode;
    bg?: VariantWithTones | undefined;
    color?: VariantWithTones | undefined;
    align?: csstype.Property.AlignItems | undefined;
    alignContent?: csstype.Property.AlignContent | undefined;
    direction?: csstype.Property.FlexDirection | undefined;
    gap?: _gilbarbara_types.StringOrNumber | undefined;
    justify?: csstype.Property.JustifyContent | undefined;
    justifyItems?: csstype.Property.JustifyItems | undefined;
    wrap?: csstype.Property.FlexWrap | undefined;
    alignSelf?: csstype.Property.AlignSelf | undefined;
    basis?: csstype.Property.FlexBasis<0 | (string & {})> | undefined;
    fill?: boolean | Direction | undefined;
    flex?: boolean | {
        grow?: number | undefined;
        shrink?: number | undefined;
    } | "grow" | "shrink" | undefined;
    justifySelf?: csstype.Property.JustifySelf | undefined;
    order?: csstype.Property.Order | undefined;
    opacity?: number | csstype.Property.Opacity | undefined;
    overflow?: csstype.Property.Overflow | undefined;
    pointerEvents?: csstype.Property.PointerEvents | undefined;
    textAlign?: csstype.Property.TextAlign | undefined;
    transform?: csstype.Property.Transform | undefined;
    transformOrigin?: csstype.Property.TransformOrigin<0 | (string & {})> | undefined;
    transition?: csstype.Property.Transition<string & {}> | undefined;
    display?: csstype.Property.Display | undefined;
    height?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | undefined;
    maxHeight?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "none" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "-webkit-min-content" | "intrinsic" | undefined;
    maxWidth?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "none" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "-webkit-min-content" | "intrinsic" | undefined;
    minHeight?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "-webkit-min-content" | "intrinsic" | undefined;
    minWidth?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "-webkit-min-content" | "intrinsic" | "-webkit-fill-available" | "min-intrinsic" | undefined;
    width?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "intrinsic" | "min-intrinsic" | undefined;
    margin?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    mb?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    ml?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mr?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mt?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mx?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    my?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    padding?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    pb?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    pl?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    pr?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    pt?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    px?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    py?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    bottom?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | undefined;
    left?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | undefined;
    position?: csstype.Property.Position | undefined;
    right?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | undefined;
    top?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | undefined;
    zIndex?: number | csstype.Property.ZIndex | undefined;
    radius?: false | "sm" | "md" | "lg" | "xs" | "xl" | "xxs" | "round" | {
        bottom?: "sm" | "md" | "lg" | "xs" | "xl" | "xxs" | "round" | undefined;
        left?: "sm" | "md" | "lg" | "xs" | "xl" | "xxs" | "round" | undefined;
        right?: "sm" | "md" | "lg" | "xs" | "xl" | "xxs" | "round" | undefined;
        top?: "sm" | "md" | "lg" | "xs" | "xl" | "xxs" | "round" | undefined;
    } | undefined;
    shadow?: false | "low" | "mid" | "high" | undefined;
    list?: string | undefined;
    download?: any;
    key?: react.Key | null | undefined;
    style?: react.CSSProperties | undefined;
    name?: string | undefined;
    hidden?: boolean | undefined;
    start?: number | undefined;
    content?: string | undefined;
    readOnly?: boolean | undefined;
    low?: number | undefined;
    high?: number | undefined;
    cite?: string | undefined;
    data?: string | undefined;
    form?: string | undefined;
    label?: string | undefined;
    slot?: string | undefined;
    span?: number | undefined;
    summary?: string | undefined;
    title?: string | undefined;
    pattern?: string | undefined;
    prefix?: string | undefined;
    type?: string | undefined;
    disabled?: boolean | undefined;
    value?: string | number | readonly string[] | undefined;
    accept?: string | undefined;
    acceptCharset?: string | undefined;
    action?: string | undefined;
    allowFullScreen?: boolean | undefined;
    allowTransparency?: boolean | undefined;
    alt?: string | undefined;
    async?: boolean | undefined;
    autoComplete?: string | undefined;
    autoPlay?: boolean | undefined;
    capture?: boolean | "user" | "environment" | undefined;
    cellPadding?: string | number | undefined;
    cellSpacing?: string | number | undefined;
    charSet?: string | undefined;
    challenge?: string | undefined;
    checked?: boolean | undefined;
    classID?: string | undefined;
    cols?: number | undefined;
    colSpan?: number | undefined;
    controls?: boolean | undefined;
    coords?: string | undefined;
    crossOrigin?: "" | "anonymous" | "use-credentials" | undefined;
    dateTime?: string | undefined;
    default?: boolean | undefined;
    defer?: boolean | undefined;
    encType?: string | undefined;
    formAction?: string | undefined;
    formEncType?: string | undefined;
    formMethod?: string | undefined;
    formNoValidate?: boolean | undefined;
    formTarget?: string | undefined;
    frameBorder?: string | number | undefined;
    headers?: string | undefined;
    href?: string | undefined;
    hrefLang?: string | undefined;
    htmlFor?: string | undefined;
    httpEquiv?: string | undefined;
    integrity?: string | undefined;
    keyParams?: string | undefined;
    keyType?: string | undefined;
    kind?: string | undefined;
    loop?: boolean | undefined;
    manifest?: string | undefined;
    marginHeight?: number | undefined;
    marginWidth?: number | undefined;
    max?: string | number | undefined;
    maxLength?: number | undefined;
    media?: string | undefined;
    mediaGroup?: string | undefined;
    method?: string | undefined;
    min?: string | number | undefined;
    minLength?: number | undefined;
    multiple?: boolean | undefined;
    muted?: boolean | undefined;
    noValidate?: boolean | undefined;
    open?: boolean | undefined;
    optimum?: number | undefined;
    placeholder?: string | undefined;
    playsInline?: boolean | undefined;
    poster?: string | undefined;
    preload?: string | undefined;
    required?: boolean | undefined;
    reversed?: boolean | undefined;
    rows?: number | undefined;
    rowSpan?: number | undefined;
    sandbox?: string | undefined;
    scope?: string | undefined;
    scoped?: boolean | undefined;
    scrolling?: string | undefined;
    seamless?: boolean | undefined;
    selected?: boolean | undefined;
    shape?: string | undefined;
    sizes?: string | undefined;
    src?: string | undefined;
    srcDoc?: string | undefined;
    srcLang?: string | undefined;
    srcSet?: string | undefined;
    step?: string | number | undefined;
    target?: string | undefined;
    useMap?: string | undefined;
    wmode?: string | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    autoFocus?: boolean | undefined;
    className?: string | undefined;
    contentEditable?: "inherit" | (boolean | "false" | "true") | "plaintext-only" | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "false" | "true") | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    nonce?: string | undefined;
    spellCheck?: (boolean | "false" | "true") | undefined;
    tabIndex?: number | undefined;
    translate?: "yes" | "no" | undefined;
    radioGroup?: string | undefined;
    role?: react.AriaRole | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    property?: string | undefined;
    rel?: string | undefined;
    resource?: string | undefined;
    rev?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "search" | "email" | "tel" | "text" | "none" | "url" | "numeric" | "decimal" | undefined;
    is?: string | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: (boolean | "false" | "true") | undefined;
    "aria-autocomplete"?: "list" | "none" | "inline" | "both" | undefined;
    "aria-braillelabel"?: string | undefined;
    "aria-brailleroledescription"?: string | undefined;
    "aria-busy"?: (boolean | "false" | "true") | undefined;
    "aria-checked"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colindextext"?: string | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "date" | "time" | "location" | "step" | "page" | "false" | "true" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-description"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: (boolean | "false" | "true") | undefined;
    "aria-dropeffect"?: "copy" | "link" | "none" | "move" | "execute" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: (boolean | "false" | "true") | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: (boolean | "false" | "true") | undefined;
    "aria-haspopup"?: boolean | "menu" | "tree" | "grid" | "dialog" | "listbox" | "false" | "true" | undefined;
    "aria-hidden"?: (boolean | "false" | "true") | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: (boolean | "false" | "true") | undefined;
    "aria-multiline"?: (boolean | "false" | "true") | undefined;
    "aria-multiselectable"?: (boolean | "false" | "true") | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-readonly"?: (boolean | "false" | "true") | undefined;
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    "aria-required"?: (boolean | "false" | "true") | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowindextext"?: string | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: (boolean | "false" | "true") | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    } | undefined;
    onCopy?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCopyCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCut?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCutCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onPaste?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onPasteCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCompositionEnd?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionEndCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionStart?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionStartCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionUpdate?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionUpdateCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onFocus?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onFocusCapture?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onBlur?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onBlurCapture?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onChange?: react.FormEventHandler<HTMLDivElement> | undefined;
    onChangeCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onBeforeInput?: react.FormEventHandler<HTMLDivElement> | undefined;
    onBeforeInputCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInput?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInputCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onReset?: react.FormEventHandler<HTMLDivElement> | undefined;
    onResetCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onSubmit?: react.FormEventHandler<HTMLDivElement> | undefined;
    onSubmitCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInvalid?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInvalidCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onLoad?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onError?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onErrorCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onKeyDown?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyDownCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyPress?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyPressCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyUp?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyUpCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onAbort?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onAbortCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlay?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayThrough?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayThroughCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onDurationChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onDurationChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEmptied?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEmptiedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEncrypted?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEncryptedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEnded?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEndedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedData?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedDataCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedMetadata?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedMetadataCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadStart?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadStartCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPause?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPauseCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlay?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlayCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlaying?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlayingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onProgress?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onProgressCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onRateChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onRateChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onResize?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onResizeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeeked?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeekedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeeking?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeekingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onStalled?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onStalledCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSuspend?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSuspendCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onTimeUpdate?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onTimeUpdateCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onVolumeChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onVolumeChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onWaiting?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onWaitingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onAuxClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onAuxClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onContextMenu?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onContextMenuCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onDoubleClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onDoubleClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onDrag?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnd?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEndCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnter?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnterCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragExit?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragExitCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragLeave?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragLeaveCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragOver?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragOverCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragStart?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragStartCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDrop?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDropCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onMouseDown?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseDownCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseEnter?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseLeave?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseMove?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseMoveCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOut?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOutCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOver?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOverCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseUp?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseUpCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onSelect?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSelectCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onTouchCancel?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchCancelCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchEnd?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchEndCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchMove?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchMoveCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchStart?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchStartCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onPointerDown?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerDownCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerMove?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerMoveCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerUp?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerUpCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerCancel?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerCancelCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerEnter?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerLeave?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOver?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOverCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOut?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOutCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onGotPointerCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onGotPointerCaptureCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onLostPointerCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onLostPointerCaptureCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onScroll?: react.UIEventHandler<HTMLDivElement> | undefined;
    onScrollCapture?: react.UIEventHandler<HTMLDivElement> | undefined;
    onWheel?: react.WheelEventHandler<HTMLDivElement> | undefined;
    onWheelCapture?: react.WheelEventHandler<HTMLDivElement> | undefined;
    onAnimationStart?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationStartCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationEnd?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationEndCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationIteration?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationIterationCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onTransitionEnd?: react.TransitionEventHandler<HTMLDivElement> | undefined;
    onTransitionEndCapture?: react.TransitionEventHandler<HTMLDivElement> | undefined;
}, "flexBox"> & react.RefAttributes<HTMLDivElement>>;
declare const BoxInline: react.ForwardRefExoticComponent<Omit<{
    flexBox?: boolean | undefined;
    as?: react.ElementType | undefined;
    theme?: Theme | undefined;
    border?: boolean | BorderItemSide | BorderItem | BorderItem[] | undefined;
    children?: react.ReactNode;
    bg?: VariantWithTones | undefined;
    color?: VariantWithTones | undefined;
    align?: csstype.Property.AlignItems | undefined;
    alignContent?: csstype.Property.AlignContent | undefined;
    direction?: csstype.Property.FlexDirection | undefined;
    gap?: _gilbarbara_types.StringOrNumber | undefined;
    justify?: csstype.Property.JustifyContent | undefined;
    justifyItems?: csstype.Property.JustifyItems | undefined;
    wrap?: csstype.Property.FlexWrap | undefined;
    alignSelf?: csstype.Property.AlignSelf | undefined;
    basis?: csstype.Property.FlexBasis<0 | (string & {})> | undefined;
    fill?: boolean | Direction | undefined;
    flex?: boolean | {
        grow?: number | undefined;
        shrink?: number | undefined;
    } | "grow" | "shrink" | undefined;
    justifySelf?: csstype.Property.JustifySelf | undefined;
    order?: csstype.Property.Order | undefined;
    opacity?: number | csstype.Property.Opacity | undefined;
    overflow?: csstype.Property.Overflow | undefined;
    pointerEvents?: csstype.Property.PointerEvents | undefined;
    textAlign?: csstype.Property.TextAlign | undefined;
    transform?: csstype.Property.Transform | undefined;
    transformOrigin?: csstype.Property.TransformOrigin<0 | (string & {})> | undefined;
    transition?: csstype.Property.Transition<string & {}> | undefined;
    display?: csstype.Property.Display | undefined;
    height?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | undefined;
    maxHeight?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "none" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "-webkit-min-content" | "intrinsic" | undefined;
    maxWidth?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "none" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "-webkit-min-content" | "intrinsic" | undefined;
    minHeight?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "-webkit-min-content" | "intrinsic" | undefined;
    minWidth?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "-webkit-min-content" | "intrinsic" | "-webkit-fill-available" | "min-intrinsic" | undefined;
    width?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "intrinsic" | "min-intrinsic" | undefined;
    margin?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    mb?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    ml?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mr?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mt?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mx?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    my?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    padding?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    pb?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    pl?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    pr?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    pt?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    px?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    py?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    bottom?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | undefined;
    left?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | undefined;
    position?: csstype.Property.Position | undefined;
    right?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | undefined;
    top?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | undefined;
    zIndex?: number | csstype.Property.ZIndex | undefined;
    radius?: false | "sm" | "md" | "lg" | "xs" | "xl" | "xxs" | "round" | {
        bottom?: "sm" | "md" | "lg" | "xs" | "xl" | "xxs" | "round" | undefined;
        left?: "sm" | "md" | "lg" | "xs" | "xl" | "xxs" | "round" | undefined;
        right?: "sm" | "md" | "lg" | "xs" | "xl" | "xxs" | "round" | undefined;
        top?: "sm" | "md" | "lg" | "xs" | "xl" | "xxs" | "round" | undefined;
    } | undefined;
    shadow?: false | "low" | "mid" | "high" | undefined;
    list?: string | undefined;
    download?: any;
    key?: react.Key | null | undefined;
    style?: react.CSSProperties | undefined;
    name?: string | undefined;
    hidden?: boolean | undefined;
    start?: number | undefined;
    content?: string | undefined;
    readOnly?: boolean | undefined;
    low?: number | undefined;
    high?: number | undefined;
    cite?: string | undefined;
    data?: string | undefined;
    form?: string | undefined;
    label?: string | undefined;
    slot?: string | undefined;
    span?: number | undefined;
    summary?: string | undefined;
    title?: string | undefined;
    pattern?: string | undefined;
    prefix?: string | undefined;
    type?: string | undefined;
    disabled?: boolean | undefined;
    value?: string | number | readonly string[] | undefined;
    accept?: string | undefined;
    acceptCharset?: string | undefined;
    action?: string | undefined;
    allowFullScreen?: boolean | undefined;
    allowTransparency?: boolean | undefined;
    alt?: string | undefined;
    async?: boolean | undefined;
    autoComplete?: string | undefined;
    autoPlay?: boolean | undefined;
    capture?: boolean | "user" | "environment" | undefined;
    cellPadding?: string | number | undefined;
    cellSpacing?: string | number | undefined;
    charSet?: string | undefined;
    challenge?: string | undefined;
    checked?: boolean | undefined;
    classID?: string | undefined;
    cols?: number | undefined;
    colSpan?: number | undefined;
    controls?: boolean | undefined;
    coords?: string | undefined;
    crossOrigin?: "" | "anonymous" | "use-credentials" | undefined;
    dateTime?: string | undefined;
    default?: boolean | undefined;
    defer?: boolean | undefined;
    encType?: string | undefined;
    formAction?: string | undefined;
    formEncType?: string | undefined;
    formMethod?: string | undefined;
    formNoValidate?: boolean | undefined;
    formTarget?: string | undefined;
    frameBorder?: string | number | undefined;
    headers?: string | undefined;
    href?: string | undefined;
    hrefLang?: string | undefined;
    htmlFor?: string | undefined;
    httpEquiv?: string | undefined;
    integrity?: string | undefined;
    keyParams?: string | undefined;
    keyType?: string | undefined;
    kind?: string | undefined;
    loop?: boolean | undefined;
    manifest?: string | undefined;
    marginHeight?: number | undefined;
    marginWidth?: number | undefined;
    max?: string | number | undefined;
    maxLength?: number | undefined;
    media?: string | undefined;
    mediaGroup?: string | undefined;
    method?: string | undefined;
    min?: string | number | undefined;
    minLength?: number | undefined;
    multiple?: boolean | undefined;
    muted?: boolean | undefined;
    noValidate?: boolean | undefined;
    open?: boolean | undefined;
    optimum?: number | undefined;
    placeholder?: string | undefined;
    playsInline?: boolean | undefined;
    poster?: string | undefined;
    preload?: string | undefined;
    required?: boolean | undefined;
    reversed?: boolean | undefined;
    rows?: number | undefined;
    rowSpan?: number | undefined;
    sandbox?: string | undefined;
    scope?: string | undefined;
    scoped?: boolean | undefined;
    scrolling?: string | undefined;
    seamless?: boolean | undefined;
    selected?: boolean | undefined;
    shape?: string | undefined;
    sizes?: string | undefined;
    src?: string | undefined;
    srcDoc?: string | undefined;
    srcLang?: string | undefined;
    srcSet?: string | undefined;
    step?: string | number | undefined;
    target?: string | undefined;
    useMap?: string | undefined;
    wmode?: string | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    autoFocus?: boolean | undefined;
    className?: string | undefined;
    contentEditable?: "inherit" | (boolean | "false" | "true") | "plaintext-only" | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "false" | "true") | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    nonce?: string | undefined;
    spellCheck?: (boolean | "false" | "true") | undefined;
    tabIndex?: number | undefined;
    translate?: "yes" | "no" | undefined;
    radioGroup?: string | undefined;
    role?: react.AriaRole | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    property?: string | undefined;
    rel?: string | undefined;
    resource?: string | undefined;
    rev?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "search" | "email" | "tel" | "text" | "none" | "url" | "numeric" | "decimal" | undefined;
    is?: string | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: (boolean | "false" | "true") | undefined;
    "aria-autocomplete"?: "list" | "none" | "inline" | "both" | undefined;
    "aria-braillelabel"?: string | undefined;
    "aria-brailleroledescription"?: string | undefined;
    "aria-busy"?: (boolean | "false" | "true") | undefined;
    "aria-checked"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colindextext"?: string | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "date" | "time" | "location" | "step" | "page" | "false" | "true" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-description"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: (boolean | "false" | "true") | undefined;
    "aria-dropeffect"?: "copy" | "link" | "none" | "move" | "execute" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: (boolean | "false" | "true") | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: (boolean | "false" | "true") | undefined;
    "aria-haspopup"?: boolean | "menu" | "tree" | "grid" | "dialog" | "listbox" | "false" | "true" | undefined;
    "aria-hidden"?: (boolean | "false" | "true") | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: (boolean | "false" | "true") | undefined;
    "aria-multiline"?: (boolean | "false" | "true") | undefined;
    "aria-multiselectable"?: (boolean | "false" | "true") | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-readonly"?: (boolean | "false" | "true") | undefined;
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    "aria-required"?: (boolean | "false" | "true") | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowindextext"?: string | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: (boolean | "false" | "true") | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    } | undefined;
    onCopy?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCopyCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCut?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCutCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onPaste?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onPasteCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCompositionEnd?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionEndCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionStart?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionStartCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionUpdate?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionUpdateCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onFocus?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onFocusCapture?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onBlur?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onBlurCapture?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onChange?: react.FormEventHandler<HTMLDivElement> | undefined;
    onChangeCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onBeforeInput?: react.FormEventHandler<HTMLDivElement> | undefined;
    onBeforeInputCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInput?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInputCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onReset?: react.FormEventHandler<HTMLDivElement> | undefined;
    onResetCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onSubmit?: react.FormEventHandler<HTMLDivElement> | undefined;
    onSubmitCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInvalid?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInvalidCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onLoad?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onError?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onErrorCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onKeyDown?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyDownCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyPress?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyPressCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyUp?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyUpCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onAbort?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onAbortCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlay?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayThrough?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayThroughCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onDurationChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onDurationChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEmptied?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEmptiedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEncrypted?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEncryptedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEnded?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEndedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedData?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedDataCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedMetadata?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedMetadataCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadStart?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadStartCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPause?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPauseCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlay?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlayCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlaying?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlayingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onProgress?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onProgressCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onRateChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onRateChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onResize?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onResizeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeeked?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeekedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeeking?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeekingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onStalled?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onStalledCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSuspend?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSuspendCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onTimeUpdate?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onTimeUpdateCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onVolumeChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onVolumeChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onWaiting?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onWaitingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onAuxClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onAuxClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onContextMenu?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onContextMenuCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onDoubleClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onDoubleClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onDrag?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnd?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEndCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnter?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnterCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragExit?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragExitCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragLeave?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragLeaveCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragOver?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragOverCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragStart?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragStartCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDrop?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDropCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onMouseDown?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseDownCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseEnter?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseLeave?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseMove?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseMoveCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOut?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOutCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOver?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOverCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseUp?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseUpCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onSelect?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSelectCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onTouchCancel?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchCancelCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchEnd?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchEndCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchMove?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchMoveCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchStart?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchStartCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onPointerDown?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerDownCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerMove?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerMoveCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerUp?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerUpCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerCancel?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerCancelCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerEnter?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerLeave?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOver?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOverCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOut?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOutCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onGotPointerCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onGotPointerCaptureCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onLostPointerCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onLostPointerCaptureCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onScroll?: react.UIEventHandler<HTMLDivElement> | undefined;
    onScrollCapture?: react.UIEventHandler<HTMLDivElement> | undefined;
    onWheel?: react.WheelEventHandler<HTMLDivElement> | undefined;
    onWheelCapture?: react.WheelEventHandler<HTMLDivElement> | undefined;
    onAnimationStart?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationStartCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationEnd?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationEndCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationIteration?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationIterationCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onTransitionEnd?: react.TransitionEventHandler<HTMLDivElement> | undefined;
    onTransitionEndCapture?: react.TransitionEventHandler<HTMLDivElement> | undefined;
}, "flexBox"> & react.RefAttributes<HTMLDivElement>>;

interface ButtonKnownProps extends StyledProps, WithBlock, WithBusy, WithChildren, WithColorsDefaultBg, WithButtonSize, WithInvert, WithLight, WithPadding, WithTransparent {
    /**
     * A shaped button with equal padding on all sides
     */
    shape?: 'circle' | 'round' | 'square';
    /**
     * The button type
     * @default button
     */
    type?: ButtonTypes;
    /**
     * Double the horizontal padding
     * @default false
     */
    wide?: boolean;
}
type ButtonProps = Simplify<OmitElementProps<HTMLElement, ButtonKnownProps>>;
declare const Button: react.ForwardRefExoticComponent<{
    shape?: "circle" | "square" | "round" | undefined;
    type?: ButtonTypes | undefined;
    wide?: boolean | undefined;
    as?: react.ElementType | undefined;
    theme?: Theme | undefined;
    block?: boolean | undefined;
    busy?: boolean | undefined;
    children: ReactNode;
    bg?: VariantWithTones | undefined;
    color?: VariantWithTones | undefined;
    size?: "sm" | "md" | "lg" | "xs" | undefined;
    invert?: boolean | undefined;
    light?: boolean | undefined;
    padding?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    pb?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    pl?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    pr?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    pt?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    px?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    py?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    transparent?: boolean | undefined;
    list?: string | undefined;
    download?: any;
    key?: react.Key | null | undefined;
    style?: react.CSSProperties | undefined;
    name?: string | undefined;
    hidden?: boolean | undefined;
    start?: number | undefined;
    height?: string | number | undefined;
    width?: string | number | undefined;
    wrap?: string | undefined;
    content?: string | undefined;
    readOnly?: boolean | undefined;
    low?: number | undefined;
    high?: number | undefined;
    cite?: string | undefined;
    data?: string | undefined;
    form?: string | undefined;
    label?: string | undefined;
    slot?: string | undefined;
    span?: number | undefined;
    summary?: string | undefined;
    title?: string | undefined;
    pattern?: string | undefined;
    prefix?: string | undefined;
    disabled?: boolean | undefined;
    value?: string | number | readonly string[] | undefined;
    accept?: string | undefined;
    acceptCharset?: string | undefined;
    action?: string | undefined;
    allowFullScreen?: boolean | undefined;
    allowTransparency?: boolean | undefined;
    alt?: string | undefined;
    async?: boolean | undefined;
    autoComplete?: string | undefined;
    autoPlay?: boolean | undefined;
    capture?: boolean | "user" | "environment" | undefined;
    cellPadding?: string | number | undefined;
    cellSpacing?: string | number | undefined;
    charSet?: string | undefined;
    challenge?: string | undefined;
    checked?: boolean | undefined;
    classID?: string | undefined;
    cols?: number | undefined;
    colSpan?: number | undefined;
    controls?: boolean | undefined;
    coords?: string | undefined;
    crossOrigin?: "" | "anonymous" | "use-credentials" | undefined;
    dateTime?: string | undefined;
    default?: boolean | undefined;
    defer?: boolean | undefined;
    encType?: string | undefined;
    formAction?: string | undefined;
    formEncType?: string | undefined;
    formMethod?: string | undefined;
    formNoValidate?: boolean | undefined;
    formTarget?: string | undefined;
    frameBorder?: string | number | undefined;
    headers?: string | undefined;
    href?: string | undefined;
    hrefLang?: string | undefined;
    htmlFor?: string | undefined;
    httpEquiv?: string | undefined;
    integrity?: string | undefined;
    keyParams?: string | undefined;
    keyType?: string | undefined;
    kind?: string | undefined;
    loop?: boolean | undefined;
    manifest?: string | undefined;
    marginHeight?: number | undefined;
    marginWidth?: number | undefined;
    max?: string | number | undefined;
    maxLength?: number | undefined;
    media?: string | undefined;
    mediaGroup?: string | undefined;
    method?: string | undefined;
    min?: string | number | undefined;
    minLength?: number | undefined;
    multiple?: boolean | undefined;
    muted?: boolean | undefined;
    noValidate?: boolean | undefined;
    open?: boolean | undefined;
    optimum?: number | undefined;
    placeholder?: string | undefined;
    playsInline?: boolean | undefined;
    poster?: string | undefined;
    preload?: string | undefined;
    required?: boolean | undefined;
    reversed?: boolean | undefined;
    rows?: number | undefined;
    rowSpan?: number | undefined;
    sandbox?: string | undefined;
    scope?: string | undefined;
    scoped?: boolean | undefined;
    scrolling?: string | undefined;
    seamless?: boolean | undefined;
    selected?: boolean | undefined;
    sizes?: string | undefined;
    src?: string | undefined;
    srcDoc?: string | undefined;
    srcLang?: string | undefined;
    srcSet?: string | undefined;
    step?: string | number | undefined;
    target?: string | undefined;
    useMap?: string | undefined;
    wmode?: string | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    autoFocus?: boolean | undefined;
    className?: string | undefined;
    contentEditable?: "inherit" | (boolean | "false" | "true") | "plaintext-only" | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "false" | "true") | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    nonce?: string | undefined;
    spellCheck?: (boolean | "false" | "true") | undefined;
    tabIndex?: number | undefined;
    translate?: "yes" | "no" | undefined;
    radioGroup?: string | undefined;
    role?: react.AriaRole | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    property?: string | undefined;
    rel?: string | undefined;
    resource?: string | undefined;
    rev?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "search" | "email" | "tel" | "text" | "none" | "url" | "numeric" | "decimal" | undefined;
    is?: string | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: (boolean | "false" | "true") | undefined;
    "aria-autocomplete"?: "list" | "none" | "inline" | "both" | undefined;
    "aria-braillelabel"?: string | undefined;
    "aria-brailleroledescription"?: string | undefined;
    "aria-busy"?: (boolean | "false" | "true") | undefined;
    "aria-checked"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colindextext"?: string | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "date" | "time" | "location" | "step" | "page" | "false" | "true" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-description"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: (boolean | "false" | "true") | undefined;
    "aria-dropeffect"?: "copy" | "link" | "none" | "move" | "execute" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: (boolean | "false" | "true") | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: (boolean | "false" | "true") | undefined;
    "aria-haspopup"?: boolean | "menu" | "tree" | "grid" | "dialog" | "listbox" | "false" | "true" | undefined;
    "aria-hidden"?: (boolean | "false" | "true") | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: (boolean | "false" | "true") | undefined;
    "aria-multiline"?: (boolean | "false" | "true") | undefined;
    "aria-multiselectable"?: (boolean | "false" | "true") | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-readonly"?: (boolean | "false" | "true") | undefined;
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    "aria-required"?: (boolean | "false" | "true") | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowindextext"?: string | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: (boolean | "false" | "true") | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    } | undefined;
    onCopy?: react.ClipboardEventHandler<HTMLElement> | undefined;
    onCopyCapture?: react.ClipboardEventHandler<HTMLElement> | undefined;
    onCut?: react.ClipboardEventHandler<HTMLElement> | undefined;
    onCutCapture?: react.ClipboardEventHandler<HTMLElement> | undefined;
    onPaste?: react.ClipboardEventHandler<HTMLElement> | undefined;
    onPasteCapture?: react.ClipboardEventHandler<HTMLElement> | undefined;
    onCompositionEnd?: react.CompositionEventHandler<HTMLElement> | undefined;
    onCompositionEndCapture?: react.CompositionEventHandler<HTMLElement> | undefined;
    onCompositionStart?: react.CompositionEventHandler<HTMLElement> | undefined;
    onCompositionStartCapture?: react.CompositionEventHandler<HTMLElement> | undefined;
    onCompositionUpdate?: react.CompositionEventHandler<HTMLElement> | undefined;
    onCompositionUpdateCapture?: react.CompositionEventHandler<HTMLElement> | undefined;
    onFocus?: react.FocusEventHandler<HTMLElement> | undefined;
    onFocusCapture?: react.FocusEventHandler<HTMLElement> | undefined;
    onBlur?: react.FocusEventHandler<HTMLElement> | undefined;
    onBlurCapture?: react.FocusEventHandler<HTMLElement> | undefined;
    onChange?: react.FormEventHandler<HTMLElement> | undefined;
    onChangeCapture?: react.FormEventHandler<HTMLElement> | undefined;
    onBeforeInput?: react.FormEventHandler<HTMLElement> | undefined;
    onBeforeInputCapture?: react.FormEventHandler<HTMLElement> | undefined;
    onInput?: react.FormEventHandler<HTMLElement> | undefined;
    onInputCapture?: react.FormEventHandler<HTMLElement> | undefined;
    onReset?: react.FormEventHandler<HTMLElement> | undefined;
    onResetCapture?: react.FormEventHandler<HTMLElement> | undefined;
    onSubmit?: react.FormEventHandler<HTMLElement> | undefined;
    onSubmitCapture?: react.FormEventHandler<HTMLElement> | undefined;
    onInvalid?: react.FormEventHandler<HTMLElement> | undefined;
    onInvalidCapture?: react.FormEventHandler<HTMLElement> | undefined;
    onLoad?: react.ReactEventHandler<HTMLElement> | undefined;
    onLoadCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onError?: react.ReactEventHandler<HTMLElement> | undefined;
    onErrorCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onKeyDown?: react.KeyboardEventHandler<HTMLElement> | undefined;
    onKeyDownCapture?: react.KeyboardEventHandler<HTMLElement> | undefined;
    onKeyPress?: react.KeyboardEventHandler<HTMLElement> | undefined;
    onKeyPressCapture?: react.KeyboardEventHandler<HTMLElement> | undefined;
    onKeyUp?: react.KeyboardEventHandler<HTMLElement> | undefined;
    onKeyUpCapture?: react.KeyboardEventHandler<HTMLElement> | undefined;
    onAbort?: react.ReactEventHandler<HTMLElement> | undefined;
    onAbortCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onCanPlay?: react.ReactEventHandler<HTMLElement> | undefined;
    onCanPlayCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onCanPlayThrough?: react.ReactEventHandler<HTMLElement> | undefined;
    onCanPlayThroughCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onDurationChange?: react.ReactEventHandler<HTMLElement> | undefined;
    onDurationChangeCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onEmptied?: react.ReactEventHandler<HTMLElement> | undefined;
    onEmptiedCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onEncrypted?: react.ReactEventHandler<HTMLElement> | undefined;
    onEncryptedCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onEnded?: react.ReactEventHandler<HTMLElement> | undefined;
    onEndedCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onLoadedData?: react.ReactEventHandler<HTMLElement> | undefined;
    onLoadedDataCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onLoadedMetadata?: react.ReactEventHandler<HTMLElement> | undefined;
    onLoadedMetadataCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onLoadStart?: react.ReactEventHandler<HTMLElement> | undefined;
    onLoadStartCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onPause?: react.ReactEventHandler<HTMLElement> | undefined;
    onPauseCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onPlay?: react.ReactEventHandler<HTMLElement> | undefined;
    onPlayCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onPlaying?: react.ReactEventHandler<HTMLElement> | undefined;
    onPlayingCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onProgress?: react.ReactEventHandler<HTMLElement> | undefined;
    onProgressCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onRateChange?: react.ReactEventHandler<HTMLElement> | undefined;
    onRateChangeCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onResize?: react.ReactEventHandler<HTMLElement> | undefined;
    onResizeCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onSeeked?: react.ReactEventHandler<HTMLElement> | undefined;
    onSeekedCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onSeeking?: react.ReactEventHandler<HTMLElement> | undefined;
    onSeekingCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onStalled?: react.ReactEventHandler<HTMLElement> | undefined;
    onStalledCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onSuspend?: react.ReactEventHandler<HTMLElement> | undefined;
    onSuspendCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onTimeUpdate?: react.ReactEventHandler<HTMLElement> | undefined;
    onTimeUpdateCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onVolumeChange?: react.ReactEventHandler<HTMLElement> | undefined;
    onVolumeChangeCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onWaiting?: react.ReactEventHandler<HTMLElement> | undefined;
    onWaitingCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onAuxClick?: react.MouseEventHandler<HTMLElement> | undefined;
    onAuxClickCapture?: react.MouseEventHandler<HTMLElement> | undefined;
    onClick?: react.MouseEventHandler<HTMLElement> | undefined;
    onClickCapture?: react.MouseEventHandler<HTMLElement> | undefined;
    onContextMenu?: react.MouseEventHandler<HTMLElement> | undefined;
    onContextMenuCapture?: react.MouseEventHandler<HTMLElement> | undefined;
    onDoubleClick?: react.MouseEventHandler<HTMLElement> | undefined;
    onDoubleClickCapture?: react.MouseEventHandler<HTMLElement> | undefined;
    onDrag?: react.DragEventHandler<HTMLElement> | undefined;
    onDragCapture?: react.DragEventHandler<HTMLElement> | undefined;
    onDragEnd?: react.DragEventHandler<HTMLElement> | undefined;
    onDragEndCapture?: react.DragEventHandler<HTMLElement> | undefined;
    onDragEnter?: react.DragEventHandler<HTMLElement> | undefined;
    onDragEnterCapture?: react.DragEventHandler<HTMLElement> | undefined;
    onDragExit?: react.DragEventHandler<HTMLElement> | undefined;
    onDragExitCapture?: react.DragEventHandler<HTMLElement> | undefined;
    onDragLeave?: react.DragEventHandler<HTMLElement> | undefined;
    onDragLeaveCapture?: react.DragEventHandler<HTMLElement> | undefined;
    onDragOver?: react.DragEventHandler<HTMLElement> | undefined;
    onDragOverCapture?: react.DragEventHandler<HTMLElement> | undefined;
    onDragStart?: react.DragEventHandler<HTMLElement> | undefined;
    onDragStartCapture?: react.DragEventHandler<HTMLElement> | undefined;
    onDrop?: react.DragEventHandler<HTMLElement> | undefined;
    onDropCapture?: react.DragEventHandler<HTMLElement> | undefined;
    onMouseDown?: react.MouseEventHandler<HTMLElement> | undefined;
    onMouseDownCapture?: react.MouseEventHandler<HTMLElement> | undefined;
    onMouseEnter?: react.MouseEventHandler<HTMLElement> | undefined;
    onMouseLeave?: react.MouseEventHandler<HTMLElement> | undefined;
    onMouseMove?: react.MouseEventHandler<HTMLElement> | undefined;
    onMouseMoveCapture?: react.MouseEventHandler<HTMLElement> | undefined;
    onMouseOut?: react.MouseEventHandler<HTMLElement> | undefined;
    onMouseOutCapture?: react.MouseEventHandler<HTMLElement> | undefined;
    onMouseOver?: react.MouseEventHandler<HTMLElement> | undefined;
    onMouseOverCapture?: react.MouseEventHandler<HTMLElement> | undefined;
    onMouseUp?: react.MouseEventHandler<HTMLElement> | undefined;
    onMouseUpCapture?: react.MouseEventHandler<HTMLElement> | undefined;
    onSelect?: react.ReactEventHandler<HTMLElement> | undefined;
    onSelectCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onTouchCancel?: react.TouchEventHandler<HTMLElement> | undefined;
    onTouchCancelCapture?: react.TouchEventHandler<HTMLElement> | undefined;
    onTouchEnd?: react.TouchEventHandler<HTMLElement> | undefined;
    onTouchEndCapture?: react.TouchEventHandler<HTMLElement> | undefined;
    onTouchMove?: react.TouchEventHandler<HTMLElement> | undefined;
    onTouchMoveCapture?: react.TouchEventHandler<HTMLElement> | undefined;
    onTouchStart?: react.TouchEventHandler<HTMLElement> | undefined;
    onTouchStartCapture?: react.TouchEventHandler<HTMLElement> | undefined;
    onPointerDown?: react.PointerEventHandler<HTMLElement> | undefined;
    onPointerDownCapture?: react.PointerEventHandler<HTMLElement> | undefined;
    onPointerMove?: react.PointerEventHandler<HTMLElement> | undefined;
    onPointerMoveCapture?: react.PointerEventHandler<HTMLElement> | undefined;
    onPointerUp?: react.PointerEventHandler<HTMLElement> | undefined;
    onPointerUpCapture?: react.PointerEventHandler<HTMLElement> | undefined;
    onPointerCancel?: react.PointerEventHandler<HTMLElement> | undefined;
    onPointerCancelCapture?: react.PointerEventHandler<HTMLElement> | undefined;
    onPointerEnter?: react.PointerEventHandler<HTMLElement> | undefined;
    onPointerLeave?: react.PointerEventHandler<HTMLElement> | undefined;
    onPointerOver?: react.PointerEventHandler<HTMLElement> | undefined;
    onPointerOverCapture?: react.PointerEventHandler<HTMLElement> | undefined;
    onPointerOut?: react.PointerEventHandler<HTMLElement> | undefined;
    onPointerOutCapture?: react.PointerEventHandler<HTMLElement> | undefined;
    onGotPointerCapture?: react.PointerEventHandler<HTMLElement> | undefined;
    onGotPointerCaptureCapture?: react.PointerEventHandler<HTMLElement> | undefined;
    onLostPointerCapture?: react.PointerEventHandler<HTMLElement> | undefined;
    onLostPointerCaptureCapture?: react.PointerEventHandler<HTMLElement> | undefined;
    onScroll?: react.UIEventHandler<HTMLElement> | undefined;
    onScrollCapture?: react.UIEventHandler<HTMLElement> | undefined;
    onWheel?: react.WheelEventHandler<HTMLElement> | undefined;
    onWheelCapture?: react.WheelEventHandler<HTMLElement> | undefined;
    onAnimationStart?: react.AnimationEventHandler<HTMLElement> | undefined;
    onAnimationStartCapture?: react.AnimationEventHandler<HTMLElement> | undefined;
    onAnimationEnd?: react.AnimationEventHandler<HTMLElement> | undefined;
    onAnimationEndCapture?: react.AnimationEventHandler<HTMLElement> | undefined;
    onAnimationIteration?: react.AnimationEventHandler<HTMLElement> | undefined;
    onAnimationIterationCapture?: react.AnimationEventHandler<HTMLElement> | undefined;
    onTransitionEnd?: react.TransitionEventHandler<HTMLElement> | undefined;
    onTransitionEndCapture?: react.TransitionEventHandler<HTMLElement> | undefined;
} & react.RefAttributes<HTMLElement>>;

interface ButtonGroupKnownProps extends StyledProps, WithButtonSize, WithChildren, WithColorsDefaultBg, WithDisabled {
}
type ButtonGroupProps = Simplify<OmitElementProps<HTMLDivElement, ButtonGroupKnownProps>>;
declare function ButtonGroup(props: ButtonGroupProps): react_jsx_runtime.JSX.Element;
declare namespace ButtonGroup {
    var displayName: string;
}

interface MenuKnownProps extends StyledProps, WithAccent, WithChildren, WithDisabled, WithOpen {
    /**
     * The Menu button.
     * @default An Icon with more-vertical-o
     */
    button?: ReactElement;
    /**
     * Disable closing the menu when you click outside.
     * @default false
     */
    disableCloseOnBlur?: boolean;
    /** @default false */
    disableKeyboardNavigation?: boolean;
    labels?: {
        /** @default Close menu */
        close?: string;
        /**
         * Override the open/close button aria-label.
         */
        name?: string;
        /** @default Open menu */
        open?: string;
    };
    /** @default 200 */
    minWidth?: StringOrNumber;
    onToggle?: (status: boolean) => void;
    /** @default bottom-right */
    position?: PositionX | PositionY;
    /** @default click */
    trigger?: 'click' | 'hover';
}
type MenuProps = Simplify<OmitElementProps<HTMLDivElement, MenuKnownProps>>;

declare const Menu: react.ForwardRefExoticComponent<{
    button?: react.ReactElement<any, string | react.JSXElementConstructor<any>> | undefined;
    disableCloseOnBlur?: boolean | undefined;
    disableKeyboardNavigation?: boolean | undefined;
    labels?: {
        close?: string | undefined;
        name?: string | undefined;
        open?: string | undefined;
    } | undefined;
    minWidth?: _gilbarbara_types.StringOrNumber | undefined;
    onToggle?: ((status: boolean) => void) | undefined;
    position?: PositionX | PositionY | undefined;
    trigger?: "click" | "hover" | undefined;
    as?: react.ElementType | undefined;
    theme?: Theme | undefined;
    accent?: VariantWithTones | undefined;
    children: react.ReactNode;
    disabled?: boolean | undefined;
    open?: boolean | undefined;
    list?: string | undefined;
    download?: any;
    key?: react.Key | null | undefined;
    style?: react.CSSProperties | undefined;
    name?: string | undefined;
    color?: string | undefined;
    hidden?: boolean | undefined;
    start?: number | undefined;
    height?: string | number | undefined;
    width?: string | number | undefined;
    wrap?: string | undefined;
    content?: string | undefined;
    readOnly?: boolean | undefined;
    low?: number | undefined;
    high?: number | undefined;
    cite?: string | undefined;
    data?: string | undefined;
    form?: string | undefined;
    label?: string | undefined;
    slot?: string | undefined;
    span?: number | undefined;
    summary?: string | undefined;
    title?: string | undefined;
    pattern?: string | undefined;
    prefix?: string | undefined;
    type?: string | undefined;
    value?: string | number | readonly string[] | undefined;
    accept?: string | undefined;
    acceptCharset?: string | undefined;
    action?: string | undefined;
    allowFullScreen?: boolean | undefined;
    allowTransparency?: boolean | undefined;
    alt?: string | undefined;
    async?: boolean | undefined;
    autoComplete?: string | undefined;
    autoPlay?: boolean | undefined;
    capture?: boolean | "user" | "environment" | undefined;
    cellPadding?: string | number | undefined;
    cellSpacing?: string | number | undefined;
    charSet?: string | undefined;
    challenge?: string | undefined;
    checked?: boolean | undefined;
    classID?: string | undefined;
    cols?: number | undefined;
    colSpan?: number | undefined;
    controls?: boolean | undefined;
    coords?: string | undefined;
    crossOrigin?: "" | "anonymous" | "use-credentials" | undefined;
    dateTime?: string | undefined;
    default?: boolean | undefined;
    defer?: boolean | undefined;
    encType?: string | undefined;
    formAction?: string | undefined;
    formEncType?: string | undefined;
    formMethod?: string | undefined;
    formNoValidate?: boolean | undefined;
    formTarget?: string | undefined;
    frameBorder?: string | number | undefined;
    headers?: string | undefined;
    href?: string | undefined;
    hrefLang?: string | undefined;
    htmlFor?: string | undefined;
    httpEquiv?: string | undefined;
    integrity?: string | undefined;
    keyParams?: string | undefined;
    keyType?: string | undefined;
    kind?: string | undefined;
    loop?: boolean | undefined;
    manifest?: string | undefined;
    marginHeight?: number | undefined;
    marginWidth?: number | undefined;
    max?: string | number | undefined;
    maxLength?: number | undefined;
    media?: string | undefined;
    mediaGroup?: string | undefined;
    method?: string | undefined;
    min?: string | number | undefined;
    minLength?: number | undefined;
    multiple?: boolean | undefined;
    muted?: boolean | undefined;
    noValidate?: boolean | undefined;
    optimum?: number | undefined;
    placeholder?: string | undefined;
    playsInline?: boolean | undefined;
    poster?: string | undefined;
    preload?: string | undefined;
    required?: boolean | undefined;
    reversed?: boolean | undefined;
    rows?: number | undefined;
    rowSpan?: number | undefined;
    sandbox?: string | undefined;
    scope?: string | undefined;
    scoped?: boolean | undefined;
    scrolling?: string | undefined;
    seamless?: boolean | undefined;
    selected?: boolean | undefined;
    shape?: string | undefined;
    sizes?: string | undefined;
    src?: string | undefined;
    srcDoc?: string | undefined;
    srcLang?: string | undefined;
    srcSet?: string | undefined;
    step?: string | number | undefined;
    target?: string | undefined;
    useMap?: string | undefined;
    wmode?: string | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    autoFocus?: boolean | undefined;
    className?: string | undefined;
    contentEditable?: "inherit" | (boolean | "false" | "true") | "plaintext-only" | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "false" | "true") | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    nonce?: string | undefined;
    spellCheck?: (boolean | "false" | "true") | undefined;
    tabIndex?: number | undefined;
    translate?: "yes" | "no" | undefined;
    radioGroup?: string | undefined;
    role?: react.AriaRole | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    property?: string | undefined;
    rel?: string | undefined;
    resource?: string | undefined;
    rev?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "search" | "email" | "tel" | "text" | "none" | "url" | "numeric" | "decimal" | undefined;
    is?: string | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: (boolean | "false" | "true") | undefined;
    "aria-autocomplete"?: "list" | "none" | "inline" | "both" | undefined;
    "aria-braillelabel"?: string | undefined;
    "aria-brailleroledescription"?: string | undefined;
    "aria-busy"?: (boolean | "false" | "true") | undefined;
    "aria-checked"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colindextext"?: string | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "date" | "time" | "location" | "step" | "page" | "false" | "true" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-description"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: (boolean | "false" | "true") | undefined;
    "aria-dropeffect"?: "copy" | "link" | "none" | "move" | "execute" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: (boolean | "false" | "true") | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: (boolean | "false" | "true") | undefined;
    "aria-haspopup"?: boolean | "menu" | "tree" | "grid" | "dialog" | "listbox" | "false" | "true" | undefined;
    "aria-hidden"?: (boolean | "false" | "true") | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: (boolean | "false" | "true") | undefined;
    "aria-multiline"?: (boolean | "false" | "true") | undefined;
    "aria-multiselectable"?: (boolean | "false" | "true") | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-readonly"?: (boolean | "false" | "true") | undefined;
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    "aria-required"?: (boolean | "false" | "true") | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowindextext"?: string | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: (boolean | "false" | "true") | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    } | undefined;
    onCopy?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCopyCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCut?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCutCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onPaste?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onPasteCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCompositionEnd?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionEndCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionStart?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionStartCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionUpdate?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionUpdateCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onFocus?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onFocusCapture?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onBlur?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onBlurCapture?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onChange?: react.FormEventHandler<HTMLDivElement> | undefined;
    onChangeCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onBeforeInput?: react.FormEventHandler<HTMLDivElement> | undefined;
    onBeforeInputCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInput?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInputCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onReset?: react.FormEventHandler<HTMLDivElement> | undefined;
    onResetCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onSubmit?: react.FormEventHandler<HTMLDivElement> | undefined;
    onSubmitCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInvalid?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInvalidCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onLoad?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onError?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onErrorCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onKeyDown?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyDownCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyPress?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyPressCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyUp?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyUpCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onAbort?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onAbortCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlay?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayThrough?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayThroughCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onDurationChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onDurationChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEmptied?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEmptiedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEncrypted?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEncryptedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEnded?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEndedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedData?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedDataCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedMetadata?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedMetadataCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadStart?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadStartCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPause?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPauseCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlay?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlayCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlaying?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlayingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onProgress?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onProgressCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onRateChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onRateChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onResize?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onResizeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeeked?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeekedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeeking?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeekingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onStalled?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onStalledCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSuspend?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSuspendCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onTimeUpdate?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onTimeUpdateCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onVolumeChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onVolumeChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onWaiting?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onWaitingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onAuxClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onAuxClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onContextMenu?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onContextMenuCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onDoubleClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onDoubleClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onDrag?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnd?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEndCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnter?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnterCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragExit?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragExitCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragLeave?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragLeaveCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragOver?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragOverCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragStart?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragStartCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDrop?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDropCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onMouseDown?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseDownCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseEnter?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseLeave?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseMove?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseMoveCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOut?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOutCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOver?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOverCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseUp?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseUpCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onSelect?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSelectCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onTouchCancel?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchCancelCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchEnd?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchEndCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchMove?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchMoveCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchStart?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchStartCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onPointerDown?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerDownCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerMove?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerMoveCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerUp?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerUpCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerCancel?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerCancelCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerEnter?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerLeave?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOver?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOverCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOut?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOutCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onGotPointerCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onGotPointerCaptureCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onLostPointerCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onLostPointerCaptureCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onScroll?: react.UIEventHandler<HTMLDivElement> | undefined;
    onScrollCapture?: react.UIEventHandler<HTMLDivElement> | undefined;
    onWheel?: react.WheelEventHandler<HTMLDivElement> | undefined;
    onWheelCapture?: react.WheelEventHandler<HTMLDivElement> | undefined;
    onAnimationStart?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationStartCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationEnd?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationEndCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationIteration?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationIterationCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onTransitionEnd?: react.TransitionEventHandler<HTMLDivElement> | undefined;
    onTransitionEndCapture?: react.TransitionEventHandler<HTMLDivElement> | undefined;
} & react.RefAttributes<HTMLElement>>;

interface MenuItemProps extends WithColors, WithDisabled, WithPadding {
    children: ((props: {
        closeMenu: () => void;
    }) => ReactNode) | ReactNode;
    /** @default false */
    disableAutoClose?: boolean;
    onToggle?: (event: MouseEvent<HTMLElement> | KeyboardEvent<HTMLElement>) => void;
}
declare function MenuItem(props: MenuItemProps): react_jsx_runtime.JSX.Element;
declare namespace MenuItem {
    var displayName: string;
}

declare function MenuSeparator(): react_jsx_runtime.JSX.Element;
declare namespace MenuSeparator {
    var displayName: string;
}

interface MenuTitleProps {
    children: ReactNode;
    style?: CSSProperties;
}
declare function MenuTitle({ children, ...rest }: MenuTitleProps): react_jsx_runtime.JSX.Element;
declare namespace MenuTitle {
    var displayName: string;
}

interface ButtonSplitKnownProps extends Pick<MenuProps, 'disabled' | 'onToggle'>, WithBlock, WithButtonSize, WithBusy, WithChildren, WithColorsDefaultBg, WithInvert {
    dataAttributes?: Record<`data-${string}`, StringOrNumber>;
    label: ReactNode;
    onClick: MouseEventHandler<HTMLButtonElement>;
    /** @default bottom-right */
    position?: PositionY;
}
type ButtonSplitProps = Simplify<ButtonSplitKnownProps>;
declare function ButtonSplit(props: ButtonSplitProps): react_jsx_runtime.JSX.Element;
declare namespace ButtonSplit {
    var displayName: string;
}

interface ButtonUnstyledKnownProps extends StyledProps, WithBorder, WithBusy, WithChildren, Pick<WithColors, 'color'>, WithDisplay, Pick<WithFlexBox, 'align' | 'justify'>, WithLayout, WithMargin, WithPadding, WithRadius, WithTextOptions {
    type?: ButtonHTMLAttributes<HTMLButtonElement>['type'];
}
type ButtonUnstyledProps = Simplify<OmitElementProps<HTMLButtonElement, ButtonUnstyledKnownProps>>;
declare const ButtonUnstyled: react.ForwardRefExoticComponent<{
    type?: ButtonHTMLAttributes<HTMLButtonElement>['type'];
    as?: react.ElementType | undefined;
    theme?: Theme | undefined;
    border?: boolean | BorderItemSide | BorderItem | BorderItem[] | undefined;
    busy?: boolean | undefined;
    children: react.ReactNode;
    color?: VariantWithTones | undefined;
    display?: csstype.Property.Display | undefined;
    justify?: csstype.Property.JustifyContent | undefined;
    align?: csstype.Property.AlignItems | undefined;
    opacity?: number | csstype.Property.Opacity | undefined;
    overflow?: csstype.Property.Overflow | undefined;
    pointerEvents?: csstype.Property.PointerEvents | undefined;
    textAlign?: csstype.Property.TextAlign | undefined;
    transform?: csstype.Property.Transform | undefined;
    transformOrigin?: csstype.Property.TransformOrigin<0 | (string & {})> | undefined;
    transition?: csstype.Property.Transition<string & {}> | undefined;
    height?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | undefined;
    maxHeight?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "none" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "-webkit-min-content" | "intrinsic" | undefined;
    maxWidth?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "none" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "-webkit-min-content" | "intrinsic" | undefined;
    minHeight?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "-webkit-min-content" | "intrinsic" | undefined;
    minWidth?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "-webkit-min-content" | "intrinsic" | "-webkit-fill-available" | "min-intrinsic" | undefined;
    width?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "intrinsic" | "min-intrinsic" | undefined;
    margin?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    mb?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    ml?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mr?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mt?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mx?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    my?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    padding?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    pb?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    pl?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    pr?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    pt?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    px?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    py?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    radius?: false | "sm" | "md" | "lg" | "xs" | "xl" | "xxs" | "round" | {
        bottom?: "sm" | "md" | "lg" | "xs" | "xl" | "xxs" | "round" | undefined;
        left?: "sm" | "md" | "lg" | "xs" | "xl" | "xxs" | "round" | undefined;
        right?: "sm" | "md" | "lg" | "xs" | "xl" | "xxs" | "round" | undefined;
        top?: "sm" | "md" | "lg" | "xs" | "xl" | "xxs" | "round" | undefined;
    } | undefined;
    bold?: boolean | undefined;
    italic?: boolean | undefined;
    letterSpacing?: csstype.Property.LetterSpacing<0 | (string & {})> | undefined;
    lineHeight?: csstype.Property.LineHeight<0 | (string & {})> | undefined;
    textDecoration?: csstype.Property.TextDecoration<0 | (string & {})> | undefined;
    textTransform?: csstype.Property.TextTransform | undefined;
    wordSpacing?: csstype.Property.WordSpacing<0 | (string & {})> | undefined;
    size?: "sm" | "md" | "lg" | "xs" | undefined;
    list?: string | undefined;
    download?: any;
    key?: react.Key | null | undefined;
    style?: react.CSSProperties | undefined;
    name?: string | undefined;
    hidden?: boolean | undefined;
    start?: number | undefined;
    wrap?: string | undefined;
    content?: string | undefined;
    readOnly?: boolean | undefined;
    low?: number | undefined;
    high?: number | undefined;
    cite?: string | undefined;
    data?: string | undefined;
    form?: string | undefined;
    label?: string | undefined;
    slot?: string | undefined;
    span?: number | undefined;
    summary?: string | undefined;
    title?: string | undefined;
    pattern?: string | undefined;
    prefix?: string | undefined;
    disabled?: boolean | undefined;
    value?: string | number | readonly string[] | undefined;
    accept?: string | undefined;
    acceptCharset?: string | undefined;
    action?: string | undefined;
    allowFullScreen?: boolean | undefined;
    allowTransparency?: boolean | undefined;
    alt?: string | undefined;
    async?: boolean | undefined;
    autoComplete?: string | undefined;
    autoPlay?: boolean | undefined;
    capture?: boolean | "user" | "environment" | undefined;
    cellPadding?: string | number | undefined;
    cellSpacing?: string | number | undefined;
    charSet?: string | undefined;
    challenge?: string | undefined;
    checked?: boolean | undefined;
    classID?: string | undefined;
    cols?: number | undefined;
    colSpan?: number | undefined;
    controls?: boolean | undefined;
    coords?: string | undefined;
    crossOrigin?: "" | "anonymous" | "use-credentials" | undefined;
    dateTime?: string | undefined;
    default?: boolean | undefined;
    defer?: boolean | undefined;
    encType?: string | undefined;
    formAction?: string | undefined;
    formEncType?: string | undefined;
    formMethod?: string | undefined;
    formNoValidate?: boolean | undefined;
    formTarget?: string | undefined;
    frameBorder?: string | number | undefined;
    headers?: string | undefined;
    href?: string | undefined;
    hrefLang?: string | undefined;
    htmlFor?: string | undefined;
    httpEquiv?: string | undefined;
    integrity?: string | undefined;
    keyParams?: string | undefined;
    keyType?: string | undefined;
    kind?: string | undefined;
    loop?: boolean | undefined;
    manifest?: string | undefined;
    marginHeight?: number | undefined;
    marginWidth?: number | undefined;
    max?: string | number | undefined;
    maxLength?: number | undefined;
    media?: string | undefined;
    mediaGroup?: string | undefined;
    method?: string | undefined;
    min?: string | number | undefined;
    minLength?: number | undefined;
    multiple?: boolean | undefined;
    muted?: boolean | undefined;
    noValidate?: boolean | undefined;
    open?: boolean | undefined;
    optimum?: number | undefined;
    placeholder?: string | undefined;
    playsInline?: boolean | undefined;
    poster?: string | undefined;
    preload?: string | undefined;
    required?: boolean | undefined;
    reversed?: boolean | undefined;
    rows?: number | undefined;
    rowSpan?: number | undefined;
    sandbox?: string | undefined;
    scope?: string | undefined;
    scoped?: boolean | undefined;
    scrolling?: string | undefined;
    seamless?: boolean | undefined;
    selected?: boolean | undefined;
    shape?: string | undefined;
    sizes?: string | undefined;
    src?: string | undefined;
    srcDoc?: string | undefined;
    srcLang?: string | undefined;
    srcSet?: string | undefined;
    step?: string | number | undefined;
    target?: string | undefined;
    useMap?: string | undefined;
    wmode?: string | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    autoFocus?: boolean | undefined;
    className?: string | undefined;
    contentEditable?: "inherit" | (boolean | "false" | "true") | "plaintext-only" | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "false" | "true") | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    nonce?: string | undefined;
    spellCheck?: (boolean | "false" | "true") | undefined;
    tabIndex?: number | undefined;
    translate?: "yes" | "no" | undefined;
    radioGroup?: string | undefined;
    role?: react.AriaRole | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    property?: string | undefined;
    rel?: string | undefined;
    resource?: string | undefined;
    rev?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "search" | "email" | "tel" | "text" | "none" | "url" | "numeric" | "decimal" | undefined;
    is?: string | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: (boolean | "false" | "true") | undefined;
    "aria-autocomplete"?: "list" | "none" | "inline" | "both" | undefined;
    "aria-braillelabel"?: string | undefined;
    "aria-brailleroledescription"?: string | undefined;
    "aria-busy"?: (boolean | "false" | "true") | undefined;
    "aria-checked"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colindextext"?: string | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "date" | "time" | "location" | "step" | "page" | "false" | "true" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-description"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: (boolean | "false" | "true") | undefined;
    "aria-dropeffect"?: "copy" | "link" | "none" | "move" | "execute" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: (boolean | "false" | "true") | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: (boolean | "false" | "true") | undefined;
    "aria-haspopup"?: boolean | "menu" | "tree" | "grid" | "dialog" | "listbox" | "false" | "true" | undefined;
    "aria-hidden"?: (boolean | "false" | "true") | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: (boolean | "false" | "true") | undefined;
    "aria-multiline"?: (boolean | "false" | "true") | undefined;
    "aria-multiselectable"?: (boolean | "false" | "true") | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-readonly"?: (boolean | "false" | "true") | undefined;
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    "aria-required"?: (boolean | "false" | "true") | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowindextext"?: string | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: (boolean | "false" | "true") | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    } | undefined;
    onCopy?: react.ClipboardEventHandler<HTMLButtonElement> | undefined;
    onCopyCapture?: react.ClipboardEventHandler<HTMLButtonElement> | undefined;
    onCut?: react.ClipboardEventHandler<HTMLButtonElement> | undefined;
    onCutCapture?: react.ClipboardEventHandler<HTMLButtonElement> | undefined;
    onPaste?: react.ClipboardEventHandler<HTMLButtonElement> | undefined;
    onPasteCapture?: react.ClipboardEventHandler<HTMLButtonElement> | undefined;
    onCompositionEnd?: react.CompositionEventHandler<HTMLButtonElement> | undefined;
    onCompositionEndCapture?: react.CompositionEventHandler<HTMLButtonElement> | undefined;
    onCompositionStart?: react.CompositionEventHandler<HTMLButtonElement> | undefined;
    onCompositionStartCapture?: react.CompositionEventHandler<HTMLButtonElement> | undefined;
    onCompositionUpdate?: react.CompositionEventHandler<HTMLButtonElement> | undefined;
    onCompositionUpdateCapture?: react.CompositionEventHandler<HTMLButtonElement> | undefined;
    onFocus?: react.FocusEventHandler<HTMLButtonElement> | undefined;
    onFocusCapture?: react.FocusEventHandler<HTMLButtonElement> | undefined;
    onBlur?: react.FocusEventHandler<HTMLButtonElement> | undefined;
    onBlurCapture?: react.FocusEventHandler<HTMLButtonElement> | undefined;
    onChange?: react.FormEventHandler<HTMLButtonElement> | undefined;
    onChangeCapture?: react.FormEventHandler<HTMLButtonElement> | undefined;
    onBeforeInput?: react.FormEventHandler<HTMLButtonElement> | undefined;
    onBeforeInputCapture?: react.FormEventHandler<HTMLButtonElement> | undefined;
    onInput?: react.FormEventHandler<HTMLButtonElement> | undefined;
    onInputCapture?: react.FormEventHandler<HTMLButtonElement> | undefined;
    onReset?: react.FormEventHandler<HTMLButtonElement> | undefined;
    onResetCapture?: react.FormEventHandler<HTMLButtonElement> | undefined;
    onSubmit?: react.FormEventHandler<HTMLButtonElement> | undefined;
    onSubmitCapture?: react.FormEventHandler<HTMLButtonElement> | undefined;
    onInvalid?: react.FormEventHandler<HTMLButtonElement> | undefined;
    onInvalidCapture?: react.FormEventHandler<HTMLButtonElement> | undefined;
    onLoad?: react.ReactEventHandler<HTMLButtonElement> | undefined;
    onLoadCapture?: react.ReactEventHandler<HTMLButtonElement> | undefined;
    onError?: react.ReactEventHandler<HTMLButtonElement> | undefined;
    onErrorCapture?: react.ReactEventHandler<HTMLButtonElement> | undefined;
    onKeyDown?: react.KeyboardEventHandler<HTMLButtonElement> | undefined;
    onKeyDownCapture?: react.KeyboardEventHandler<HTMLButtonElement> | undefined;
    onKeyPress?: react.KeyboardEventHandler<HTMLButtonElement> | undefined;
    onKeyPressCapture?: react.KeyboardEventHandler<HTMLButtonElement> | undefined;
    onKeyUp?: react.KeyboardEventHandler<HTMLButtonElement> | undefined;
    onKeyUpCapture?: react.KeyboardEventHandler<HTMLButtonElement> | undefined;
    onAbort?: react.ReactEventHandler<HTMLButtonElement> | undefined;
    onAbortCapture?: react.ReactEventHandler<HTMLButtonElement> | undefined;
    onCanPlay?: react.ReactEventHandler<HTMLButtonElement> | undefined;
    onCanPlayCapture?: react.ReactEventHandler<HTMLButtonElement> | undefined;
    onCanPlayThrough?: react.ReactEventHandler<HTMLButtonElement> | undefined;
    onCanPlayThroughCapture?: react.ReactEventHandler<HTMLButtonElement> | undefined;
    onDurationChange?: react.ReactEventHandler<HTMLButtonElement> | undefined;
    onDurationChangeCapture?: react.ReactEventHandler<HTMLButtonElement> | undefined;
    onEmptied?: react.ReactEventHandler<HTMLButtonElement> | undefined;
    onEmptiedCapture?: react.ReactEventHandler<HTMLButtonElement> | undefined;
    onEncrypted?: react.ReactEventHandler<HTMLButtonElement> | undefined;
    onEncryptedCapture?: react.ReactEventHandler<HTMLButtonElement> | undefined;
    onEnded?: react.ReactEventHandler<HTMLButtonElement> | undefined;
    onEndedCapture?: react.ReactEventHandler<HTMLButtonElement> | undefined;
    onLoadedData?: react.ReactEventHandler<HTMLButtonElement> | undefined;
    onLoadedDataCapture?: react.ReactEventHandler<HTMLButtonElement> | undefined;
    onLoadedMetadata?: react.ReactEventHandler<HTMLButtonElement> | undefined;
    onLoadedMetadataCapture?: react.ReactEventHandler<HTMLButtonElement> | undefined;
    onLoadStart?: react.ReactEventHandler<HTMLButtonElement> | undefined;
    onLoadStartCapture?: react.ReactEventHandler<HTMLButtonElement> | undefined;
    onPause?: react.ReactEventHandler<HTMLButtonElement> | undefined;
    onPauseCapture?: react.ReactEventHandler<HTMLButtonElement> | undefined;
    onPlay?: react.ReactEventHandler<HTMLButtonElement> | undefined;
    onPlayCapture?: react.ReactEventHandler<HTMLButtonElement> | undefined;
    onPlaying?: react.ReactEventHandler<HTMLButtonElement> | undefined;
    onPlayingCapture?: react.ReactEventHandler<HTMLButtonElement> | undefined;
    onProgress?: react.ReactEventHandler<HTMLButtonElement> | undefined;
    onProgressCapture?: react.ReactEventHandler<HTMLButtonElement> | undefined;
    onRateChange?: react.ReactEventHandler<HTMLButtonElement> | undefined;
    onRateChangeCapture?: react.ReactEventHandler<HTMLButtonElement> | undefined;
    onResize?: react.ReactEventHandler<HTMLButtonElement> | undefined;
    onResizeCapture?: react.ReactEventHandler<HTMLButtonElement> | undefined;
    onSeeked?: react.ReactEventHandler<HTMLButtonElement> | undefined;
    onSeekedCapture?: react.ReactEventHandler<HTMLButtonElement> | undefined;
    onSeeking?: react.ReactEventHandler<HTMLButtonElement> | undefined;
    onSeekingCapture?: react.ReactEventHandler<HTMLButtonElement> | undefined;
    onStalled?: react.ReactEventHandler<HTMLButtonElement> | undefined;
    onStalledCapture?: react.ReactEventHandler<HTMLButtonElement> | undefined;
    onSuspend?: react.ReactEventHandler<HTMLButtonElement> | undefined;
    onSuspendCapture?: react.ReactEventHandler<HTMLButtonElement> | undefined;
    onTimeUpdate?: react.ReactEventHandler<HTMLButtonElement> | undefined;
    onTimeUpdateCapture?: react.ReactEventHandler<HTMLButtonElement> | undefined;
    onVolumeChange?: react.ReactEventHandler<HTMLButtonElement> | undefined;
    onVolumeChangeCapture?: react.ReactEventHandler<HTMLButtonElement> | undefined;
    onWaiting?: react.ReactEventHandler<HTMLButtonElement> | undefined;
    onWaitingCapture?: react.ReactEventHandler<HTMLButtonElement> | undefined;
    onAuxClick?: react.MouseEventHandler<HTMLButtonElement> | undefined;
    onAuxClickCapture?: react.MouseEventHandler<HTMLButtonElement> | undefined;
    onClick?: react.MouseEventHandler<HTMLButtonElement> | undefined;
    onClickCapture?: react.MouseEventHandler<HTMLButtonElement> | undefined;
    onContextMenu?: react.MouseEventHandler<HTMLButtonElement> | undefined;
    onContextMenuCapture?: react.MouseEventHandler<HTMLButtonElement> | undefined;
    onDoubleClick?: react.MouseEventHandler<HTMLButtonElement> | undefined;
    onDoubleClickCapture?: react.MouseEventHandler<HTMLButtonElement> | undefined;
    onDrag?: react.DragEventHandler<HTMLButtonElement> | undefined;
    onDragCapture?: react.DragEventHandler<HTMLButtonElement> | undefined;
    onDragEnd?: react.DragEventHandler<HTMLButtonElement> | undefined;
    onDragEndCapture?: react.DragEventHandler<HTMLButtonElement> | undefined;
    onDragEnter?: react.DragEventHandler<HTMLButtonElement> | undefined;
    onDragEnterCapture?: react.DragEventHandler<HTMLButtonElement> | undefined;
    onDragExit?: react.DragEventHandler<HTMLButtonElement> | undefined;
    onDragExitCapture?: react.DragEventHandler<HTMLButtonElement> | undefined;
    onDragLeave?: react.DragEventHandler<HTMLButtonElement> | undefined;
    onDragLeaveCapture?: react.DragEventHandler<HTMLButtonElement> | undefined;
    onDragOver?: react.DragEventHandler<HTMLButtonElement> | undefined;
    onDragOverCapture?: react.DragEventHandler<HTMLButtonElement> | undefined;
    onDragStart?: react.DragEventHandler<HTMLButtonElement> | undefined;
    onDragStartCapture?: react.DragEventHandler<HTMLButtonElement> | undefined;
    onDrop?: react.DragEventHandler<HTMLButtonElement> | undefined;
    onDropCapture?: react.DragEventHandler<HTMLButtonElement> | undefined;
    onMouseDown?: react.MouseEventHandler<HTMLButtonElement> | undefined;
    onMouseDownCapture?: react.MouseEventHandler<HTMLButtonElement> | undefined;
    onMouseEnter?: react.MouseEventHandler<HTMLButtonElement> | undefined;
    onMouseLeave?: react.MouseEventHandler<HTMLButtonElement> | undefined;
    onMouseMove?: react.MouseEventHandler<HTMLButtonElement> | undefined;
    onMouseMoveCapture?: react.MouseEventHandler<HTMLButtonElement> | undefined;
    onMouseOut?: react.MouseEventHandler<HTMLButtonElement> | undefined;
    onMouseOutCapture?: react.MouseEventHandler<HTMLButtonElement> | undefined;
    onMouseOver?: react.MouseEventHandler<HTMLButtonElement> | undefined;
    onMouseOverCapture?: react.MouseEventHandler<HTMLButtonElement> | undefined;
    onMouseUp?: react.MouseEventHandler<HTMLButtonElement> | undefined;
    onMouseUpCapture?: react.MouseEventHandler<HTMLButtonElement> | undefined;
    onSelect?: react.ReactEventHandler<HTMLButtonElement> | undefined;
    onSelectCapture?: react.ReactEventHandler<HTMLButtonElement> | undefined;
    onTouchCancel?: react.TouchEventHandler<HTMLButtonElement> | undefined;
    onTouchCancelCapture?: react.TouchEventHandler<HTMLButtonElement> | undefined;
    onTouchEnd?: react.TouchEventHandler<HTMLButtonElement> | undefined;
    onTouchEndCapture?: react.TouchEventHandler<HTMLButtonElement> | undefined;
    onTouchMove?: react.TouchEventHandler<HTMLButtonElement> | undefined;
    onTouchMoveCapture?: react.TouchEventHandler<HTMLButtonElement> | undefined;
    onTouchStart?: react.TouchEventHandler<HTMLButtonElement> | undefined;
    onTouchStartCapture?: react.TouchEventHandler<HTMLButtonElement> | undefined;
    onPointerDown?: react.PointerEventHandler<HTMLButtonElement> | undefined;
    onPointerDownCapture?: react.PointerEventHandler<HTMLButtonElement> | undefined;
    onPointerMove?: react.PointerEventHandler<HTMLButtonElement> | undefined;
    onPointerMoveCapture?: react.PointerEventHandler<HTMLButtonElement> | undefined;
    onPointerUp?: react.PointerEventHandler<HTMLButtonElement> | undefined;
    onPointerUpCapture?: react.PointerEventHandler<HTMLButtonElement> | undefined;
    onPointerCancel?: react.PointerEventHandler<HTMLButtonElement> | undefined;
    onPointerCancelCapture?: react.PointerEventHandler<HTMLButtonElement> | undefined;
    onPointerEnter?: react.PointerEventHandler<HTMLButtonElement> | undefined;
    onPointerLeave?: react.PointerEventHandler<HTMLButtonElement> | undefined;
    onPointerOver?: react.PointerEventHandler<HTMLButtonElement> | undefined;
    onPointerOverCapture?: react.PointerEventHandler<HTMLButtonElement> | undefined;
    onPointerOut?: react.PointerEventHandler<HTMLButtonElement> | undefined;
    onPointerOutCapture?: react.PointerEventHandler<HTMLButtonElement> | undefined;
    onGotPointerCapture?: react.PointerEventHandler<HTMLButtonElement> | undefined;
    onGotPointerCaptureCapture?: react.PointerEventHandler<HTMLButtonElement> | undefined;
    onLostPointerCapture?: react.PointerEventHandler<HTMLButtonElement> | undefined;
    onLostPointerCaptureCapture?: react.PointerEventHandler<HTMLButtonElement> | undefined;
    onScroll?: react.UIEventHandler<HTMLButtonElement> | undefined;
    onScrollCapture?: react.UIEventHandler<HTMLButtonElement> | undefined;
    onWheel?: react.WheelEventHandler<HTMLButtonElement> | undefined;
    onWheelCapture?: react.WheelEventHandler<HTMLButtonElement> | undefined;
    onAnimationStart?: react.AnimationEventHandler<HTMLButtonElement> | undefined;
    onAnimationStartCapture?: react.AnimationEventHandler<HTMLButtonElement> | undefined;
    onAnimationEnd?: react.AnimationEventHandler<HTMLButtonElement> | undefined;
    onAnimationEndCapture?: react.AnimationEventHandler<HTMLButtonElement> | undefined;
    onAnimationIteration?: react.AnimationEventHandler<HTMLButtonElement> | undefined;
    onAnimationIterationCapture?: react.AnimationEventHandler<HTMLButtonElement> | undefined;
    onTransitionEnd?: react.TransitionEventHandler<HTMLButtonElement> | undefined;
    onTransitionEndCapture?: react.TransitionEventHandler<HTMLButtonElement> | undefined;
} & react.RefAttributes<HTMLButtonElement>>;

interface CheckboxAndRadioKnownProps extends StyledProps, WithAccent, WithBorderless, WithComponentSize, WithMargin {
    /** @default center */
    align?: WithFlexBox['align'];
    name: string;
    onChange?: ChangeEventHandler<HTMLInputElement>;
}
type CheckboxProps = Simplify<OmitElementProps<HTMLInputElement, CheckboxAndRadioKnownProps & CheckboxItem>>;
type RadioProps = Simplify<OmitElementProps<HTMLInputElement, CheckboxAndRadioKnownProps & RadioItem>>;

declare const Checkbox: react.ForwardRefExoticComponent<{
    align?: csstype.Property.AlignItems | undefined;
    name: string;
    onChange?: react.ChangeEventHandler<HTMLInputElement> | undefined;
    as?: react.ElementType | undefined;
    theme?: Theme | undefined;
    accent?: VariantWithTones | undefined;
    borderless?: boolean | undefined;
    size?: "sm" | "md" | "lg" | undefined;
    margin?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    mb?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    ml?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mr?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mt?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mx?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    my?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    label?: react.ReactNode;
    disabled?: boolean | undefined;
    list?: string | undefined;
    download?: any;
    key?: react.Key | null | undefined;
    style?: react.CSSProperties | undefined;
    color?: string | undefined;
    hidden?: boolean | undefined;
    start?: number | undefined;
    height?: string | number | undefined;
    width?: string | number | undefined;
    wrap?: string | undefined;
    content?: string | undefined;
    readOnly?: boolean | undefined;
    low?: number | undefined;
    high?: number | undefined;
    cite?: string | undefined;
    data?: string | undefined;
    form?: string | undefined;
    slot?: string | undefined;
    span?: number | undefined;
    summary?: string | undefined;
    title?: string | undefined;
    pattern?: string | undefined;
    prefix?: string | undefined;
    type?: string | undefined;
    value?: string | number | readonly string[] | undefined;
    accept?: string | undefined;
    acceptCharset?: string | undefined;
    action?: string | undefined;
    allowFullScreen?: boolean | undefined;
    allowTransparency?: boolean | undefined;
    alt?: string | undefined;
    async?: boolean | undefined;
    autoComplete?: string | undefined;
    autoPlay?: boolean | undefined;
    capture?: boolean | "user" | "environment" | undefined;
    cellPadding?: string | number | undefined;
    cellSpacing?: string | number | undefined;
    charSet?: string | undefined;
    challenge?: string | undefined;
    checked?: boolean | undefined;
    classID?: string | undefined;
    cols?: number | undefined;
    colSpan?: number | undefined;
    controls?: boolean | undefined;
    coords?: string | undefined;
    crossOrigin?: "" | "anonymous" | "use-credentials" | undefined;
    dateTime?: string | undefined;
    default?: boolean | undefined;
    defer?: boolean | undefined;
    encType?: string | undefined;
    formAction?: string | undefined;
    formEncType?: string | undefined;
    formMethod?: string | undefined;
    formNoValidate?: boolean | undefined;
    formTarget?: string | undefined;
    frameBorder?: string | number | undefined;
    headers?: string | undefined;
    href?: string | undefined;
    hrefLang?: string | undefined;
    htmlFor?: string | undefined;
    httpEquiv?: string | undefined;
    integrity?: string | undefined;
    keyParams?: string | undefined;
    keyType?: string | undefined;
    kind?: string | undefined;
    loop?: boolean | undefined;
    manifest?: string | undefined;
    marginHeight?: number | undefined;
    marginWidth?: number | undefined;
    max?: string | number | undefined;
    maxLength?: number | undefined;
    media?: string | undefined;
    mediaGroup?: string | undefined;
    method?: string | undefined;
    min?: string | number | undefined;
    minLength?: number | undefined;
    multiple?: boolean | undefined;
    muted?: boolean | undefined;
    noValidate?: boolean | undefined;
    open?: boolean | undefined;
    optimum?: number | undefined;
    placeholder?: string | undefined;
    playsInline?: boolean | undefined;
    poster?: string | undefined;
    preload?: string | undefined;
    required?: boolean | undefined;
    reversed?: boolean | undefined;
    rows?: number | undefined;
    rowSpan?: number | undefined;
    sandbox?: string | undefined;
    scope?: string | undefined;
    scoped?: boolean | undefined;
    scrolling?: string | undefined;
    seamless?: boolean | undefined;
    selected?: boolean | undefined;
    shape?: string | undefined;
    sizes?: string | undefined;
    src?: string | undefined;
    srcDoc?: string | undefined;
    srcLang?: string | undefined;
    srcSet?: string | undefined;
    step?: string | number | undefined;
    target?: string | undefined;
    useMap?: string | undefined;
    wmode?: string | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    autoFocus?: boolean | undefined;
    className?: string | undefined;
    contentEditable?: "inherit" | (boolean | "false" | "true") | "plaintext-only" | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "false" | "true") | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    nonce?: string | undefined;
    spellCheck?: (boolean | "false" | "true") | undefined;
    tabIndex?: number | undefined;
    translate?: "yes" | "no" | undefined;
    radioGroup?: string | undefined;
    role?: react.AriaRole | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    property?: string | undefined;
    rel?: string | undefined;
    resource?: string | undefined;
    rev?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "search" | "email" | "tel" | "text" | "none" | "url" | "numeric" | "decimal" | undefined;
    is?: string | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: (boolean | "false" | "true") | undefined;
    "aria-autocomplete"?: "list" | "none" | "inline" | "both" | undefined;
    "aria-braillelabel"?: string | undefined;
    "aria-brailleroledescription"?: string | undefined;
    "aria-busy"?: (boolean | "false" | "true") | undefined;
    "aria-checked"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colindextext"?: string | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "date" | "time" | "location" | "step" | "page" | "false" | "true" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-description"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: (boolean | "false" | "true") | undefined;
    "aria-dropeffect"?: "copy" | "link" | "none" | "move" | "execute" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: (boolean | "false" | "true") | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: (boolean | "false" | "true") | undefined;
    "aria-haspopup"?: boolean | "menu" | "tree" | "grid" | "dialog" | "listbox" | "false" | "true" | undefined;
    "aria-hidden"?: (boolean | "false" | "true") | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: (boolean | "false" | "true") | undefined;
    "aria-multiline"?: (boolean | "false" | "true") | undefined;
    "aria-multiselectable"?: (boolean | "false" | "true") | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-readonly"?: (boolean | "false" | "true") | undefined;
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    "aria-required"?: (boolean | "false" | "true") | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowindextext"?: string | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: (boolean | "false" | "true") | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    children?: react.ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    } | undefined;
    onCopy?: react.ClipboardEventHandler<HTMLInputElement> | undefined;
    onCopyCapture?: react.ClipboardEventHandler<HTMLInputElement> | undefined;
    onCut?: react.ClipboardEventHandler<HTMLInputElement> | undefined;
    onCutCapture?: react.ClipboardEventHandler<HTMLInputElement> | undefined;
    onPaste?: react.ClipboardEventHandler<HTMLInputElement> | undefined;
    onPasteCapture?: react.ClipboardEventHandler<HTMLInputElement> | undefined;
    onCompositionEnd?: react.CompositionEventHandler<HTMLInputElement> | undefined;
    onCompositionEndCapture?: react.CompositionEventHandler<HTMLInputElement> | undefined;
    onCompositionStart?: react.CompositionEventHandler<HTMLInputElement> | undefined;
    onCompositionStartCapture?: react.CompositionEventHandler<HTMLInputElement> | undefined;
    onCompositionUpdate?: react.CompositionEventHandler<HTMLInputElement> | undefined;
    onCompositionUpdateCapture?: react.CompositionEventHandler<HTMLInputElement> | undefined;
    onFocus?: react.FocusEventHandler<HTMLInputElement> | undefined;
    onFocusCapture?: react.FocusEventHandler<HTMLInputElement> | undefined;
    onBlur?: react.FocusEventHandler<HTMLInputElement> | undefined;
    onBlurCapture?: react.FocusEventHandler<HTMLInputElement> | undefined;
    onChangeCapture?: react.FormEventHandler<HTMLInputElement> | undefined;
    onBeforeInput?: react.FormEventHandler<HTMLInputElement> | undefined;
    onBeforeInputCapture?: react.FormEventHandler<HTMLInputElement> | undefined;
    onInput?: react.FormEventHandler<HTMLInputElement> | undefined;
    onInputCapture?: react.FormEventHandler<HTMLInputElement> | undefined;
    onReset?: react.FormEventHandler<HTMLInputElement> | undefined;
    onResetCapture?: react.FormEventHandler<HTMLInputElement> | undefined;
    onSubmit?: react.FormEventHandler<HTMLInputElement> | undefined;
    onSubmitCapture?: react.FormEventHandler<HTMLInputElement> | undefined;
    onInvalid?: react.FormEventHandler<HTMLInputElement> | undefined;
    onInvalidCapture?: react.FormEventHandler<HTMLInputElement> | undefined;
    onLoad?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onLoadCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onError?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onErrorCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onKeyDown?: react.KeyboardEventHandler<HTMLInputElement> | undefined;
    onKeyDownCapture?: react.KeyboardEventHandler<HTMLInputElement> | undefined;
    onKeyPress?: react.KeyboardEventHandler<HTMLInputElement> | undefined;
    onKeyPressCapture?: react.KeyboardEventHandler<HTMLInputElement> | undefined;
    onKeyUp?: react.KeyboardEventHandler<HTMLInputElement> | undefined;
    onKeyUpCapture?: react.KeyboardEventHandler<HTMLInputElement> | undefined;
    onAbort?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onAbortCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onCanPlay?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onCanPlayCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onCanPlayThrough?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onCanPlayThroughCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onDurationChange?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onDurationChangeCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onEmptied?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onEmptiedCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onEncrypted?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onEncryptedCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onEnded?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onEndedCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onLoadedData?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onLoadedDataCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onLoadedMetadata?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onLoadedMetadataCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onLoadStart?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onLoadStartCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onPause?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onPauseCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onPlay?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onPlayCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onPlaying?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onPlayingCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onProgress?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onProgressCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onRateChange?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onRateChangeCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onResize?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onResizeCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onSeeked?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onSeekedCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onSeeking?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onSeekingCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onStalled?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onStalledCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onSuspend?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onSuspendCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onTimeUpdate?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onTimeUpdateCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onVolumeChange?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onVolumeChangeCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onWaiting?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onWaitingCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onAuxClick?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onAuxClickCapture?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onClick?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onClickCapture?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onContextMenu?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onContextMenuCapture?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onDoubleClick?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onDoubleClickCapture?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onDrag?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragCapture?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragEnd?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragEndCapture?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragEnter?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragEnterCapture?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragExit?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragExitCapture?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragLeave?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragLeaveCapture?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragOver?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragOverCapture?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragStart?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragStartCapture?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDrop?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDropCapture?: react.DragEventHandler<HTMLInputElement> | undefined;
    onMouseDown?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseDownCapture?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseEnter?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseLeave?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseMove?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseMoveCapture?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseOut?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseOutCapture?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseOver?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseOverCapture?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseUp?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseUpCapture?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onSelect?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onSelectCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onTouchCancel?: react.TouchEventHandler<HTMLInputElement> | undefined;
    onTouchCancelCapture?: react.TouchEventHandler<HTMLInputElement> | undefined;
    onTouchEnd?: react.TouchEventHandler<HTMLInputElement> | undefined;
    onTouchEndCapture?: react.TouchEventHandler<HTMLInputElement> | undefined;
    onTouchMove?: react.TouchEventHandler<HTMLInputElement> | undefined;
    onTouchMoveCapture?: react.TouchEventHandler<HTMLInputElement> | undefined;
    onTouchStart?: react.TouchEventHandler<HTMLInputElement> | undefined;
    onTouchStartCapture?: react.TouchEventHandler<HTMLInputElement> | undefined;
    onPointerDown?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerDownCapture?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerMove?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerMoveCapture?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerUp?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerUpCapture?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerCancel?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerCancelCapture?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerEnter?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerLeave?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerOver?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerOverCapture?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerOut?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerOutCapture?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onGotPointerCapture?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onGotPointerCaptureCapture?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onLostPointerCapture?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onLostPointerCaptureCapture?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onScroll?: react.UIEventHandler<HTMLInputElement> | undefined;
    onScrollCapture?: react.UIEventHandler<HTMLInputElement> | undefined;
    onWheel?: react.WheelEventHandler<HTMLInputElement> | undefined;
    onWheelCapture?: react.WheelEventHandler<HTMLInputElement> | undefined;
    onAnimationStart?: react.AnimationEventHandler<HTMLInputElement> | undefined;
    onAnimationStartCapture?: react.AnimationEventHandler<HTMLInputElement> | undefined;
    onAnimationEnd?: react.AnimationEventHandler<HTMLInputElement> | undefined;
    onAnimationEndCapture?: react.AnimationEventHandler<HTMLInputElement> | undefined;
    onAnimationIteration?: react.AnimationEventHandler<HTMLInputElement> | undefined;
    onAnimationIterationCapture?: react.AnimationEventHandler<HTMLInputElement> | undefined;
    onTransitionEnd?: react.TransitionEventHandler<HTMLInputElement> | undefined;
    onTransitionEndCapture?: react.TransitionEventHandler<HTMLInputElement> | undefined;
} & react.RefAttributes<HTMLInputElement>>;

/**
 * Use the RadioGroup component instead of this.
 * RadioGroup accepts an `items` prop that render this component in a group and is responsible for managing state and interactions.
 */
declare const Radio: react.ForwardRefExoticComponent<{
    align?: csstype.Property.AlignItems | undefined;
    name: string;
    onChange?: react.ChangeEventHandler<HTMLInputElement> | undefined;
    as?: react.ElementType | undefined;
    theme?: Theme | undefined;
    accent?: VariantWithTones | undefined;
    borderless?: boolean | undefined;
    size?: "sm" | "md" | "lg" | undefined;
    margin?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    mb?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    ml?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mr?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mt?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mx?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    my?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    label?: react.ReactNode;
    value: _gilbarbara_types.StringOrNumber;
    disabled?: boolean | undefined;
    list?: string | undefined;
    download?: any;
    key?: react.Key | null | undefined;
    style?: react.CSSProperties | undefined;
    color?: string | undefined;
    hidden?: boolean | undefined;
    start?: number | undefined;
    height?: string | number | undefined;
    width?: string | number | undefined;
    wrap?: string | undefined;
    content?: string | undefined;
    readOnly?: boolean | undefined;
    low?: number | undefined;
    high?: number | undefined;
    cite?: string | undefined;
    data?: string | undefined;
    form?: string | undefined;
    slot?: string | undefined;
    span?: number | undefined;
    summary?: string | undefined;
    title?: string | undefined;
    pattern?: string | undefined;
    prefix?: string | undefined;
    type?: string | undefined;
    accept?: string | undefined;
    acceptCharset?: string | undefined;
    action?: string | undefined;
    allowFullScreen?: boolean | undefined;
    allowTransparency?: boolean | undefined;
    alt?: string | undefined;
    async?: boolean | undefined;
    autoComplete?: string | undefined;
    autoPlay?: boolean | undefined;
    capture?: boolean | "user" | "environment" | undefined;
    cellPadding?: string | number | undefined;
    cellSpacing?: string | number | undefined;
    charSet?: string | undefined;
    challenge?: string | undefined;
    checked?: boolean | undefined;
    classID?: string | undefined;
    cols?: number | undefined;
    colSpan?: number | undefined;
    controls?: boolean | undefined;
    coords?: string | undefined;
    crossOrigin?: "" | "anonymous" | "use-credentials" | undefined;
    dateTime?: string | undefined;
    default?: boolean | undefined;
    defer?: boolean | undefined;
    encType?: string | undefined;
    formAction?: string | undefined;
    formEncType?: string | undefined;
    formMethod?: string | undefined;
    formNoValidate?: boolean | undefined;
    formTarget?: string | undefined;
    frameBorder?: string | number | undefined;
    headers?: string | undefined;
    href?: string | undefined;
    hrefLang?: string | undefined;
    htmlFor?: string | undefined;
    httpEquiv?: string | undefined;
    integrity?: string | undefined;
    keyParams?: string | undefined;
    keyType?: string | undefined;
    kind?: string | undefined;
    loop?: boolean | undefined;
    manifest?: string | undefined;
    marginHeight?: number | undefined;
    marginWidth?: number | undefined;
    max?: string | number | undefined;
    maxLength?: number | undefined;
    media?: string | undefined;
    mediaGroup?: string | undefined;
    method?: string | undefined;
    min?: string | number | undefined;
    minLength?: number | undefined;
    multiple?: boolean | undefined;
    muted?: boolean | undefined;
    noValidate?: boolean | undefined;
    open?: boolean | undefined;
    optimum?: number | undefined;
    placeholder?: string | undefined;
    playsInline?: boolean | undefined;
    poster?: string | undefined;
    preload?: string | undefined;
    required?: boolean | undefined;
    reversed?: boolean | undefined;
    rows?: number | undefined;
    rowSpan?: number | undefined;
    sandbox?: string | undefined;
    scope?: string | undefined;
    scoped?: boolean | undefined;
    scrolling?: string | undefined;
    seamless?: boolean | undefined;
    selected?: boolean | undefined;
    shape?: string | undefined;
    sizes?: string | undefined;
    src?: string | undefined;
    srcDoc?: string | undefined;
    srcLang?: string | undefined;
    srcSet?: string | undefined;
    step?: string | number | undefined;
    target?: string | undefined;
    useMap?: string | undefined;
    wmode?: string | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    autoFocus?: boolean | undefined;
    className?: string | undefined;
    contentEditable?: "inherit" | (boolean | "false" | "true") | "plaintext-only" | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "false" | "true") | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    nonce?: string | undefined;
    spellCheck?: (boolean | "false" | "true") | undefined;
    tabIndex?: number | undefined;
    translate?: "yes" | "no" | undefined;
    radioGroup?: string | undefined;
    role?: react.AriaRole | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    property?: string | undefined;
    rel?: string | undefined;
    resource?: string | undefined;
    rev?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "search" | "email" | "tel" | "text" | "none" | "url" | "numeric" | "decimal" | undefined;
    is?: string | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: (boolean | "false" | "true") | undefined;
    "aria-autocomplete"?: "list" | "none" | "inline" | "both" | undefined;
    "aria-braillelabel"?: string | undefined;
    "aria-brailleroledescription"?: string | undefined;
    "aria-busy"?: (boolean | "false" | "true") | undefined;
    "aria-checked"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colindextext"?: string | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "date" | "time" | "location" | "step" | "page" | "false" | "true" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-description"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: (boolean | "false" | "true") | undefined;
    "aria-dropeffect"?: "copy" | "link" | "none" | "move" | "execute" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: (boolean | "false" | "true") | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: (boolean | "false" | "true") | undefined;
    "aria-haspopup"?: boolean | "menu" | "tree" | "grid" | "dialog" | "listbox" | "false" | "true" | undefined;
    "aria-hidden"?: (boolean | "false" | "true") | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: (boolean | "false" | "true") | undefined;
    "aria-multiline"?: (boolean | "false" | "true") | undefined;
    "aria-multiselectable"?: (boolean | "false" | "true") | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-readonly"?: (boolean | "false" | "true") | undefined;
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    "aria-required"?: (boolean | "false" | "true") | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowindextext"?: string | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: (boolean | "false" | "true") | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    children?: react.ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    } | undefined;
    onCopy?: react.ClipboardEventHandler<HTMLInputElement> | undefined;
    onCopyCapture?: react.ClipboardEventHandler<HTMLInputElement> | undefined;
    onCut?: react.ClipboardEventHandler<HTMLInputElement> | undefined;
    onCutCapture?: react.ClipboardEventHandler<HTMLInputElement> | undefined;
    onPaste?: react.ClipboardEventHandler<HTMLInputElement> | undefined;
    onPasteCapture?: react.ClipboardEventHandler<HTMLInputElement> | undefined;
    onCompositionEnd?: react.CompositionEventHandler<HTMLInputElement> | undefined;
    onCompositionEndCapture?: react.CompositionEventHandler<HTMLInputElement> | undefined;
    onCompositionStart?: react.CompositionEventHandler<HTMLInputElement> | undefined;
    onCompositionStartCapture?: react.CompositionEventHandler<HTMLInputElement> | undefined;
    onCompositionUpdate?: react.CompositionEventHandler<HTMLInputElement> | undefined;
    onCompositionUpdateCapture?: react.CompositionEventHandler<HTMLInputElement> | undefined;
    onFocus?: react.FocusEventHandler<HTMLInputElement> | undefined;
    onFocusCapture?: react.FocusEventHandler<HTMLInputElement> | undefined;
    onBlur?: react.FocusEventHandler<HTMLInputElement> | undefined;
    onBlurCapture?: react.FocusEventHandler<HTMLInputElement> | undefined;
    onChangeCapture?: react.FormEventHandler<HTMLInputElement> | undefined;
    onBeforeInput?: react.FormEventHandler<HTMLInputElement> | undefined;
    onBeforeInputCapture?: react.FormEventHandler<HTMLInputElement> | undefined;
    onInput?: react.FormEventHandler<HTMLInputElement> | undefined;
    onInputCapture?: react.FormEventHandler<HTMLInputElement> | undefined;
    onReset?: react.FormEventHandler<HTMLInputElement> | undefined;
    onResetCapture?: react.FormEventHandler<HTMLInputElement> | undefined;
    onSubmit?: react.FormEventHandler<HTMLInputElement> | undefined;
    onSubmitCapture?: react.FormEventHandler<HTMLInputElement> | undefined;
    onInvalid?: react.FormEventHandler<HTMLInputElement> | undefined;
    onInvalidCapture?: react.FormEventHandler<HTMLInputElement> | undefined;
    onLoad?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onLoadCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onError?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onErrorCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onKeyDown?: react.KeyboardEventHandler<HTMLInputElement> | undefined;
    onKeyDownCapture?: react.KeyboardEventHandler<HTMLInputElement> | undefined;
    onKeyPress?: react.KeyboardEventHandler<HTMLInputElement> | undefined;
    onKeyPressCapture?: react.KeyboardEventHandler<HTMLInputElement> | undefined;
    onKeyUp?: react.KeyboardEventHandler<HTMLInputElement> | undefined;
    onKeyUpCapture?: react.KeyboardEventHandler<HTMLInputElement> | undefined;
    onAbort?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onAbortCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onCanPlay?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onCanPlayCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onCanPlayThrough?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onCanPlayThroughCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onDurationChange?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onDurationChangeCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onEmptied?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onEmptiedCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onEncrypted?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onEncryptedCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onEnded?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onEndedCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onLoadedData?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onLoadedDataCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onLoadedMetadata?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onLoadedMetadataCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onLoadStart?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onLoadStartCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onPause?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onPauseCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onPlay?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onPlayCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onPlaying?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onPlayingCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onProgress?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onProgressCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onRateChange?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onRateChangeCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onResize?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onResizeCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onSeeked?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onSeekedCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onSeeking?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onSeekingCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onStalled?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onStalledCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onSuspend?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onSuspendCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onTimeUpdate?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onTimeUpdateCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onVolumeChange?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onVolumeChangeCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onWaiting?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onWaitingCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onAuxClick?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onAuxClickCapture?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onClick?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onClickCapture?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onContextMenu?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onContextMenuCapture?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onDoubleClick?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onDoubleClickCapture?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onDrag?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragCapture?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragEnd?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragEndCapture?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragEnter?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragEnterCapture?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragExit?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragExitCapture?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragLeave?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragLeaveCapture?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragOver?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragOverCapture?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragStart?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragStartCapture?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDrop?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDropCapture?: react.DragEventHandler<HTMLInputElement> | undefined;
    onMouseDown?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseDownCapture?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseEnter?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseLeave?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseMove?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseMoveCapture?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseOut?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseOutCapture?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseOver?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseOverCapture?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseUp?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseUpCapture?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onSelect?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onSelectCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onTouchCancel?: react.TouchEventHandler<HTMLInputElement> | undefined;
    onTouchCancelCapture?: react.TouchEventHandler<HTMLInputElement> | undefined;
    onTouchEnd?: react.TouchEventHandler<HTMLInputElement> | undefined;
    onTouchEndCapture?: react.TouchEventHandler<HTMLInputElement> | undefined;
    onTouchMove?: react.TouchEventHandler<HTMLInputElement> | undefined;
    onTouchMoveCapture?: react.TouchEventHandler<HTMLInputElement> | undefined;
    onTouchStart?: react.TouchEventHandler<HTMLInputElement> | undefined;
    onTouchStartCapture?: react.TouchEventHandler<HTMLInputElement> | undefined;
    onPointerDown?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerDownCapture?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerMove?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerMoveCapture?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerUp?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerUpCapture?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerCancel?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerCancelCapture?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerEnter?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerLeave?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerOver?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerOverCapture?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerOut?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerOutCapture?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onGotPointerCapture?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onGotPointerCaptureCapture?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onLostPointerCapture?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onLostPointerCaptureCapture?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onScroll?: react.UIEventHandler<HTMLInputElement> | undefined;
    onScrollCapture?: react.UIEventHandler<HTMLInputElement> | undefined;
    onWheel?: react.WheelEventHandler<HTMLInputElement> | undefined;
    onWheelCapture?: react.WheelEventHandler<HTMLInputElement> | undefined;
    onAnimationStart?: react.AnimationEventHandler<HTMLInputElement> | undefined;
    onAnimationStartCapture?: react.AnimationEventHandler<HTMLInputElement> | undefined;
    onAnimationEnd?: react.AnimationEventHandler<HTMLInputElement> | undefined;
    onAnimationEndCapture?: react.AnimationEventHandler<HTMLInputElement> | undefined;
    onAnimationIteration?: react.AnimationEventHandler<HTMLInputElement> | undefined;
    onAnimationIterationCapture?: react.AnimationEventHandler<HTMLInputElement> | undefined;
    onTransitionEnd?: react.TransitionEventHandler<HTMLInputElement> | undefined;
    onTransitionEndCapture?: react.TransitionEventHandler<HTMLInputElement> | undefined;
} & react.RefAttributes<HTMLInputElement>>;

interface ClickOutsideKnownProps extends WithChildren, WithLayout {
    active: boolean;
    display?: ValueOf<typeof DISPLAY>;
    onClick: () => void;
}
type ClickOutsideProps = Simplify<ClickOutsideKnownProps>;
declare const DISPLAY: {
    readonly BLOCK: "block";
    readonly FLEX: "flex";
    readonly INLINE: "inline";
    readonly INLINE_BLOCK: "inline-block";
    readonly CONTENTS: "contents";
};
declare function ClickOutsideComponent(props: ClickOutsideProps): react_jsx_runtime.JSX.Element;
declare const ClickOutside: react.MemoExoticComponent<typeof ClickOutsideComponent>;

interface CollapseKnownProps extends WithMargin {
    /**
     * The duration of the animation when the content is sliding down in seconds.
     * @default 0.3
     */
    animationEnterDuration?: number;
    /**
     * The duration of the animation when the content is sliding up in seconds.
     * @default 0.3
     */
    animationExitDuration?: number;
    children: ReactNode;
    defaultOpen?: boolean;
    hideToggle?: boolean;
    /**
     * The height you want the content in its collapsed state.
     * @default 0
     */
    initialHeight?: StringOrNumber;
    /**
     * The height you want the content in its expanded state.
     */
    maxHeight?: StringOrNumber;
    onToggle?: (isOpen: boolean) => void;
    open?: boolean;
    title?: ReactNode;
}
type CollapseProps = Simplify<CollapseKnownProps>;
declare function Collapse(props: CollapseProps): react_jsx_runtime.JSX.Element;
declare namespace Collapse {
    var displayName: string;
}

interface ComponentWrapperKnownProps extends StyledProps, WithChildren, WithMargin {
    prefix?: Icons | ReactElement;
    /**
     * A single value for both or [width,height]
     * @default 32
     */
    size?: StringOrNumber | [StringOrNumber, StringOrNumber];
    style?: CSSProperties;
    suffix?: Icons | ReactElement;
    /** @default 100% */
    width?: StringOrNumber;
}
type ComponentWrapperProps = Simplify<ComponentWrapperKnownProps>;
declare const ComponentWrapper: react.ForwardRefExoticComponent<{
    prefix?: "align-bottom" | "align-center" | "align-left" | "align-middle" | "align-right" | "align-top" | "apple-watch" | "arrange-back" | "arrange-front" | "attachment" | "backspace" | "band-aid" | "battery" | "battery-empty" | "battery-full" | "board" | "border-all" | "border-bottom" | "border-left" | "border-right" | "border-style-dashed" | "border-style-dotted" | "border-style-solid" | "border-top" | "bot" | "bowl" | "boy" | "briefcase" | "browse" | "browser" | "calculator" | "calendar-dates" | "calendar-due" | "calendar-next" | "calendar-today" | "calendar" | "calibrate" | "captions" | "card-clubs" | "card-diamonds" | "card-hearts" | "card-spades" | "carousel" | "cast" | "chart" | "clapper-board" | "clipboard" | "code" | "code-slash" | "collage" | "color-bucket" | "color-picker" | "community" | "components" | "compress-left" | "compress-right" | "compress-v" | "compress" | "controller" | "copy" | "corner-double-down-left" | "corner-double-down-right" | "corner-double-left-down" | "corner-double-left-up" | "corner-double-right-down" | "corner-double-right-up" | "corner-double-up-left" | "corner-double-up-right" | "corner-down-left" | "corner-down-right" | "corner-left-down" | "corner-left-up" | "corner-right-down" | "corner-right-up" | "corner-up-left" | "corner-up-right" | "credit-card" | "crop" | "dark-mode" | "desktop" | "details-less" | "details-more" | "dialpad" | "dice-1" | "dice-2" | "dice-3" | "dice-4" | "dice-5" | "dice-6" | "display-flex" | "display-fullwidth" | "display-grid" | "display-spacing" | "distribute-horizontal" | "distribute-vertical" | "dock-bottom" | "dock-left" | "dock-right" | "dock-window" | "drive" | "drop-invert" | "drop-opacity" | "drop" | "duplicate" | "edit-black-point" | "edit-contrast" | "edit-exposure" | "edit-fade" | "edit-flip-h" | "edit-flip-v" | "edit-highlight" | "edit-markup" | "edit-mask" | "edit-noise" | "edit-shadows" | "edit-straight" | "edit-unmask" | "enter" | "erase" | "euro" | "export" | "extension-add" | "extension-remove" | "extension" | "external" | "feed" | "file-add" | "file-document" | "file-remove" | "file" | "film" | "filters" | "folder-add" | "folder-remove" | "folder" | "font-height" | "font-spacing" | "format-center" | "format-color" | "format-heading" | "format-indent-decrease" | "format-indent-increase" | "format-italic" | "format-justify" | "format-left" | "format-line-height" | "format-right" | "format-separator" | "format-slash" | "format-text" | "format-underline" | "format-uppercase" | "games" | "gender-female" | "gender-male" | "girl" | "glass-alt" | "home-screen" | "image" | "import" | "inpicture" | "insert-after-o" | "insert-after-r" | "insert-after" | "insert-before-o" | "insert-before-r" | "insert-before" | "insights" | "internal" | "laptop" | "list-tree" | "list" | "lock-unlock" | "lock" | "log-off" | "loupe" | "magnet" | "mail-forward" | "mail-reply" | "maximize-alt" | "maximize" | "menu-boxed" | "menu-grid-o" | "menu-grid-r" | "menu-left-alt" | "menu-left" | "menu-motion" | "menu-right-alt" | "menu-right" | "menu" | "merge-horizontal" | "merge-vertical" | "mini-player" | "minimize-alt" | "minimize" | "moon" | "mouse" | "move-down" | "move-left" | "move-right" | "move-up" | "notifications" | "pacman" | "path-back" | "path-crop" | "path-divide" | "path-exclude" | "path-front" | "path-intersect" | "path-outline" | "path-trim" | "path-unite" | "performance" | "piano" | "pill" | "plug" | "pokemon" | "poll" | "printer" | "profile" | "pull-clear" | "push-chevron-down-o" | "circle" | "push-chevron-down-r" | "square" | "push-chevron-down" | "push-chevron-left-o" | "push-chevron-left-r" | "push-chevron-left" | "push-chevron-right-o" | "push-chevron-right-r" | "push-chevron-right" | "push-chevron-up-o" | "push-chevron-up-r" | "push-chevron-up" | "push-down" | "push-left" | "push-right" | "push-up" | "qr" | "quote-o" | "quote" | "radio-check" | "radio-checked" | "ratio" | "redo" | "remove-r" | "remove" | "rename" | "reorder" | "row-first" | "row-last" | "ruler" | "scan" | "screen-mirror" | "screen-wide" | "screen" | "scroll-h" | "scroll-v" | "search-found" | "search-loading" | "search" | "select-o" | "select-r" | "select" | "shopping-bag" | "shopping-cart" | "sidebar-open" | "sidebar-right" | "sidebar" | "signal" | "size" | "smartphone" | "smile-mouth-open" | "smile-neutral" | "smile-no-mouth" | "smile-none" | "smile-sad" | "smile-upside" | "smile" | "space-between-v" | "space-between" | "spinner-alt" | "spinner-two-alt" | "spinner-two" | "spinner" | "sun" | "swap-vertical" | "swap" | "tab" | "terrain" | "thermostat" | "today" | "toggle-off" | "toggle-on" | "toggle-square-off" | "toggle-square" | "toolbar-bottom" | "toolbar-left" | "toolbar-right" | "toolbar-top" | "toolbox" | "touchpad" | "track" | "transcript" | "trash-empty" | "trash" | "trending-down" | "trending" | "tv" | "ui-kit" | "umbrella" | "undo" | "usb" | "usb-c" | "view-cols" | "view-comfortable" | "view-day" | "view-grid" | "view-list" | "view-month" | "view-split" | "voicemail-o" | "voicemail-r" | "voicemail" | "work-alt" | "yinyang" | "zoom-in" | "zoom-out" | "accessibility" | "accessibility-circle" | "accessibility-o" | "airplane" | "airpods" | "alarm" | "album" | "anchor" | "angular" | "apple" | "approximately-equal" | "archive" | "arrow-bottom-left-o" | "arrow-bottom-left-r" | "arrow-bottom-left" | "arrow-bottom-right-o" | "arrow-bottom-right-r" | "arrow-bottom-right" | "arrow-down-o" | "arrow-down-r" | "arrow-down" | "arrows-exchange-alt-v" | "arrows-exchange-alt" | "arrows-exchange-v" | "arrows-exchange" | "arrows-expand-down-left" | "arrows-expand-down-right" | "arrows-expand-left" | "arrows-expand-right" | "arrows-expand-up-left" | "arrows-expand-up-right" | "arrows-h" | "arrows-h-alt" | "arrow-left-o" | "arrow-left-r" | "arrow-left" | "arrow-right-o" | "arrow-right-r" | "arrow-right" | "arrows-scroll-h" | "arrows-scroll-v" | "arrow-switch" | "arrow-switch-o" | "arrow-switch-r" | "arrow-top-left-o" | "arrow-top-left-r" | "arrow-top-left" | "arrow-top-right-o" | "arrow-top-right-r" | "arrow-top-right" | "arrow-up-o" | "arrow-up-r" | "arrow-up" | "arrows-v" | "arrows-v-alt" | "asterisk" | "asterisk-o" | "asterisk-r" | "atlassian" | "attribution" | "award" | "badge" | "bamboo" | "bell" | "bell-o" | "bell-slash" | "bitbucket" | "block-o" | "blocked" | "bluetooth" | "book" | "bookmark" | "bookmark-slash" | "bug" | "bullseye" | "bullseye-arrow" | "c-plus-plus" | "cache" | "camera" | "camera-alt" | "categories" | "check" | "check-circle" | "check-o" | "check-r" | "checklist" | "chevron-double-down-o" | "chevron-double-down-r" | "chevron-double-left-o" | "chevron-double-left-r" | "chevron-double-right-o" | "chevron-double-right-r" | "chevron-double-up-o" | "chevron-double-up-r" | "chevron-down-o" | "chevron-down-r" | "chevron-down" | "chevron-left-o" | "chevron-left-r" | "chevron-left" | "chevron-right-o" | "chevron-right-r" | "chevron-right" | "chevron-up-o" | "chevron-up-r" | "chevron-up" | "chevron-double-down" | "chevron-double-left" | "chevron-double-right" | "chevron-double-up" | "chip" | "circle-ci" | "circle-half" | "clock" | "close" | "close-circle" | "close-o" | "close-r" | "cloud" | "cloud-slash" | "code-climate" | "code-review" | "codepen" | "codesandbox" | "codescan" | "coffee" | "cog" | "command-key" | "command-palette" | "comment" | "comment-external" | "container" | "control-key" | "copyright" | "cross" | "crown" | "danger-circle" | "danger-o" | "database" | "diamond" | "digital-ocean" | "disc" | "discord" | "discussion" | "discussion-closed" | "discussion-duplicated" | "discussion-outdated" | "divide" | "download" | "draft" | "dribble" | "dropbox" | "eject" | "ellipsis" | "equal" | "expand" | "eye" | "eye-slash" | "facebook" | "figma" | "filter" | "flag" | "flame" | "flash" | "flash-circle" | "flash-o" | "focus" | "fold" | "fold-down" | "fold-up" | "format-bold" | "format-strikethrough" | "framer" | "ghost" | "gift" | "git" | "git-branch" | "git-commit" | "git-compare" | "git-fork" | "git-merge" | "git-pull-request" | "github" | "github-actions" | "github-copilot" | "gitlab" | "gitter" | "glass" | "glasses" | "globe" | "google" | "google-calendar" | "google-drive" | "google-meet" | "grabber" | "graph" | "greater-than" | "greater-than-or-equal" | "hash" | "headphone" | "heart" | "heart-o" | "help" | "hexagon" | "history" | "home" | "hourglass" | "inbox" | "infinity" | "info-circle" | "info-o" | "instagram" | "invision" | "iterations" | "javascript" | "jenkins" | "jest" | "jsfiddle" | "key" | "key-alt" | "keyboard" | "keyhole-circle" | "keyhole-o" | "kotlin" | "law" | "layout-grid" | "layout-grid-small" | "layout-list" | "layout-pin" | "leaf" | "less-than" | "less-than-or-equal" | "lightbulb" | "link" | "linkedin" | "live" | "live-photo" | "loadbar" | "loadbar-alt" | "loadbar-doc" | "loadbar-sound" | "location" | "log" | "loom" | "mail" | "mail-read" | "markdown" | "megaphone" | "mention" | "menu-close" | "menu-open" | "menu-round-circle" | "menu-round-o" | "message" | "message-circle" | "message-o" | "messenger" | "meta" | "meter" | "mic" | "mic-slash" | "microsoft" | "microsoft-teams" | "microsoft-windows" | "milestone" | "minus" | "minus-circle" | "minus-o" | "minus-r" | "money-sign" | "more" | "more-circle" | "more-o" | "more-r" | "more-vertical" | "more-vertical-circle" | "more-vertical-o" | "more-vertical-r" | "multi-select" | "music-note" | "music-note-alt" | "next" | "next-o" | "next-r" | "next.js" | "node.js" | "not-equal" | "note" | "notebook" | "npm" | "numbers" | "option-key" | "options" | "organization" | "package" | "paintbrush" | "paperclip" | "password" | "patreon" | "pause" | "pause-o" | "pause-r" | "paypal" | "pencil" | "percent" | "phone" | "phone-o" | "pi" | "pin" | "pin-slash" | "play" | "play-backwards" | "play-forwards" | "play-o" | "play-r" | "playlist" | "playlist-add" | "playlist-check" | "playlist-remove" | "playlist-search" | "plus" | "plus-circle" | "plus-minus" | "plus-minus-slash" | "plus-o" | "plus-r" | "podcast" | "previous" | "previous-o" | "previous-r" | "product-hunt" | "project" | "pulse" | "python" | "ram" | "react" | "record-o" | "redux" | "repeat" | "repo" | "report" | "return" | "roadmap" | "rocket" | "rocket-chat" | "rust" | "safe" | "send" | "send-alt" | "server" | "serverless" | "share" | "share-mobile" | "shield" | "shield-slash" | "shift-key" | "shortcuts" | "shuffle" | "side-by-side" | "sigma" | "sign-in" | "sign-out" | "single-select" | "skype" | "slack" | "sort" | "sort-asc" | "sort-desc" | "sparkle" | "sparkle-o" | "speaker" | "spotify" | "square-payments" | "square-root" | "stack" | "stacked" | "star" | "star-o" | "stop" | "stop-o" | "stop-r" | "stop-sign" | "stopwatch" | "storybook" | "student" | "style" | "svelte" | "swift" | "sync" | "sync-alt" | "tab-key" | "tag" | "tags" | "tasklist" | "template" | "terminal" | "thumbs-down" | "thumbs-up" | "tidal" | "timelapse" | "timer" | "times" | "tools" | "tools-alt" | "touch-id" | "travis-ci" | "tree" | "trello" | "triangle" | "trophy" | "tumblr" | "twilio" | "twitch" | "twitter" | "typescript" | "unavailable-o" | "unblock-o" | "unfold" | "unlink" | "unread" | "unverified" | "upload" | "user" | "user-add" | "user-remove" | "users" | "vector" | "vercel" | "verified" | "versions" | "video" | "video-camera" | "vimeo" | "vinyl" | "volume-high" | "volume-low" | "volume-mid" | "vscode" | "vue" | "wand" | "wave" | "webcam" | "webhook" | "website" | "webstorm" | "whatsapp" | "wheelchair" | "wi-fi" | "workflow" | "workplace" | "youtube" | "zap" | "zigzag" | "zoom" | ReactElement<any, string | react.JSXElementConstructor<any>> | undefined;
    size?: StringOrNumber | [StringOrNumber, StringOrNumber] | undefined;
    style?: CSSProperties | undefined;
    suffix?: "align-bottom" | "align-center" | "align-left" | "align-middle" | "align-right" | "align-top" | "apple-watch" | "arrange-back" | "arrange-front" | "attachment" | "backspace" | "band-aid" | "battery" | "battery-empty" | "battery-full" | "board" | "border-all" | "border-bottom" | "border-left" | "border-right" | "border-style-dashed" | "border-style-dotted" | "border-style-solid" | "border-top" | "bot" | "bowl" | "boy" | "briefcase" | "browse" | "browser" | "calculator" | "calendar-dates" | "calendar-due" | "calendar-next" | "calendar-today" | "calendar" | "calibrate" | "captions" | "card-clubs" | "card-diamonds" | "card-hearts" | "card-spades" | "carousel" | "cast" | "chart" | "clapper-board" | "clipboard" | "code" | "code-slash" | "collage" | "color-bucket" | "color-picker" | "community" | "components" | "compress-left" | "compress-right" | "compress-v" | "compress" | "controller" | "copy" | "corner-double-down-left" | "corner-double-down-right" | "corner-double-left-down" | "corner-double-left-up" | "corner-double-right-down" | "corner-double-right-up" | "corner-double-up-left" | "corner-double-up-right" | "corner-down-left" | "corner-down-right" | "corner-left-down" | "corner-left-up" | "corner-right-down" | "corner-right-up" | "corner-up-left" | "corner-up-right" | "credit-card" | "crop" | "dark-mode" | "desktop" | "details-less" | "details-more" | "dialpad" | "dice-1" | "dice-2" | "dice-3" | "dice-4" | "dice-5" | "dice-6" | "display-flex" | "display-fullwidth" | "display-grid" | "display-spacing" | "distribute-horizontal" | "distribute-vertical" | "dock-bottom" | "dock-left" | "dock-right" | "dock-window" | "drive" | "drop-invert" | "drop-opacity" | "drop" | "duplicate" | "edit-black-point" | "edit-contrast" | "edit-exposure" | "edit-fade" | "edit-flip-h" | "edit-flip-v" | "edit-highlight" | "edit-markup" | "edit-mask" | "edit-noise" | "edit-shadows" | "edit-straight" | "edit-unmask" | "enter" | "erase" | "euro" | "export" | "extension-add" | "extension-remove" | "extension" | "external" | "feed" | "file-add" | "file-document" | "file-remove" | "file" | "film" | "filters" | "folder-add" | "folder-remove" | "folder" | "font-height" | "font-spacing" | "format-center" | "format-color" | "format-heading" | "format-indent-decrease" | "format-indent-increase" | "format-italic" | "format-justify" | "format-left" | "format-line-height" | "format-right" | "format-separator" | "format-slash" | "format-text" | "format-underline" | "format-uppercase" | "games" | "gender-female" | "gender-male" | "girl" | "glass-alt" | "home-screen" | "image" | "import" | "inpicture" | "insert-after-o" | "insert-after-r" | "insert-after" | "insert-before-o" | "insert-before-r" | "insert-before" | "insights" | "internal" | "laptop" | "list-tree" | "list" | "lock-unlock" | "lock" | "log-off" | "loupe" | "magnet" | "mail-forward" | "mail-reply" | "maximize-alt" | "maximize" | "menu-boxed" | "menu-grid-o" | "menu-grid-r" | "menu-left-alt" | "menu-left" | "menu-motion" | "menu-right-alt" | "menu-right" | "menu" | "merge-horizontal" | "merge-vertical" | "mini-player" | "minimize-alt" | "minimize" | "moon" | "mouse" | "move-down" | "move-left" | "move-right" | "move-up" | "notifications" | "pacman" | "path-back" | "path-crop" | "path-divide" | "path-exclude" | "path-front" | "path-intersect" | "path-outline" | "path-trim" | "path-unite" | "performance" | "piano" | "pill" | "plug" | "pokemon" | "poll" | "printer" | "profile" | "pull-clear" | "push-chevron-down-o" | "circle" | "push-chevron-down-r" | "square" | "push-chevron-down" | "push-chevron-left-o" | "push-chevron-left-r" | "push-chevron-left" | "push-chevron-right-o" | "push-chevron-right-r" | "push-chevron-right" | "push-chevron-up-o" | "push-chevron-up-r" | "push-chevron-up" | "push-down" | "push-left" | "push-right" | "push-up" | "qr" | "quote-o" | "quote" | "radio-check" | "radio-checked" | "ratio" | "redo" | "remove-r" | "remove" | "rename" | "reorder" | "row-first" | "row-last" | "ruler" | "scan" | "screen-mirror" | "screen-wide" | "screen" | "scroll-h" | "scroll-v" | "search-found" | "search-loading" | "search" | "select-o" | "select-r" | "select" | "shopping-bag" | "shopping-cart" | "sidebar-open" | "sidebar-right" | "sidebar" | "signal" | "size" | "smartphone" | "smile-mouth-open" | "smile-neutral" | "smile-no-mouth" | "smile-none" | "smile-sad" | "smile-upside" | "smile" | "space-between-v" | "space-between" | "spinner-alt" | "spinner-two-alt" | "spinner-two" | "spinner" | "sun" | "swap-vertical" | "swap" | "tab" | "terrain" | "thermostat" | "today" | "toggle-off" | "toggle-on" | "toggle-square-off" | "toggle-square" | "toolbar-bottom" | "toolbar-left" | "toolbar-right" | "toolbar-top" | "toolbox" | "touchpad" | "track" | "transcript" | "trash-empty" | "trash" | "trending-down" | "trending" | "tv" | "ui-kit" | "umbrella" | "undo" | "usb" | "usb-c" | "view-cols" | "view-comfortable" | "view-day" | "view-grid" | "view-list" | "view-month" | "view-split" | "voicemail-o" | "voicemail-r" | "voicemail" | "work-alt" | "yinyang" | "zoom-in" | "zoom-out" | "accessibility" | "accessibility-circle" | "accessibility-o" | "airplane" | "airpods" | "alarm" | "album" | "anchor" | "angular" | "apple" | "approximately-equal" | "archive" | "arrow-bottom-left-o" | "arrow-bottom-left-r" | "arrow-bottom-left" | "arrow-bottom-right-o" | "arrow-bottom-right-r" | "arrow-bottom-right" | "arrow-down-o" | "arrow-down-r" | "arrow-down" | "arrows-exchange-alt-v" | "arrows-exchange-alt" | "arrows-exchange-v" | "arrows-exchange" | "arrows-expand-down-left" | "arrows-expand-down-right" | "arrows-expand-left" | "arrows-expand-right" | "arrows-expand-up-left" | "arrows-expand-up-right" | "arrows-h" | "arrows-h-alt" | "arrow-left-o" | "arrow-left-r" | "arrow-left" | "arrow-right-o" | "arrow-right-r" | "arrow-right" | "arrows-scroll-h" | "arrows-scroll-v" | "arrow-switch" | "arrow-switch-o" | "arrow-switch-r" | "arrow-top-left-o" | "arrow-top-left-r" | "arrow-top-left" | "arrow-top-right-o" | "arrow-top-right-r" | "arrow-top-right" | "arrow-up-o" | "arrow-up-r" | "arrow-up" | "arrows-v" | "arrows-v-alt" | "asterisk" | "asterisk-o" | "asterisk-r" | "atlassian" | "attribution" | "award" | "badge" | "bamboo" | "bell" | "bell-o" | "bell-slash" | "bitbucket" | "block-o" | "blocked" | "bluetooth" | "book" | "bookmark" | "bookmark-slash" | "bug" | "bullseye" | "bullseye-arrow" | "c-plus-plus" | "cache" | "camera" | "camera-alt" | "categories" | "check" | "check-circle" | "check-o" | "check-r" | "checklist" | "chevron-double-down-o" | "chevron-double-down-r" | "chevron-double-left-o" | "chevron-double-left-r" | "chevron-double-right-o" | "chevron-double-right-r" | "chevron-double-up-o" | "chevron-double-up-r" | "chevron-down-o" | "chevron-down-r" | "chevron-down" | "chevron-left-o" | "chevron-left-r" | "chevron-left" | "chevron-right-o" | "chevron-right-r" | "chevron-right" | "chevron-up-o" | "chevron-up-r" | "chevron-up" | "chevron-double-down" | "chevron-double-left" | "chevron-double-right" | "chevron-double-up" | "chip" | "circle-ci" | "circle-half" | "clock" | "close" | "close-circle" | "close-o" | "close-r" | "cloud" | "cloud-slash" | "code-climate" | "code-review" | "codepen" | "codesandbox" | "codescan" | "coffee" | "cog" | "command-key" | "command-palette" | "comment" | "comment-external" | "container" | "control-key" | "copyright" | "cross" | "crown" | "danger-circle" | "danger-o" | "database" | "diamond" | "digital-ocean" | "disc" | "discord" | "discussion" | "discussion-closed" | "discussion-duplicated" | "discussion-outdated" | "divide" | "download" | "draft" | "dribble" | "dropbox" | "eject" | "ellipsis" | "equal" | "expand" | "eye" | "eye-slash" | "facebook" | "figma" | "filter" | "flag" | "flame" | "flash" | "flash-circle" | "flash-o" | "focus" | "fold" | "fold-down" | "fold-up" | "format-bold" | "format-strikethrough" | "framer" | "ghost" | "gift" | "git" | "git-branch" | "git-commit" | "git-compare" | "git-fork" | "git-merge" | "git-pull-request" | "github" | "github-actions" | "github-copilot" | "gitlab" | "gitter" | "glass" | "glasses" | "globe" | "google" | "google-calendar" | "google-drive" | "google-meet" | "grabber" | "graph" | "greater-than" | "greater-than-or-equal" | "hash" | "headphone" | "heart" | "heart-o" | "help" | "hexagon" | "history" | "home" | "hourglass" | "inbox" | "infinity" | "info-circle" | "info-o" | "instagram" | "invision" | "iterations" | "javascript" | "jenkins" | "jest" | "jsfiddle" | "key" | "key-alt" | "keyboard" | "keyhole-circle" | "keyhole-o" | "kotlin" | "law" | "layout-grid" | "layout-grid-small" | "layout-list" | "layout-pin" | "leaf" | "less-than" | "less-than-or-equal" | "lightbulb" | "link" | "linkedin" | "live" | "live-photo" | "loadbar" | "loadbar-alt" | "loadbar-doc" | "loadbar-sound" | "location" | "log" | "loom" | "mail" | "mail-read" | "markdown" | "megaphone" | "mention" | "menu-close" | "menu-open" | "menu-round-circle" | "menu-round-o" | "message" | "message-circle" | "message-o" | "messenger" | "meta" | "meter" | "mic" | "mic-slash" | "microsoft" | "microsoft-teams" | "microsoft-windows" | "milestone" | "minus" | "minus-circle" | "minus-o" | "minus-r" | "money-sign" | "more" | "more-circle" | "more-o" | "more-r" | "more-vertical" | "more-vertical-circle" | "more-vertical-o" | "more-vertical-r" | "multi-select" | "music-note" | "music-note-alt" | "next" | "next-o" | "next-r" | "next.js" | "node.js" | "not-equal" | "note" | "notebook" | "npm" | "numbers" | "option-key" | "options" | "organization" | "package" | "paintbrush" | "paperclip" | "password" | "patreon" | "pause" | "pause-o" | "pause-r" | "paypal" | "pencil" | "percent" | "phone" | "phone-o" | "pi" | "pin" | "pin-slash" | "play" | "play-backwards" | "play-forwards" | "play-o" | "play-r" | "playlist" | "playlist-add" | "playlist-check" | "playlist-remove" | "playlist-search" | "plus" | "plus-circle" | "plus-minus" | "plus-minus-slash" | "plus-o" | "plus-r" | "podcast" | "previous" | "previous-o" | "previous-r" | "product-hunt" | "project" | "pulse" | "python" | "ram" | "react" | "record-o" | "redux" | "repeat" | "repo" | "report" | "return" | "roadmap" | "rocket" | "rocket-chat" | "rust" | "safe" | "send" | "send-alt" | "server" | "serverless" | "share" | "share-mobile" | "shield" | "shield-slash" | "shift-key" | "shortcuts" | "shuffle" | "side-by-side" | "sigma" | "sign-in" | "sign-out" | "single-select" | "skype" | "slack" | "sort" | "sort-asc" | "sort-desc" | "sparkle" | "sparkle-o" | "speaker" | "spotify" | "square-payments" | "square-root" | "stack" | "stacked" | "star" | "star-o" | "stop" | "stop-o" | "stop-r" | "stop-sign" | "stopwatch" | "storybook" | "student" | "style" | "svelte" | "swift" | "sync" | "sync-alt" | "tab-key" | "tag" | "tags" | "tasklist" | "template" | "terminal" | "thumbs-down" | "thumbs-up" | "tidal" | "timelapse" | "timer" | "times" | "tools" | "tools-alt" | "touch-id" | "travis-ci" | "tree" | "trello" | "triangle" | "trophy" | "tumblr" | "twilio" | "twitch" | "twitter" | "typescript" | "unavailable-o" | "unblock-o" | "unfold" | "unlink" | "unread" | "unverified" | "upload" | "user" | "user-add" | "user-remove" | "users" | "vector" | "vercel" | "verified" | "versions" | "video" | "video-camera" | "vimeo" | "vinyl" | "volume-high" | "volume-low" | "volume-mid" | "vscode" | "vue" | "wand" | "wave" | "webcam" | "webhook" | "website" | "webstorm" | "whatsapp" | "wheelchair" | "wi-fi" | "workflow" | "workplace" | "youtube" | "zap" | "zigzag" | "zoom" | ReactElement<any, string | react.JSXElementConstructor<any>> | undefined;
    width?: StringOrNumber | undefined;
    as?: react.ElementType | undefined;
    theme?: Theme | undefined;
    children: ReactNode;
    margin?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    mb?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    ml?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mr?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mt?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mx?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    my?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
} & react.RefAttributes<HTMLDivElement>>;

interface ContainerKnownProps extends StyledProps, WithChildren, WithFlexBox, WithFlexItem, WithLayout, WithMargin, WithPadding {
    /** @default left */
    align?: Alignment | 'stretch';
    fullScreen?: boolean;
    fullScreenOffset?: StringOrNumber;
    /**
     * Update the padding for large screens.
     * @default true
     */
    responsive?: boolean;
    style?: CSSProperties;
    /** @default left */
    textAlign?: Alignment;
    verticalPadding?: boolean;
}
type ContainerProps = Simplify<OmitElementProps<HTMLDivElement, ContainerKnownProps>>;
declare const Container: react.ForwardRefExoticComponent<{
    align?: Alignment | "stretch" | undefined;
    fullScreen?: boolean | undefined;
    fullScreenOffset?: StringOrNumber | undefined;
    responsive?: boolean | undefined;
    style?: CSSProperties | undefined;
    textAlign?: Alignment | undefined;
    verticalPadding?: boolean | undefined;
    as?: react.ElementType | undefined;
    theme?: Theme | undefined;
    children: react.ReactNode;
    alignContent?: csstype.Property.AlignContent | undefined;
    direction?: csstype.Property.FlexDirection | undefined;
    gap?: StringOrNumber | undefined;
    justify?: csstype.Property.JustifyContent | undefined;
    justifyItems?: csstype.Property.JustifyItems | undefined;
    wrap?: csstype.Property.FlexWrap | undefined;
    alignSelf?: csstype.Property.AlignSelf | undefined;
    basis?: csstype.Property.FlexBasis<0 | (string & {})> | undefined;
    fill?: boolean | Direction | undefined;
    flex?: boolean | {
        grow?: number | undefined;
        shrink?: number | undefined;
    } | "grow" | "shrink" | undefined;
    justifySelf?: csstype.Property.JustifySelf | undefined;
    order?: csstype.Property.Order | undefined;
    opacity?: number | csstype.Property.Opacity | undefined;
    overflow?: csstype.Property.Overflow | undefined;
    pointerEvents?: csstype.Property.PointerEvents | undefined;
    transform?: csstype.Property.Transform | undefined;
    transformOrigin?: csstype.Property.TransformOrigin<0 | (string & {})> | undefined;
    transition?: csstype.Property.Transition<string & {}> | undefined;
    display?: csstype.Property.Display | undefined;
    height?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | undefined;
    maxHeight?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "none" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "-webkit-min-content" | "intrinsic" | undefined;
    maxWidth?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "none" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "-webkit-min-content" | "intrinsic" | undefined;
    minHeight?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "-webkit-min-content" | "intrinsic" | undefined;
    minWidth?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "-webkit-min-content" | "intrinsic" | "-webkit-fill-available" | "min-intrinsic" | undefined;
    width?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "intrinsic" | "min-intrinsic" | undefined;
    margin?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    mb?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    ml?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mr?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mt?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mx?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    my?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    padding?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    pb?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    pl?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    pr?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    pt?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    px?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    py?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    list?: string | undefined;
    download?: any;
    key?: react.Key | null | undefined;
    name?: string | undefined;
    color?: string | undefined;
    hidden?: boolean | undefined;
    start?: number | undefined;
    content?: string | undefined;
    readOnly?: boolean | undefined;
    low?: number | undefined;
    high?: number | undefined;
    cite?: string | undefined;
    data?: string | undefined;
    form?: string | undefined;
    label?: string | undefined;
    slot?: string | undefined;
    span?: number | undefined;
    summary?: string | undefined;
    title?: string | undefined;
    pattern?: string | undefined;
    prefix?: string | undefined;
    type?: string | undefined;
    disabled?: boolean | undefined;
    value?: string | number | readonly string[] | undefined;
    accept?: string | undefined;
    acceptCharset?: string | undefined;
    action?: string | undefined;
    allowFullScreen?: boolean | undefined;
    allowTransparency?: boolean | undefined;
    alt?: string | undefined;
    async?: boolean | undefined;
    autoComplete?: string | undefined;
    autoPlay?: boolean | undefined;
    capture?: boolean | "user" | "environment" | undefined;
    cellPadding?: string | number | undefined;
    cellSpacing?: string | number | undefined;
    charSet?: string | undefined;
    challenge?: string | undefined;
    checked?: boolean | undefined;
    classID?: string | undefined;
    cols?: number | undefined;
    colSpan?: number | undefined;
    controls?: boolean | undefined;
    coords?: string | undefined;
    crossOrigin?: "" | "anonymous" | "use-credentials" | undefined;
    dateTime?: string | undefined;
    default?: boolean | undefined;
    defer?: boolean | undefined;
    encType?: string | undefined;
    formAction?: string | undefined;
    formEncType?: string | undefined;
    formMethod?: string | undefined;
    formNoValidate?: boolean | undefined;
    formTarget?: string | undefined;
    frameBorder?: string | number | undefined;
    headers?: string | undefined;
    href?: string | undefined;
    hrefLang?: string | undefined;
    htmlFor?: string | undefined;
    httpEquiv?: string | undefined;
    integrity?: string | undefined;
    keyParams?: string | undefined;
    keyType?: string | undefined;
    kind?: string | undefined;
    loop?: boolean | undefined;
    manifest?: string | undefined;
    marginHeight?: number | undefined;
    marginWidth?: number | undefined;
    max?: string | number | undefined;
    maxLength?: number | undefined;
    media?: string | undefined;
    mediaGroup?: string | undefined;
    method?: string | undefined;
    min?: string | number | undefined;
    minLength?: number | undefined;
    multiple?: boolean | undefined;
    muted?: boolean | undefined;
    noValidate?: boolean | undefined;
    open?: boolean | undefined;
    optimum?: number | undefined;
    placeholder?: string | undefined;
    playsInline?: boolean | undefined;
    poster?: string | undefined;
    preload?: string | undefined;
    required?: boolean | undefined;
    reversed?: boolean | undefined;
    rows?: number | undefined;
    rowSpan?: number | undefined;
    sandbox?: string | undefined;
    scope?: string | undefined;
    scoped?: boolean | undefined;
    scrolling?: string | undefined;
    seamless?: boolean | undefined;
    selected?: boolean | undefined;
    shape?: string | undefined;
    sizes?: string | undefined;
    src?: string | undefined;
    srcDoc?: string | undefined;
    srcLang?: string | undefined;
    srcSet?: string | undefined;
    step?: string | number | undefined;
    target?: string | undefined;
    useMap?: string | undefined;
    wmode?: string | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    autoFocus?: boolean | undefined;
    className?: string | undefined;
    contentEditable?: "inherit" | (boolean | "false" | "true") | "plaintext-only" | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "false" | "true") | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    nonce?: string | undefined;
    spellCheck?: (boolean | "false" | "true") | undefined;
    tabIndex?: number | undefined;
    translate?: "yes" | "no" | undefined;
    radioGroup?: string | undefined;
    role?: react.AriaRole | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    property?: string | undefined;
    rel?: string | undefined;
    resource?: string | undefined;
    rev?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "search" | "email" | "tel" | "text" | "none" | "url" | "numeric" | "decimal" | undefined;
    is?: string | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: (boolean | "false" | "true") | undefined;
    "aria-autocomplete"?: "list" | "none" | "inline" | "both" | undefined;
    "aria-braillelabel"?: string | undefined;
    "aria-brailleroledescription"?: string | undefined;
    "aria-busy"?: (boolean | "false" | "true") | undefined;
    "aria-checked"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colindextext"?: string | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "date" | "time" | "location" | "step" | "page" | "false" | "true" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-description"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: (boolean | "false" | "true") | undefined;
    "aria-dropeffect"?: "copy" | "link" | "none" | "move" | "execute" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: (boolean | "false" | "true") | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: (boolean | "false" | "true") | undefined;
    "aria-haspopup"?: boolean | "menu" | "tree" | "grid" | "dialog" | "listbox" | "false" | "true" | undefined;
    "aria-hidden"?: (boolean | "false" | "true") | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: (boolean | "false" | "true") | undefined;
    "aria-multiline"?: (boolean | "false" | "true") | undefined;
    "aria-multiselectable"?: (boolean | "false" | "true") | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-readonly"?: (boolean | "false" | "true") | undefined;
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    "aria-required"?: (boolean | "false" | "true") | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowindextext"?: string | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: (boolean | "false" | "true") | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    } | undefined;
    onCopy?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCopyCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCut?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCutCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onPaste?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onPasteCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCompositionEnd?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionEndCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionStart?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionStartCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionUpdate?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionUpdateCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onFocus?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onFocusCapture?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onBlur?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onBlurCapture?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onChange?: react.FormEventHandler<HTMLDivElement> | undefined;
    onChangeCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onBeforeInput?: react.FormEventHandler<HTMLDivElement> | undefined;
    onBeforeInputCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInput?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInputCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onReset?: react.FormEventHandler<HTMLDivElement> | undefined;
    onResetCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onSubmit?: react.FormEventHandler<HTMLDivElement> | undefined;
    onSubmitCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInvalid?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInvalidCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onLoad?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onError?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onErrorCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onKeyDown?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyDownCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyPress?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyPressCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyUp?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyUpCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onAbort?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onAbortCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlay?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayThrough?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayThroughCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onDurationChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onDurationChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEmptied?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEmptiedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEncrypted?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEncryptedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEnded?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEndedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedData?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedDataCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedMetadata?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedMetadataCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadStart?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadStartCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPause?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPauseCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlay?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlayCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlaying?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlayingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onProgress?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onProgressCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onRateChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onRateChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onResize?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onResizeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeeked?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeekedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeeking?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeekingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onStalled?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onStalledCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSuspend?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSuspendCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onTimeUpdate?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onTimeUpdateCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onVolumeChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onVolumeChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onWaiting?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onWaitingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onAuxClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onAuxClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onContextMenu?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onContextMenuCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onDoubleClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onDoubleClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onDrag?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnd?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEndCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnter?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnterCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragExit?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragExitCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragLeave?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragLeaveCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragOver?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragOverCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragStart?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragStartCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDrop?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDropCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onMouseDown?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseDownCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseEnter?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseLeave?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseMove?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseMoveCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOut?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOutCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOver?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOverCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseUp?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseUpCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onSelect?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSelectCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onTouchCancel?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchCancelCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchEnd?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchEndCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchMove?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchMoveCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchStart?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchStartCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onPointerDown?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerDownCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerMove?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerMoveCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerUp?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerUpCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerCancel?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerCancelCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerEnter?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerLeave?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOver?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOverCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOut?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOutCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onGotPointerCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onGotPointerCaptureCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onLostPointerCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onLostPointerCaptureCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onScroll?: react.UIEventHandler<HTMLDivElement> | undefined;
    onScrollCapture?: react.UIEventHandler<HTMLDivElement> | undefined;
    onWheel?: react.WheelEventHandler<HTMLDivElement> | undefined;
    onWheelCapture?: react.WheelEventHandler<HTMLDivElement> | undefined;
    onAnimationStart?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationStartCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationEnd?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationEndCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationIteration?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationIterationCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onTransitionEnd?: react.TransitionEventHandler<HTMLDivElement> | undefined;
    onTransitionEndCapture?: react.TransitionEventHandler<HTMLDivElement> | undefined;
} & react.RefAttributes<HTMLDivElement>>;

interface CopyToClipboardKnownProps extends Pick<WithColors, 'color'>, WithMargin {
    disableAnimation?: boolean;
    /** @default copy */
    icon?: Icons;
    onCopy?: (text: string) => void;
    /** @default 16 */
    size?: number;
    text: string;
    /** @default Copied */
    tooltipCopiedText?: string;
    /** @default Copy */
    tooltipText?: string;
}
type CopyToClipboardProps = Simplify<CopyToClipboardKnownProps>;
declare function CopyToClipboard(props: CopyToClipboardProps): react_jsx_runtime.JSX.Element;
declare namespace CopyToClipboard {
    var displayName: string;
}

type LoaderType = 'grow' | 'pill' | 'pride' | 'pulse' | 'rotate';
interface LoaderKnownProps extends OmitElementProps<HTMLDivElement, StyledProps & WithBlock & Pick<WithColorsDefaultColor, 'color'>> {
    size?: number;
    /** @default pill */
    type?: LoaderType;
}
type LoaderProps = Simplify<LoaderKnownProps>;

interface DataTableColumn<T = string> {
    /**
     * Disable sorting for the column.
     * @default false
     */
    disableSort?: boolean;
    /**
     * Hide the column on smaller screens.
     * @default false
     */
    hideOnResponsive?: boolean;
    /**
     * Set the column as an action column and disable sorting.
     * @default false
     */
    isAction?: boolean;
    /**
     * The key to use for the column.
     */
    key: T;
    /**
     * The maximum width for the column.
     */
    max?: StringOrNumber;
    /**
     * The minimum width for the column.
     */
    min?: StringOrNumber;
    /**
     * The fixed width for the column.
     * Overrides `min` and `max`.
     */
    size?: StringOrNumber;
    /**
     * The title for the column.
     */
    title: ReactNode;
}
type DataTableRowContent = ReactNode | {
    label: ReactNode;
    value: string;
};
type DataTableRow<T extends string> = Simplify<Record<T, DataTableRowContent> & {
    id?: StringOrNumber;
}>;
interface DataTableKnownProps<T extends string> extends StyledProps, WithAccent, WithFlexItem, WithLayout, WithMargin, WithPadding, WithRadius {
    /**
     * Component background color
     * If not set, the component will use 'gray.800' for darkMode otherwise 'gray.50'
     */
    bg?: VariantWithTones;
    /**
     * The breakpoint to switch to responsive mode.
     * @default 768 */
    breakpoint?: number;
    /**
     * Remove background and padding
     * @default false
     */
    clean?: boolean;
    /**
     * The columns to display
     */
    columns: Array<DataTableColumn<T>>;
    /**
     * The data to display
     */
    data: Array<DataTableRow<T>>;
    /**
     * The default column to sort by
     */
    defaultSortColumn?: T;
    /**
     * The default sort direction
     * @default asc
     */
    defaultSortDirection?: SortDirection;
    /**
     * Disable scroll to top on page change
     * @default false
     */
    disableScroll?: boolean;
    /**
     * The size of the loader.
     * @default 128
     */
    loaderSize?: number;
    /**
     * The type of loader to display.
     */
    loaderType?: LoaderType;
    /**
     * Show a loader while data is loading.
     * @default false
     */
    loading?: boolean;
    /**
     * The maximum number of rows to display per page.
     * @default 10 */
    maxRows?: number;
    /**
     * Custom message when no results are found.
     * @default Nothing found
     */
    noResults?: ReactNode;
    onClickPage?: (page: number, totalPages: number) => void;
    onClickSort?: (sortedBy: T, sortDirection: SortDirection) => void;
    /**
     * Show pagination
     * @default true
     */
    pagination?: boolean;
    /**
     * Use remote paginated data.
     */
    remote?: {
        currentPage: number;
        totalPages: number;
        useInternalSorting?: boolean;
    };
    /**
     * Rearrange columns on smaller screens.
     * @default false
     */
    responsive?: boolean;
    /**
     * The duration of the scroll animation on page change.
     * @default 400
     */
    scrollDuration?: number;
    /**
     * The element to scroll to on page change.
     */
    scrollElement?: HTMLElement | null;
    /**
     * The margin to apply when scrolling to the element.
     */
    scrollMargin?: number;
    /**
     * Set the header sticky.
     * @default false
     */
    stickyHeader?: boolean;
    style?: CSSProperties;
    /**
     * The width of the table.
     * @default window.innerWidth */
    width?: number;
}
type DataTableProps<T extends string = string> = Simplify<OmitElementProps<HTMLDivElement, DataTableKnownProps<T>, 'data' | 'wrap'>>;
interface DataTableHeadProps extends WithAccent, Pick<DataTableProps, 'clean' | 'columns'> {
    darkMode: boolean;
    isDisabled: boolean;
    isResponsive: boolean;
    onClick: MouseEventHandler;
    sortBy: StringOrNull;
    sortDirection: SortDirection;
    stickyHeader: boolean;
}
interface DataTableBodyProps extends WithAccent, Pick<DataTableProps, 'clean' | 'columns' | 'data' | 'loaderSize' | 'loaderType' | 'loading'> {
    darkMode: boolean;
    isResponsive: boolean;
    sortColumn?: string;
}

declare function DataTable<T extends string = string>(props: DataTableProps<T>): react_jsx_runtime.JSX.Element;
declare namespace DataTable {
    var displayName: string;
}

type DatePickerRangeParameter = [from?: string, to?: string];
type DatePickerRangeClickHandler = (range: DatePickerRangeParameter) => void;
type DatePickerSingleClickHandler = (isoDate: string) => void;
interface DatePickerBaseProps extends StyledProps, WithAccent<Color> {
    /**
     * @default Go to today
     */
    currentMonthLabel?: ReactNode;
    fromDate?: string | Date;
    toDate?: string | Date;
}
interface DatePickerLayoutProps extends WithBorder, WithMargin, WithPadding, WithRadius, WithShadow {
}
interface DatePickerRangeKnownProps extends DatePickerBaseProps, DatePickerLayoutProps, Omit<DayPickerRangeProps, 'fromDate' | 'mode' | 'selected' | 'onSelect' | 'toDate'> {
    /**
     * The date format to use when displaying the dates.
     * @default en-US
     */
    formatLocale?: string;
    /**
     * For internal use with DatePickerInput
     * @private
     */
    onApply?: (selected: DatePickerRangeParameter) => void;
    onChange?: DatePickerRangeClickHandler;
    readOnly?: boolean;
    /**
     * The initial date.
     */
    selected?: DatePickerRangeParameter;
    /**
     * For internal use with DatePickerInput
     * @private
     */
    showApply?: boolean;
}
type DatePickerRangeProps = Simplify<DatePickerRangeKnownProps>;
interface DatePickerSingleKnownProps extends DatePickerBaseProps, DatePickerLayoutProps, Omit<DayPickerSingleProps, 'fromDate' | 'mode' | 'onSelect' | 'selected' | 'toDate'> {
    onChange?: DatePickerSingleClickHandler;
    readOnly?: boolean;
    /**
     * The initial date.
     */
    selected?: string;
}
type DatePickerSingleProps = Simplify<DatePickerSingleKnownProps>;
interface DatePickerSelectorBaseProps extends DatePickerBaseProps, Omit<DayPickerBase, 'disabled' | 'fromDate' | 'mode' | 'selected' | 'toDate'>, WithBorderless, WithDisabled, WithOpen, WithMargin {
    /**
     * The date format to use when displaying the dates.
     * @default en-US
     */
    formatLocale?: string;
    large?: boolean;
    /**
     * Whether to show the calendar in range or single mode.
     * @default single
     */
    mode?: 'range' | 'single';
    /**
     * Add a hidden input with the given name.
     */
    name?: string;
    /**
     * For internal use with DatePickerSelector
     * @private
     */
    onApply?: (selected: DatePickerRangeParameter) => void;
    placeholder?: string;
    /**
     * The position of the calendar relative to the input.
     * @default right
     */
    position?: Alignment;
    /**
     * The initial date.
     */
    selected?: DatePickerRangeParameter | string;
    /**
     * The separator for date ranges.
     * @default ' — '
     */
    separator?: string;
    /**
     * Show a button to apply the selected range.
     * @default false
     */
    showRangeApply?: boolean;
    /**
     * The width of the selector.
     * It has a min-width of 200px.
     */
    width?: StringOrNumber;
}
type DatePickerSelectorProps = Simplify<DatePickerSelectorBaseProps & ({
    mode: 'range';
    onChange?: DatePickerRangeClickHandler;
} | {
    mode: 'single';
    onChange?: DatePickerSingleClickHandler;
})>;

declare function DatePickerRange(props: DatePickerRangeProps): react_jsx_runtime.JSX.Element;
declare namespace DatePickerRange {
    var displayName: string;
}

declare function DatePickerSelector(props: DatePickerSelectorProps): react_jsx_runtime.JSX.Element;
declare namespace DatePickerSelector {
    var displayName: string;
}

declare function DatePicker(props: DatePickerSingleProps): react_jsx_runtime.JSX.Element;
declare namespace DatePicker {
    var displayName: string;
}

interface DividerKnownProps extends StyledProps, WithAlign, WithChildrenOptional, WithMargin, WithTextOptions {
    /** @default sm */
    borderSize?: Sizes;
    /** @default solid */
    borderStyle?: 'solid' | 'dashed' | 'dotted';
    /**
     * Component color
     * @default gray.200
     */
    color?: VariantWithTones;
    /** @default horizontal */
    direction?: Direction;
    /**
     * The distance between the text and borders
     *
     * @default xs
     */
    gap?: Spacing;
    /**
     * The width (for horizontal) or height (for vertical)
     *
     * @default 100%
     */
    length?: StringOrNumber;
    /**
     * The minimum border width for horizontal direction with text
     *
     * @default 50
     */
    minBorderWidth?: StringOrNumber;
}
type DividerProps = Simplify<OmitElementProps<HTMLDivElement, DividerKnownProps>>;
declare function Divider(props: DividerProps): react_jsx_runtime.JSX.Element;
declare namespace Divider {
    var displayName: string;
}

type DropdownBaseProps = Omit<Props, 'className' | 'clearComponent' | 'clearOnSelect' | 'contentComponent' | 'create' | 'handleComponent' | 'inputComponent' | 'loadingComponent' | 'menuComponent' | 'menuItemComponent' | 'noDataComponent' | 'onClearAll' | 'onCreate' | 'onSelectAll' | 'optionComponent' | 'options' | 'searchFn' | 'secondaryPlaceholder' | 'separatorComponent' | 'style' | 'styles'>;
interface DropdownKnownProps extends StyledProps, WithAccent, WithBorderless, WithMargin, WithOpen, DropdownBaseProps {
    /** @default false */
    allowCreate?: boolean;
    /** @default false */
    closeMultiOnSelect?: boolean;
    /**
     * If set, an input with type hidden will be added to the component with the value of the selected option(s).
     * In case of multiple items, the value will be a string concatenated with "separator".
     */
    inputOptions?: HiddenInput;
    items: Option[];
    large?: boolean;
    /** @default 260 */
    menuMaxHeight?: number;
    onClear?: () => void;
    onCreate?: (item: string, close: () => void) => void;
    onSearch?: (value: string) => void;
    /** @default 260 */
    width?: StringOrNumber;
}
type DropdownProps = Simplify<DropdownKnownProps>;

interface EmojiKnownProps extends StyledProps {
    label?: string;
    size?: number;
    symbol: string;
}
type EmojiProps = Simplify<OmitElementProps<HTMLSpanElement, EmojiKnownProps>>;
declare const Emoji: react.ForwardRefExoticComponent<{
    label?: string | undefined;
    size?: number | undefined;
    symbol: string;
    as?: react.ElementType | undefined;
    theme?: Theme | undefined;
    list?: string | undefined;
    download?: any;
    key?: react.Key | null | undefined;
    style?: react.CSSProperties | undefined;
    name?: string | undefined;
    color?: string | undefined;
    hidden?: boolean | undefined;
    start?: number | undefined;
    height?: string | number | undefined;
    width?: string | number | undefined;
    wrap?: string | undefined;
    content?: string | undefined;
    readOnly?: boolean | undefined;
    low?: number | undefined;
    high?: number | undefined;
    cite?: string | undefined;
    data?: string | undefined;
    form?: string | undefined;
    slot?: string | undefined;
    span?: number | undefined;
    summary?: string | undefined;
    title?: string | undefined;
    pattern?: string | undefined;
    prefix?: string | undefined;
    type?: string | undefined;
    disabled?: boolean | undefined;
    value?: string | number | readonly string[] | undefined;
    accept?: string | undefined;
    acceptCharset?: string | undefined;
    action?: string | undefined;
    allowFullScreen?: boolean | undefined;
    allowTransparency?: boolean | undefined;
    alt?: string | undefined;
    async?: boolean | undefined;
    autoComplete?: string | undefined;
    autoPlay?: boolean | undefined;
    capture?: boolean | "user" | "environment" | undefined;
    cellPadding?: string | number | undefined;
    cellSpacing?: string | number | undefined;
    charSet?: string | undefined;
    challenge?: string | undefined;
    checked?: boolean | undefined;
    classID?: string | undefined;
    cols?: number | undefined;
    colSpan?: number | undefined;
    controls?: boolean | undefined;
    coords?: string | undefined;
    crossOrigin?: "" | "anonymous" | "use-credentials" | undefined;
    dateTime?: string | undefined;
    default?: boolean | undefined;
    defer?: boolean | undefined;
    encType?: string | undefined;
    formAction?: string | undefined;
    formEncType?: string | undefined;
    formMethod?: string | undefined;
    formNoValidate?: boolean | undefined;
    formTarget?: string | undefined;
    frameBorder?: string | number | undefined;
    headers?: string | undefined;
    href?: string | undefined;
    hrefLang?: string | undefined;
    htmlFor?: string | undefined;
    httpEquiv?: string | undefined;
    integrity?: string | undefined;
    keyParams?: string | undefined;
    keyType?: string | undefined;
    kind?: string | undefined;
    loop?: boolean | undefined;
    manifest?: string | undefined;
    marginHeight?: number | undefined;
    marginWidth?: number | undefined;
    max?: string | number | undefined;
    maxLength?: number | undefined;
    media?: string | undefined;
    mediaGroup?: string | undefined;
    method?: string | undefined;
    min?: string | number | undefined;
    minLength?: number | undefined;
    multiple?: boolean | undefined;
    muted?: boolean | undefined;
    noValidate?: boolean | undefined;
    open?: boolean | undefined;
    optimum?: number | undefined;
    placeholder?: string | undefined;
    playsInline?: boolean | undefined;
    poster?: string | undefined;
    preload?: string | undefined;
    required?: boolean | undefined;
    reversed?: boolean | undefined;
    rows?: number | undefined;
    rowSpan?: number | undefined;
    sandbox?: string | undefined;
    scope?: string | undefined;
    scoped?: boolean | undefined;
    scrolling?: string | undefined;
    seamless?: boolean | undefined;
    selected?: boolean | undefined;
    shape?: string | undefined;
    sizes?: string | undefined;
    src?: string | undefined;
    srcDoc?: string | undefined;
    srcLang?: string | undefined;
    srcSet?: string | undefined;
    step?: string | number | undefined;
    target?: string | undefined;
    useMap?: string | undefined;
    wmode?: string | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    autoFocus?: boolean | undefined;
    className?: string | undefined;
    contentEditable?: "inherit" | (boolean | "false" | "true") | "plaintext-only" | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "false" | "true") | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    nonce?: string | undefined;
    spellCheck?: (boolean | "false" | "true") | undefined;
    tabIndex?: number | undefined;
    translate?: "yes" | "no" | undefined;
    radioGroup?: string | undefined;
    role?: react.AriaRole | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    property?: string | undefined;
    rel?: string | undefined;
    resource?: string | undefined;
    rev?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "search" | "email" | "tel" | "text" | "none" | "url" | "numeric" | "decimal" | undefined;
    is?: string | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: (boolean | "false" | "true") | undefined;
    "aria-autocomplete"?: "list" | "none" | "inline" | "both" | undefined;
    "aria-braillelabel"?: string | undefined;
    "aria-brailleroledescription"?: string | undefined;
    "aria-busy"?: (boolean | "false" | "true") | undefined;
    "aria-checked"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colindextext"?: string | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "date" | "time" | "location" | "step" | "page" | "false" | "true" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-description"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: (boolean | "false" | "true") | undefined;
    "aria-dropeffect"?: "copy" | "link" | "none" | "move" | "execute" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: (boolean | "false" | "true") | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: (boolean | "false" | "true") | undefined;
    "aria-haspopup"?: boolean | "menu" | "tree" | "grid" | "dialog" | "listbox" | "false" | "true" | undefined;
    "aria-hidden"?: (boolean | "false" | "true") | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: (boolean | "false" | "true") | undefined;
    "aria-multiline"?: (boolean | "false" | "true") | undefined;
    "aria-multiselectable"?: (boolean | "false" | "true") | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-readonly"?: (boolean | "false" | "true") | undefined;
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    "aria-required"?: (boolean | "false" | "true") | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowindextext"?: string | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: (boolean | "false" | "true") | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    children?: react.ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    } | undefined;
    onCopy?: react.ClipboardEventHandler<HTMLSpanElement> | undefined;
    onCopyCapture?: react.ClipboardEventHandler<HTMLSpanElement> | undefined;
    onCut?: react.ClipboardEventHandler<HTMLSpanElement> | undefined;
    onCutCapture?: react.ClipboardEventHandler<HTMLSpanElement> | undefined;
    onPaste?: react.ClipboardEventHandler<HTMLSpanElement> | undefined;
    onPasteCapture?: react.ClipboardEventHandler<HTMLSpanElement> | undefined;
    onCompositionEnd?: react.CompositionEventHandler<HTMLSpanElement> | undefined;
    onCompositionEndCapture?: react.CompositionEventHandler<HTMLSpanElement> | undefined;
    onCompositionStart?: react.CompositionEventHandler<HTMLSpanElement> | undefined;
    onCompositionStartCapture?: react.CompositionEventHandler<HTMLSpanElement> | undefined;
    onCompositionUpdate?: react.CompositionEventHandler<HTMLSpanElement> | undefined;
    onCompositionUpdateCapture?: react.CompositionEventHandler<HTMLSpanElement> | undefined;
    onFocus?: react.FocusEventHandler<HTMLSpanElement> | undefined;
    onFocusCapture?: react.FocusEventHandler<HTMLSpanElement> | undefined;
    onBlur?: react.FocusEventHandler<HTMLSpanElement> | undefined;
    onBlurCapture?: react.FocusEventHandler<HTMLSpanElement> | undefined;
    onChange?: react.FormEventHandler<HTMLSpanElement> | undefined;
    onChangeCapture?: react.FormEventHandler<HTMLSpanElement> | undefined;
    onBeforeInput?: react.FormEventHandler<HTMLSpanElement> | undefined;
    onBeforeInputCapture?: react.FormEventHandler<HTMLSpanElement> | undefined;
    onInput?: react.FormEventHandler<HTMLSpanElement> | undefined;
    onInputCapture?: react.FormEventHandler<HTMLSpanElement> | undefined;
    onReset?: react.FormEventHandler<HTMLSpanElement> | undefined;
    onResetCapture?: react.FormEventHandler<HTMLSpanElement> | undefined;
    onSubmit?: react.FormEventHandler<HTMLSpanElement> | undefined;
    onSubmitCapture?: react.FormEventHandler<HTMLSpanElement> | undefined;
    onInvalid?: react.FormEventHandler<HTMLSpanElement> | undefined;
    onInvalidCapture?: react.FormEventHandler<HTMLSpanElement> | undefined;
    onLoad?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onLoadCapture?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onError?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onErrorCapture?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onKeyDown?: react.KeyboardEventHandler<HTMLSpanElement> | undefined;
    onKeyDownCapture?: react.KeyboardEventHandler<HTMLSpanElement> | undefined;
    onKeyPress?: react.KeyboardEventHandler<HTMLSpanElement> | undefined;
    onKeyPressCapture?: react.KeyboardEventHandler<HTMLSpanElement> | undefined;
    onKeyUp?: react.KeyboardEventHandler<HTMLSpanElement> | undefined;
    onKeyUpCapture?: react.KeyboardEventHandler<HTMLSpanElement> | undefined;
    onAbort?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onAbortCapture?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onCanPlay?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onCanPlayCapture?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onCanPlayThrough?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onCanPlayThroughCapture?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onDurationChange?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onDurationChangeCapture?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onEmptied?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onEmptiedCapture?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onEncrypted?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onEncryptedCapture?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onEnded?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onEndedCapture?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onLoadedData?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onLoadedDataCapture?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onLoadedMetadata?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onLoadedMetadataCapture?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onLoadStart?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onLoadStartCapture?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onPause?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onPauseCapture?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onPlay?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onPlayCapture?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onPlaying?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onPlayingCapture?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onProgress?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onProgressCapture?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onRateChange?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onRateChangeCapture?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onResize?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onResizeCapture?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onSeeked?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onSeekedCapture?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onSeeking?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onSeekingCapture?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onStalled?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onStalledCapture?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onSuspend?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onSuspendCapture?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onTimeUpdate?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onTimeUpdateCapture?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onVolumeChange?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onVolumeChangeCapture?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onWaiting?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onWaitingCapture?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onAuxClick?: react.MouseEventHandler<HTMLSpanElement> | undefined;
    onAuxClickCapture?: react.MouseEventHandler<HTMLSpanElement> | undefined;
    onClick?: react.MouseEventHandler<HTMLSpanElement> | undefined;
    onClickCapture?: react.MouseEventHandler<HTMLSpanElement> | undefined;
    onContextMenu?: react.MouseEventHandler<HTMLSpanElement> | undefined;
    onContextMenuCapture?: react.MouseEventHandler<HTMLSpanElement> | undefined;
    onDoubleClick?: react.MouseEventHandler<HTMLSpanElement> | undefined;
    onDoubleClickCapture?: react.MouseEventHandler<HTMLSpanElement> | undefined;
    onDrag?: react.DragEventHandler<HTMLSpanElement> | undefined;
    onDragCapture?: react.DragEventHandler<HTMLSpanElement> | undefined;
    onDragEnd?: react.DragEventHandler<HTMLSpanElement> | undefined;
    onDragEndCapture?: react.DragEventHandler<HTMLSpanElement> | undefined;
    onDragEnter?: react.DragEventHandler<HTMLSpanElement> | undefined;
    onDragEnterCapture?: react.DragEventHandler<HTMLSpanElement> | undefined;
    onDragExit?: react.DragEventHandler<HTMLSpanElement> | undefined;
    onDragExitCapture?: react.DragEventHandler<HTMLSpanElement> | undefined;
    onDragLeave?: react.DragEventHandler<HTMLSpanElement> | undefined;
    onDragLeaveCapture?: react.DragEventHandler<HTMLSpanElement> | undefined;
    onDragOver?: react.DragEventHandler<HTMLSpanElement> | undefined;
    onDragOverCapture?: react.DragEventHandler<HTMLSpanElement> | undefined;
    onDragStart?: react.DragEventHandler<HTMLSpanElement> | undefined;
    onDragStartCapture?: react.DragEventHandler<HTMLSpanElement> | undefined;
    onDrop?: react.DragEventHandler<HTMLSpanElement> | undefined;
    onDropCapture?: react.DragEventHandler<HTMLSpanElement> | undefined;
    onMouseDown?: react.MouseEventHandler<HTMLSpanElement> | undefined;
    onMouseDownCapture?: react.MouseEventHandler<HTMLSpanElement> | undefined;
    onMouseEnter?: react.MouseEventHandler<HTMLSpanElement> | undefined;
    onMouseLeave?: react.MouseEventHandler<HTMLSpanElement> | undefined;
    onMouseMove?: react.MouseEventHandler<HTMLSpanElement> | undefined;
    onMouseMoveCapture?: react.MouseEventHandler<HTMLSpanElement> | undefined;
    onMouseOut?: react.MouseEventHandler<HTMLSpanElement> | undefined;
    onMouseOutCapture?: react.MouseEventHandler<HTMLSpanElement> | undefined;
    onMouseOver?: react.MouseEventHandler<HTMLSpanElement> | undefined;
    onMouseOverCapture?: react.MouseEventHandler<HTMLSpanElement> | undefined;
    onMouseUp?: react.MouseEventHandler<HTMLSpanElement> | undefined;
    onMouseUpCapture?: react.MouseEventHandler<HTMLSpanElement> | undefined;
    onSelect?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onSelectCapture?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onTouchCancel?: react.TouchEventHandler<HTMLSpanElement> | undefined;
    onTouchCancelCapture?: react.TouchEventHandler<HTMLSpanElement> | undefined;
    onTouchEnd?: react.TouchEventHandler<HTMLSpanElement> | undefined;
    onTouchEndCapture?: react.TouchEventHandler<HTMLSpanElement> | undefined;
    onTouchMove?: react.TouchEventHandler<HTMLSpanElement> | undefined;
    onTouchMoveCapture?: react.TouchEventHandler<HTMLSpanElement> | undefined;
    onTouchStart?: react.TouchEventHandler<HTMLSpanElement> | undefined;
    onTouchStartCapture?: react.TouchEventHandler<HTMLSpanElement> | undefined;
    onPointerDown?: react.PointerEventHandler<HTMLSpanElement> | undefined;
    onPointerDownCapture?: react.PointerEventHandler<HTMLSpanElement> | undefined;
    onPointerMove?: react.PointerEventHandler<HTMLSpanElement> | undefined;
    onPointerMoveCapture?: react.PointerEventHandler<HTMLSpanElement> | undefined;
    onPointerUp?: react.PointerEventHandler<HTMLSpanElement> | undefined;
    onPointerUpCapture?: react.PointerEventHandler<HTMLSpanElement> | undefined;
    onPointerCancel?: react.PointerEventHandler<HTMLSpanElement> | undefined;
    onPointerCancelCapture?: react.PointerEventHandler<HTMLSpanElement> | undefined;
    onPointerEnter?: react.PointerEventHandler<HTMLSpanElement> | undefined;
    onPointerLeave?: react.PointerEventHandler<HTMLSpanElement> | undefined;
    onPointerOver?: react.PointerEventHandler<HTMLSpanElement> | undefined;
    onPointerOverCapture?: react.PointerEventHandler<HTMLSpanElement> | undefined;
    onPointerOut?: react.PointerEventHandler<HTMLSpanElement> | undefined;
    onPointerOutCapture?: react.PointerEventHandler<HTMLSpanElement> | undefined;
    onGotPointerCapture?: react.PointerEventHandler<HTMLSpanElement> | undefined;
    onGotPointerCaptureCapture?: react.PointerEventHandler<HTMLSpanElement> | undefined;
    onLostPointerCapture?: react.PointerEventHandler<HTMLSpanElement> | undefined;
    onLostPointerCaptureCapture?: react.PointerEventHandler<HTMLSpanElement> | undefined;
    onScroll?: react.UIEventHandler<HTMLSpanElement> | undefined;
    onScrollCapture?: react.UIEventHandler<HTMLSpanElement> | undefined;
    onWheel?: react.WheelEventHandler<HTMLSpanElement> | undefined;
    onWheelCapture?: react.WheelEventHandler<HTMLSpanElement> | undefined;
    onAnimationStart?: react.AnimationEventHandler<HTMLSpanElement> | undefined;
    onAnimationStartCapture?: react.AnimationEventHandler<HTMLSpanElement> | undefined;
    onAnimationEnd?: react.AnimationEventHandler<HTMLSpanElement> | undefined;
    onAnimationEndCapture?: react.AnimationEventHandler<HTMLSpanElement> | undefined;
    onAnimationIteration?: react.AnimationEventHandler<HTMLSpanElement> | undefined;
    onAnimationIterationCapture?: react.AnimationEventHandler<HTMLSpanElement> | undefined;
    onTransitionEnd?: react.TransitionEventHandler<HTMLSpanElement> | undefined;
    onTransitionEndCapture?: react.TransitionEventHandler<HTMLSpanElement> | undefined;
} & react.RefAttributes<HTMLSpanElement>>;

type FieldValidations = 'email' | `equalsTo:${string}` | 'password' | 'phoneBR' | 'phoneUS';
interface FieldInputHandlers<T extends HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement> {
    onBlur?: FocusEventHandler<T>;
    onChange?: ChangeEventHandler<T>;
    onFocus?: FocusEventHandler<T>;
}
interface FieldExcludedProps {
    children?: never;
    datePickerProps?: never;
    dropdownProps?: never;
    formatter?: never;
    items?: never;
    onBlur?: never;
    onFocus?: never;
    validationOptions?: never;
}
interface FieldBaseProps extends Pick<FormGroupProps, 'assistiveText' | 'hideAssistiveText' | 'inline' | 'label' | 'required' | 'style'>, WithAccent, WithBorderless, WithDisabled {
    autoComplete?: string;
    clearError?: () => void;
    debug?: boolean;
    id?: string;
    maxLength?: number;
    minLength?: number;
    name: string;
    placeholder?: string;
    readOnly?: boolean;
    setValueAs?: (value: any) => any;
    skipValidation?: boolean;
    validations?: FieldValidations[];
    value?: any;
}
type FieldCheckboxProps = Simplify<FieldBaseProps & Omit<FieldExcludedProps, 'items'> & {
    items: CheckboxItem[];
    onChange?: (value: Array<string>) => void;
    type: 'checkbox';
}>;
type FieldDatePickerProps = Simplify<FieldBaseProps & Omit<FieldExcludedProps, 'datePickerProps'> & {
    datePickerProps?: Simplify<Omit<DatePickerSelectorProps, 'placeholder'>>;
    onChange?: (selection: DatePickerRangeParameter | string) => void;
    type: 'datePicker';
}>;
type FieldDropdownProps = Simplify<FieldBaseProps & Omit<FieldExcludedProps, 'dropdownProps' | 'items'> & {
    dropdownProps?: Omit<DropdownProps, 'disabled' | 'inputOptions' | 'items' | 'onChange' | 'placeholder' | 'width'>;
    items: DropdownOption[];
    onChange?: (value: StringOrNumber | Array<StringOrNumber>) => void;
    type: 'dropdown';
}>;
type FieldInputProps = Simplify<FieldBaseProps & Omit<FieldExcludedProps, 'formatter' | 'onBlur' | 'onFocus'> & Omit<FieldInputHandlers<HTMLInputElement>, 'onChange'> & {
    formatter?: 'money' | 'number' | 'phoneBR' | 'phoneUS';
    onChange?: (value: string) => void;
    type: Exclude<InputTypes, 'password'>;
}>;
type FieldPasswordProps = Simplify<FieldBaseProps & Omit<FieldExcludedProps, 'onBlur' | 'onFocus' | 'validationOptions'> & Omit<FieldInputHandlers<HTMLInputElement>, 'onChange'> & {
    onChange?: (value: string) => void;
    type: 'password';
    validationOptions?: ValidatePasswordOptions;
}>;
type FieldRadioProps = Simplify<FieldBaseProps & Omit<FieldExcludedProps, 'items'> & {
    items: RadioItem[];
    onChange?: (value: string) => void;
    type: 'radio';
}>;
type FieldSelectProps = Simplify<FieldBaseProps & Omit<FieldExcludedProps, 'children' | 'onBlur' | 'onFocus'> & Omit<FieldInputHandlers<HTMLSelectElement>, 'onChange'> & {
    children: ReactNode[];
    onChange?: (value: string) => void;
    type: 'select';
}>;
type FieldTextareaProps = Simplify<FieldBaseProps & Omit<FieldExcludedProps, 'onBlur' | 'onFocus'> & Omit<FieldInputHandlers<HTMLTextAreaElement>, 'onChange'> & {
    onChange?: (value: string) => void;
    rows?: number;
    type: 'textarea';
}>;
type FieldToggleProps = Simplify<FieldBaseProps & FieldExcludedProps & {
    onChange?: (value: boolean) => void;
    type: 'toggle';
}>;
type FieldProps = FieldCheckboxProps | FieldDatePickerProps | FieldDropdownProps | FieldInputProps | FieldPasswordProps | FieldRadioProps | FieldSelectProps | FieldTextareaProps | FieldToggleProps;

declare function Field<T extends FieldProps>(props: T): react_jsx_runtime.JSX.Element;
declare namespace Field {
    var displayName: string;
}

interface FormRenderProps<T extends FieldValues = FieldValues> {
    formMethods: UseFormReturn<T>;
}
type FormProps<T extends FieldValues> = Simplify<UseFormProps<T> & {
    children: (props: FormRenderProps<T>) => JSX.Element;
}>;
/**
 A wrapper for the `react-hook-form` FormProvider for use with the **Field** component.

 It will execute the `children` with the `formMethods` from the `useForm` hook as props. You can use it inline or with a functional component.

 ```tsx
 import { Box, Button, Field, Form, FormProps, FormSubmitHandler } from '@gilbarbara/components';

 interface FormData {
   name: string;
 }

 function EditFormFn({ formMethods }: FormProps<FormData>) {
   const { formState: { isDirty }, handleSubmit, } = formMethods;

   const handleFormSubmit: SubmitHandler<FormData> = formData => {
     console.log(formData);
   };

   return (
     <Box as="form" method="POST" onSubmit={handleSubmit(handleFormSubmit)}>
       <Field label="Name" name="name" placeholder="Your name" required type="text" />

       <Button disabled={!isDirty} type="submit">
         Send
       </Button>
     </Box>
   );
 }

 export default function EditForm() {
   return <Form defaultValues={{ name: 'Test User' }}>{EditFormFn}</Form>;
 }
 ```
 */
declare function Form<T extends PlainObject<any> = PlainObject<any>>({ children, ...props }: FormProps<T>): react_jsx_runtime.JSX.Element;
declare namespace Form {
    var displayName: string;
}

interface FormGroupKnownProps extends StyledProps, WithBorder, WithChildren, WithInline, WithLayout, WithMargin, WithPadding, WithRadius {
    assistiveText?: ReactNode;
    error?: ReactNode;
    hideAssistiveText?: boolean;
    label?: ReactNode;
    labelId?: string;
    labelInfo?: ReactNode;
    labelStyles?: CSSProperties;
    required?: boolean;
    skipIcon?: boolean;
    valid?: boolean;
}
type FormGroupProps = Simplify<OmitElementProps<HTMLElement, FormGroupKnownProps>>;
declare const FormGroup: react.ForwardRefExoticComponent<{
    assistiveText?: ReactNode;
    error?: ReactNode;
    hideAssistiveText?: boolean | undefined;
    label?: ReactNode;
    labelId?: string | undefined;
    labelInfo?: ReactNode;
    labelStyles?: CSSProperties | undefined;
    required?: boolean | undefined;
    skipIcon?: boolean | undefined;
    valid?: boolean | undefined;
    as?: react.ElementType | undefined;
    theme?: Theme | undefined;
    border?: boolean | BorderItemSide | BorderItem | BorderItem[] | undefined;
    children: ReactNode;
    inline?: boolean | undefined;
    opacity?: number | csstype.Property.Opacity | undefined;
    overflow?: csstype.Property.Overflow | undefined;
    pointerEvents?: csstype.Property.PointerEvents | undefined;
    textAlign?: csstype.Property.TextAlign | undefined;
    transform?: csstype.Property.Transform | undefined;
    transformOrigin?: csstype.Property.TransformOrigin<0 | (string & {})> | undefined;
    transition?: csstype.Property.Transition<string & {}> | undefined;
    display?: csstype.Property.Display | undefined;
    height?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | undefined;
    maxHeight?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "none" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "-webkit-min-content" | "intrinsic" | undefined;
    maxWidth?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "none" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "-webkit-min-content" | "intrinsic" | undefined;
    minHeight?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "-webkit-min-content" | "intrinsic" | undefined;
    minWidth?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "-webkit-min-content" | "intrinsic" | "-webkit-fill-available" | "min-intrinsic" | undefined;
    width?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "intrinsic" | "min-intrinsic" | undefined;
    margin?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    mb?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    ml?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mr?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mt?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mx?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    my?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    padding?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    pb?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    pl?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    pr?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    pt?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    px?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    py?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    radius?: false | "sm" | "md" | "lg" | "xs" | "xl" | "xxs" | "round" | {
        bottom?: "sm" | "md" | "lg" | "xs" | "xl" | "xxs" | "round" | undefined;
        left?: "sm" | "md" | "lg" | "xs" | "xl" | "xxs" | "round" | undefined;
        right?: "sm" | "md" | "lg" | "xs" | "xl" | "xxs" | "round" | undefined;
        top?: "sm" | "md" | "lg" | "xs" | "xl" | "xxs" | "round" | undefined;
    } | undefined;
    list?: string | undefined;
    download?: any;
    key?: react.Key | null | undefined;
    style?: CSSProperties | undefined;
    name?: string | undefined;
    color?: string | undefined;
    hidden?: boolean | undefined;
    start?: number | undefined;
    wrap?: string | undefined;
    content?: string | undefined;
    readOnly?: boolean | undefined;
    low?: number | undefined;
    high?: number | undefined;
    cite?: string | undefined;
    data?: string | undefined;
    form?: string | undefined;
    slot?: string | undefined;
    span?: number | undefined;
    summary?: string | undefined;
    title?: string | undefined;
    pattern?: string | undefined;
    prefix?: string | undefined;
    type?: string | undefined;
    disabled?: boolean | undefined;
    value?: string | number | readonly string[] | undefined;
    accept?: string | undefined;
    acceptCharset?: string | undefined;
    action?: string | undefined;
    allowFullScreen?: boolean | undefined;
    allowTransparency?: boolean | undefined;
    alt?: string | undefined;
    async?: boolean | undefined;
    autoComplete?: string | undefined;
    autoPlay?: boolean | undefined;
    capture?: boolean | "user" | "environment" | undefined;
    cellPadding?: string | number | undefined;
    cellSpacing?: string | number | undefined;
    charSet?: string | undefined;
    challenge?: string | undefined;
    checked?: boolean | undefined;
    classID?: string | undefined;
    cols?: number | undefined;
    colSpan?: number | undefined;
    controls?: boolean | undefined;
    coords?: string | undefined;
    crossOrigin?: "" | "anonymous" | "use-credentials" | undefined;
    dateTime?: string | undefined;
    default?: boolean | undefined;
    defer?: boolean | undefined;
    encType?: string | undefined;
    formAction?: string | undefined;
    formEncType?: string | undefined;
    formMethod?: string | undefined;
    formNoValidate?: boolean | undefined;
    formTarget?: string | undefined;
    frameBorder?: string | number | undefined;
    headers?: string | undefined;
    href?: string | undefined;
    hrefLang?: string | undefined;
    htmlFor?: string | undefined;
    httpEquiv?: string | undefined;
    integrity?: string | undefined;
    keyParams?: string | undefined;
    keyType?: string | undefined;
    kind?: string | undefined;
    loop?: boolean | undefined;
    manifest?: string | undefined;
    marginHeight?: number | undefined;
    marginWidth?: number | undefined;
    max?: string | number | undefined;
    maxLength?: number | undefined;
    media?: string | undefined;
    mediaGroup?: string | undefined;
    method?: string | undefined;
    min?: string | number | undefined;
    minLength?: number | undefined;
    multiple?: boolean | undefined;
    muted?: boolean | undefined;
    noValidate?: boolean | undefined;
    open?: boolean | undefined;
    optimum?: number | undefined;
    placeholder?: string | undefined;
    playsInline?: boolean | undefined;
    poster?: string | undefined;
    preload?: string | undefined;
    reversed?: boolean | undefined;
    rows?: number | undefined;
    rowSpan?: number | undefined;
    sandbox?: string | undefined;
    scope?: string | undefined;
    scoped?: boolean | undefined;
    scrolling?: string | undefined;
    seamless?: boolean | undefined;
    selected?: boolean | undefined;
    shape?: string | undefined;
    sizes?: string | undefined;
    src?: string | undefined;
    srcDoc?: string | undefined;
    srcLang?: string | undefined;
    srcSet?: string | undefined;
    step?: string | number | undefined;
    target?: string | undefined;
    useMap?: string | undefined;
    wmode?: string | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    autoFocus?: boolean | undefined;
    className?: string | undefined;
    contentEditable?: "inherit" | (boolean | "false" | "true") | "plaintext-only" | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "false" | "true") | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    nonce?: string | undefined;
    spellCheck?: (boolean | "false" | "true") | undefined;
    tabIndex?: number | undefined;
    translate?: "yes" | "no" | undefined;
    radioGroup?: string | undefined;
    role?: react.AriaRole | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    property?: string | undefined;
    rel?: string | undefined;
    resource?: string | undefined;
    rev?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "search" | "email" | "tel" | "text" | "none" | "url" | "numeric" | "decimal" | undefined;
    is?: string | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: (boolean | "false" | "true") | undefined;
    "aria-autocomplete"?: "list" | "none" | "inline" | "both" | undefined;
    "aria-braillelabel"?: string | undefined;
    "aria-brailleroledescription"?: string | undefined;
    "aria-busy"?: (boolean | "false" | "true") | undefined;
    "aria-checked"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colindextext"?: string | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "date" | "time" | "location" | "step" | "page" | "false" | "true" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-description"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: (boolean | "false" | "true") | undefined;
    "aria-dropeffect"?: "copy" | "link" | "none" | "move" | "execute" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: (boolean | "false" | "true") | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: (boolean | "false" | "true") | undefined;
    "aria-haspopup"?: boolean | "menu" | "tree" | "grid" | "dialog" | "listbox" | "false" | "true" | undefined;
    "aria-hidden"?: (boolean | "false" | "true") | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: (boolean | "false" | "true") | undefined;
    "aria-multiline"?: (boolean | "false" | "true") | undefined;
    "aria-multiselectable"?: (boolean | "false" | "true") | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-readonly"?: (boolean | "false" | "true") | undefined;
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    "aria-required"?: (boolean | "false" | "true") | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowindextext"?: string | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: (boolean | "false" | "true") | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    } | undefined;
    onCopy?: react.ClipboardEventHandler<HTMLElement> | undefined;
    onCopyCapture?: react.ClipboardEventHandler<HTMLElement> | undefined;
    onCut?: react.ClipboardEventHandler<HTMLElement> | undefined;
    onCutCapture?: react.ClipboardEventHandler<HTMLElement> | undefined;
    onPaste?: react.ClipboardEventHandler<HTMLElement> | undefined;
    onPasteCapture?: react.ClipboardEventHandler<HTMLElement> | undefined;
    onCompositionEnd?: react.CompositionEventHandler<HTMLElement> | undefined;
    onCompositionEndCapture?: react.CompositionEventHandler<HTMLElement> | undefined;
    onCompositionStart?: react.CompositionEventHandler<HTMLElement> | undefined;
    onCompositionStartCapture?: react.CompositionEventHandler<HTMLElement> | undefined;
    onCompositionUpdate?: react.CompositionEventHandler<HTMLElement> | undefined;
    onCompositionUpdateCapture?: react.CompositionEventHandler<HTMLElement> | undefined;
    onFocus?: react.FocusEventHandler<HTMLElement> | undefined;
    onFocusCapture?: react.FocusEventHandler<HTMLElement> | undefined;
    onBlur?: react.FocusEventHandler<HTMLElement> | undefined;
    onBlurCapture?: react.FocusEventHandler<HTMLElement> | undefined;
    onChange?: react.FormEventHandler<HTMLElement> | undefined;
    onChangeCapture?: react.FormEventHandler<HTMLElement> | undefined;
    onBeforeInput?: react.FormEventHandler<HTMLElement> | undefined;
    onBeforeInputCapture?: react.FormEventHandler<HTMLElement> | undefined;
    onInput?: react.FormEventHandler<HTMLElement> | undefined;
    onInputCapture?: react.FormEventHandler<HTMLElement> | undefined;
    onReset?: react.FormEventHandler<HTMLElement> | undefined;
    onResetCapture?: react.FormEventHandler<HTMLElement> | undefined;
    onSubmit?: react.FormEventHandler<HTMLElement> | undefined;
    onSubmitCapture?: react.FormEventHandler<HTMLElement> | undefined;
    onInvalid?: react.FormEventHandler<HTMLElement> | undefined;
    onInvalidCapture?: react.FormEventHandler<HTMLElement> | undefined;
    onLoad?: react.ReactEventHandler<HTMLElement> | undefined;
    onLoadCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onError?: react.ReactEventHandler<HTMLElement> | undefined;
    onErrorCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onKeyDown?: react.KeyboardEventHandler<HTMLElement> | undefined;
    onKeyDownCapture?: react.KeyboardEventHandler<HTMLElement> | undefined;
    onKeyPress?: react.KeyboardEventHandler<HTMLElement> | undefined;
    onKeyPressCapture?: react.KeyboardEventHandler<HTMLElement> | undefined;
    onKeyUp?: react.KeyboardEventHandler<HTMLElement> | undefined;
    onKeyUpCapture?: react.KeyboardEventHandler<HTMLElement> | undefined;
    onAbort?: react.ReactEventHandler<HTMLElement> | undefined;
    onAbortCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onCanPlay?: react.ReactEventHandler<HTMLElement> | undefined;
    onCanPlayCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onCanPlayThrough?: react.ReactEventHandler<HTMLElement> | undefined;
    onCanPlayThroughCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onDurationChange?: react.ReactEventHandler<HTMLElement> | undefined;
    onDurationChangeCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onEmptied?: react.ReactEventHandler<HTMLElement> | undefined;
    onEmptiedCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onEncrypted?: react.ReactEventHandler<HTMLElement> | undefined;
    onEncryptedCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onEnded?: react.ReactEventHandler<HTMLElement> | undefined;
    onEndedCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onLoadedData?: react.ReactEventHandler<HTMLElement> | undefined;
    onLoadedDataCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onLoadedMetadata?: react.ReactEventHandler<HTMLElement> | undefined;
    onLoadedMetadataCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onLoadStart?: react.ReactEventHandler<HTMLElement> | undefined;
    onLoadStartCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onPause?: react.ReactEventHandler<HTMLElement> | undefined;
    onPauseCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onPlay?: react.ReactEventHandler<HTMLElement> | undefined;
    onPlayCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onPlaying?: react.ReactEventHandler<HTMLElement> | undefined;
    onPlayingCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onProgress?: react.ReactEventHandler<HTMLElement> | undefined;
    onProgressCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onRateChange?: react.ReactEventHandler<HTMLElement> | undefined;
    onRateChangeCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onResize?: react.ReactEventHandler<HTMLElement> | undefined;
    onResizeCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onSeeked?: react.ReactEventHandler<HTMLElement> | undefined;
    onSeekedCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onSeeking?: react.ReactEventHandler<HTMLElement> | undefined;
    onSeekingCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onStalled?: react.ReactEventHandler<HTMLElement> | undefined;
    onStalledCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onSuspend?: react.ReactEventHandler<HTMLElement> | undefined;
    onSuspendCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onTimeUpdate?: react.ReactEventHandler<HTMLElement> | undefined;
    onTimeUpdateCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onVolumeChange?: react.ReactEventHandler<HTMLElement> | undefined;
    onVolumeChangeCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onWaiting?: react.ReactEventHandler<HTMLElement> | undefined;
    onWaitingCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onAuxClick?: react.MouseEventHandler<HTMLElement> | undefined;
    onAuxClickCapture?: react.MouseEventHandler<HTMLElement> | undefined;
    onClick?: react.MouseEventHandler<HTMLElement> | undefined;
    onClickCapture?: react.MouseEventHandler<HTMLElement> | undefined;
    onContextMenu?: react.MouseEventHandler<HTMLElement> | undefined;
    onContextMenuCapture?: react.MouseEventHandler<HTMLElement> | undefined;
    onDoubleClick?: react.MouseEventHandler<HTMLElement> | undefined;
    onDoubleClickCapture?: react.MouseEventHandler<HTMLElement> | undefined;
    onDrag?: react.DragEventHandler<HTMLElement> | undefined;
    onDragCapture?: react.DragEventHandler<HTMLElement> | undefined;
    onDragEnd?: react.DragEventHandler<HTMLElement> | undefined;
    onDragEndCapture?: react.DragEventHandler<HTMLElement> | undefined;
    onDragEnter?: react.DragEventHandler<HTMLElement> | undefined;
    onDragEnterCapture?: react.DragEventHandler<HTMLElement> | undefined;
    onDragExit?: react.DragEventHandler<HTMLElement> | undefined;
    onDragExitCapture?: react.DragEventHandler<HTMLElement> | undefined;
    onDragLeave?: react.DragEventHandler<HTMLElement> | undefined;
    onDragLeaveCapture?: react.DragEventHandler<HTMLElement> | undefined;
    onDragOver?: react.DragEventHandler<HTMLElement> | undefined;
    onDragOverCapture?: react.DragEventHandler<HTMLElement> | undefined;
    onDragStart?: react.DragEventHandler<HTMLElement> | undefined;
    onDragStartCapture?: react.DragEventHandler<HTMLElement> | undefined;
    onDrop?: react.DragEventHandler<HTMLElement> | undefined;
    onDropCapture?: react.DragEventHandler<HTMLElement> | undefined;
    onMouseDown?: react.MouseEventHandler<HTMLElement> | undefined;
    onMouseDownCapture?: react.MouseEventHandler<HTMLElement> | undefined;
    onMouseEnter?: react.MouseEventHandler<HTMLElement> | undefined;
    onMouseLeave?: react.MouseEventHandler<HTMLElement> | undefined;
    onMouseMove?: react.MouseEventHandler<HTMLElement> | undefined;
    onMouseMoveCapture?: react.MouseEventHandler<HTMLElement> | undefined;
    onMouseOut?: react.MouseEventHandler<HTMLElement> | undefined;
    onMouseOutCapture?: react.MouseEventHandler<HTMLElement> | undefined;
    onMouseOver?: react.MouseEventHandler<HTMLElement> | undefined;
    onMouseOverCapture?: react.MouseEventHandler<HTMLElement> | undefined;
    onMouseUp?: react.MouseEventHandler<HTMLElement> | undefined;
    onMouseUpCapture?: react.MouseEventHandler<HTMLElement> | undefined;
    onSelect?: react.ReactEventHandler<HTMLElement> | undefined;
    onSelectCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onTouchCancel?: react.TouchEventHandler<HTMLElement> | undefined;
    onTouchCancelCapture?: react.TouchEventHandler<HTMLElement> | undefined;
    onTouchEnd?: react.TouchEventHandler<HTMLElement> | undefined;
    onTouchEndCapture?: react.TouchEventHandler<HTMLElement> | undefined;
    onTouchMove?: react.TouchEventHandler<HTMLElement> | undefined;
    onTouchMoveCapture?: react.TouchEventHandler<HTMLElement> | undefined;
    onTouchStart?: react.TouchEventHandler<HTMLElement> | undefined;
    onTouchStartCapture?: react.TouchEventHandler<HTMLElement> | undefined;
    onPointerDown?: react.PointerEventHandler<HTMLElement> | undefined;
    onPointerDownCapture?: react.PointerEventHandler<HTMLElement> | undefined;
    onPointerMove?: react.PointerEventHandler<HTMLElement> | undefined;
    onPointerMoveCapture?: react.PointerEventHandler<HTMLElement> | undefined;
    onPointerUp?: react.PointerEventHandler<HTMLElement> | undefined;
    onPointerUpCapture?: react.PointerEventHandler<HTMLElement> | undefined;
    onPointerCancel?: react.PointerEventHandler<HTMLElement> | undefined;
    onPointerCancelCapture?: react.PointerEventHandler<HTMLElement> | undefined;
    onPointerEnter?: react.PointerEventHandler<HTMLElement> | undefined;
    onPointerLeave?: react.PointerEventHandler<HTMLElement> | undefined;
    onPointerOver?: react.PointerEventHandler<HTMLElement> | undefined;
    onPointerOverCapture?: react.PointerEventHandler<HTMLElement> | undefined;
    onPointerOut?: react.PointerEventHandler<HTMLElement> | undefined;
    onPointerOutCapture?: react.PointerEventHandler<HTMLElement> | undefined;
    onGotPointerCapture?: react.PointerEventHandler<HTMLElement> | undefined;
    onGotPointerCaptureCapture?: react.PointerEventHandler<HTMLElement> | undefined;
    onLostPointerCapture?: react.PointerEventHandler<HTMLElement> | undefined;
    onLostPointerCaptureCapture?: react.PointerEventHandler<HTMLElement> | undefined;
    onScroll?: react.UIEventHandler<HTMLElement> | undefined;
    onScrollCapture?: react.UIEventHandler<HTMLElement> | undefined;
    onWheel?: react.WheelEventHandler<HTMLElement> | undefined;
    onWheelCapture?: react.WheelEventHandler<HTMLElement> | undefined;
    onAnimationStart?: react.AnimationEventHandler<HTMLElement> | undefined;
    onAnimationStartCapture?: react.AnimationEventHandler<HTMLElement> | undefined;
    onAnimationEnd?: react.AnimationEventHandler<HTMLElement> | undefined;
    onAnimationEndCapture?: react.AnimationEventHandler<HTMLElement> | undefined;
    onAnimationIteration?: react.AnimationEventHandler<HTMLElement> | undefined;
    onAnimationIterationCapture?: react.AnimationEventHandler<HTMLElement> | undefined;
    onTransitionEnd?: react.TransitionEventHandler<HTMLElement> | undefined;
    onTransitionEndCapture?: react.TransitionEventHandler<HTMLElement> | undefined;
} & react.RefAttributes<HTMLDivElement>>;

interface GridKnownProps extends StyledProps, WithBorder, WithChildren, WithColors, WithFlexItem, WithLayout, WithMargin, WithPadding, WithPositioning, WithRadius, WithShadow {
    alignContent?: StandardLonghandProperties['alignContent'];
    alignItems?: StandardLonghandProperties['alignItems'];
    autoColumns?: StandardLonghandProperties['gridAutoColumns'];
    autoFlow?: StandardLonghandProperties['gridAutoFlow'];
    autoRows?: StandardLonghandProperties['gridAutoRows'];
    columnGap?: StringOrNumber;
    display?: 'grid' | 'inline-grid';
    gap?: StringOrNumber;
    grid?: StandardShorthandProperties['grid'];
    justifyContent?: StandardLonghandProperties['justifyContent'];
    justifyItems?: StandardLonghandProperties['justifyItems'];
    placeContent?: StandardShorthandProperties['placeContent'];
    placeItems?: StandardShorthandProperties['placeItems'];
    rowGap?: StringOrNumber;
    template?: StandardShorthandProperties['gridTemplate'];
    templateAreas?: StandardLonghandProperties['gridTemplateAreas'];
    templateColumns?: StandardLonghandProperties['gridTemplateColumns'];
    templateRows?: StandardLonghandProperties['gridTemplateRows'];
}
type GridProps = Simplify<OmitElementProps<HTMLDivElement, GridKnownProps>>;
declare const Grid: react.ForwardRefExoticComponent<{
    alignContent?: StandardLonghandProperties['alignContent'];
    alignItems?: StandardLonghandProperties['alignItems'];
    autoColumns?: StandardLonghandProperties['gridAutoColumns'];
    autoFlow?: StandardLonghandProperties['gridAutoFlow'];
    autoRows?: StandardLonghandProperties['gridAutoRows'];
    columnGap?: StringOrNumber | undefined;
    display?: "grid" | "inline-grid" | undefined;
    gap?: StringOrNumber | undefined;
    grid?: StandardShorthandProperties['grid'];
    justifyContent?: StandardLonghandProperties['justifyContent'];
    justifyItems?: StandardLonghandProperties['justifyItems'];
    placeContent?: StandardShorthandProperties['placeContent'];
    placeItems?: StandardShorthandProperties['placeItems'];
    rowGap?: StringOrNumber | undefined;
    template?: StandardShorthandProperties['gridTemplate'];
    templateAreas?: StandardLonghandProperties['gridTemplateAreas'];
    templateColumns?: StandardLonghandProperties['gridTemplateColumns'];
    templateRows?: StandardLonghandProperties['gridTemplateRows'];
    as?: react.ElementType | undefined;
    theme?: Theme | undefined;
    border?: boolean | BorderItemSide | BorderItem | BorderItem[] | undefined;
    children: react.ReactNode;
    bg?: VariantWithTones | undefined;
    color?: VariantWithTones | undefined;
    alignSelf?: csstype.Property.AlignSelf | undefined;
    basis?: csstype.Property.FlexBasis<0 | (string & {})> | undefined;
    fill?: boolean | Direction | undefined;
    flex?: boolean | {
        grow?: number | undefined;
        shrink?: number | undefined;
    } | "grow" | "shrink" | undefined;
    justifySelf?: csstype.Property.JustifySelf | undefined;
    order?: csstype.Property.Order | undefined;
    opacity?: number | csstype.Property.Opacity | undefined;
    overflow?: csstype.Property.Overflow | undefined;
    pointerEvents?: csstype.Property.PointerEvents | undefined;
    textAlign?: csstype.Property.TextAlign | undefined;
    transform?: csstype.Property.Transform | undefined;
    transformOrigin?: csstype.Property.TransformOrigin<0 | (string & {})> | undefined;
    transition?: csstype.Property.Transition<string & {}> | undefined;
    height?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | undefined;
    maxHeight?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "none" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "-webkit-min-content" | "intrinsic" | undefined;
    maxWidth?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "none" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "-webkit-min-content" | "intrinsic" | undefined;
    minHeight?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "-webkit-min-content" | "intrinsic" | undefined;
    minWidth?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "-webkit-min-content" | "intrinsic" | "-webkit-fill-available" | "min-intrinsic" | undefined;
    width?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "intrinsic" | "min-intrinsic" | undefined;
    margin?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    mb?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    ml?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mr?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mt?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mx?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    my?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    padding?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    pb?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    pl?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    pr?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    pt?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    px?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    py?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    bottom?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | undefined;
    left?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | undefined;
    position?: csstype.Property.Position | undefined;
    right?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | undefined;
    top?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | undefined;
    zIndex?: number | csstype.Property.ZIndex | undefined;
    radius?: false | "sm" | "md" | "lg" | "xs" | "xl" | "xxs" | "round" | {
        bottom?: "sm" | "md" | "lg" | "xs" | "xl" | "xxs" | "round" | undefined;
        left?: "sm" | "md" | "lg" | "xs" | "xl" | "xxs" | "round" | undefined;
        right?: "sm" | "md" | "lg" | "xs" | "xl" | "xxs" | "round" | undefined;
        top?: "sm" | "md" | "lg" | "xs" | "xl" | "xxs" | "round" | undefined;
    } | undefined;
    shadow?: false | "low" | "mid" | "high" | undefined;
    list?: string | undefined;
    download?: any;
    key?: react.Key | null | undefined;
    style?: react.CSSProperties | undefined;
    name?: string | undefined;
    hidden?: boolean | undefined;
    start?: number | undefined;
    wrap?: string | undefined;
    content?: string | undefined;
    readOnly?: boolean | undefined;
    low?: number | undefined;
    high?: number | undefined;
    cite?: string | undefined;
    data?: string | undefined;
    form?: string | undefined;
    label?: string | undefined;
    slot?: string | undefined;
    span?: number | undefined;
    summary?: string | undefined;
    title?: string | undefined;
    pattern?: string | undefined;
    prefix?: string | undefined;
    type?: string | undefined;
    disabled?: boolean | undefined;
    value?: string | number | readonly string[] | undefined;
    accept?: string | undefined;
    acceptCharset?: string | undefined;
    action?: string | undefined;
    allowFullScreen?: boolean | undefined;
    allowTransparency?: boolean | undefined;
    alt?: string | undefined;
    async?: boolean | undefined;
    autoComplete?: string | undefined;
    autoPlay?: boolean | undefined;
    capture?: boolean | "user" | "environment" | undefined;
    cellPadding?: string | number | undefined;
    cellSpacing?: string | number | undefined;
    charSet?: string | undefined;
    challenge?: string | undefined;
    checked?: boolean | undefined;
    classID?: string | undefined;
    cols?: number | undefined;
    colSpan?: number | undefined;
    controls?: boolean | undefined;
    coords?: string | undefined;
    crossOrigin?: "" | "anonymous" | "use-credentials" | undefined;
    dateTime?: string | undefined;
    default?: boolean | undefined;
    defer?: boolean | undefined;
    encType?: string | undefined;
    formAction?: string | undefined;
    formEncType?: string | undefined;
    formMethod?: string | undefined;
    formNoValidate?: boolean | undefined;
    formTarget?: string | undefined;
    frameBorder?: string | number | undefined;
    headers?: string | undefined;
    href?: string | undefined;
    hrefLang?: string | undefined;
    htmlFor?: string | undefined;
    httpEquiv?: string | undefined;
    integrity?: string | undefined;
    keyParams?: string | undefined;
    keyType?: string | undefined;
    kind?: string | undefined;
    loop?: boolean | undefined;
    manifest?: string | undefined;
    marginHeight?: number | undefined;
    marginWidth?: number | undefined;
    max?: string | number | undefined;
    maxLength?: number | undefined;
    media?: string | undefined;
    mediaGroup?: string | undefined;
    method?: string | undefined;
    min?: string | number | undefined;
    minLength?: number | undefined;
    multiple?: boolean | undefined;
    muted?: boolean | undefined;
    noValidate?: boolean | undefined;
    open?: boolean | undefined;
    optimum?: number | undefined;
    placeholder?: string | undefined;
    playsInline?: boolean | undefined;
    poster?: string | undefined;
    preload?: string | undefined;
    required?: boolean | undefined;
    reversed?: boolean | undefined;
    rows?: number | undefined;
    rowSpan?: number | undefined;
    sandbox?: string | undefined;
    scope?: string | undefined;
    scoped?: boolean | undefined;
    scrolling?: string | undefined;
    seamless?: boolean | undefined;
    selected?: boolean | undefined;
    shape?: string | undefined;
    sizes?: string | undefined;
    src?: string | undefined;
    srcDoc?: string | undefined;
    srcLang?: string | undefined;
    srcSet?: string | undefined;
    step?: string | number | undefined;
    target?: string | undefined;
    useMap?: string | undefined;
    wmode?: string | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    autoFocus?: boolean | undefined;
    className?: string | undefined;
    contentEditable?: "inherit" | (boolean | "false" | "true") | "plaintext-only" | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "false" | "true") | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    nonce?: string | undefined;
    spellCheck?: (boolean | "false" | "true") | undefined;
    tabIndex?: number | undefined;
    translate?: "yes" | "no" | undefined;
    radioGroup?: string | undefined;
    role?: react.AriaRole | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    property?: string | undefined;
    rel?: string | undefined;
    resource?: string | undefined;
    rev?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "search" | "email" | "tel" | "text" | "none" | "url" | "numeric" | "decimal" | undefined;
    is?: string | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: (boolean | "false" | "true") | undefined;
    "aria-autocomplete"?: "list" | "none" | "inline" | "both" | undefined;
    "aria-braillelabel"?: string | undefined;
    "aria-brailleroledescription"?: string | undefined;
    "aria-busy"?: (boolean | "false" | "true") | undefined;
    "aria-checked"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colindextext"?: string | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "date" | "time" | "location" | "step" | "page" | "false" | "true" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-description"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: (boolean | "false" | "true") | undefined;
    "aria-dropeffect"?: "copy" | "link" | "none" | "move" | "execute" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: (boolean | "false" | "true") | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: (boolean | "false" | "true") | undefined;
    "aria-haspopup"?: boolean | "menu" | "tree" | "grid" | "dialog" | "listbox" | "false" | "true" | undefined;
    "aria-hidden"?: (boolean | "false" | "true") | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: (boolean | "false" | "true") | undefined;
    "aria-multiline"?: (boolean | "false" | "true") | undefined;
    "aria-multiselectable"?: (boolean | "false" | "true") | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-readonly"?: (boolean | "false" | "true") | undefined;
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    "aria-required"?: (boolean | "false" | "true") | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowindextext"?: string | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: (boolean | "false" | "true") | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    } | undefined;
    onCopy?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCopyCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCut?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCutCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onPaste?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onPasteCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCompositionEnd?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionEndCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionStart?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionStartCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionUpdate?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionUpdateCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onFocus?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onFocusCapture?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onBlur?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onBlurCapture?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onChange?: react.FormEventHandler<HTMLDivElement> | undefined;
    onChangeCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onBeforeInput?: react.FormEventHandler<HTMLDivElement> | undefined;
    onBeforeInputCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInput?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInputCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onReset?: react.FormEventHandler<HTMLDivElement> | undefined;
    onResetCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onSubmit?: react.FormEventHandler<HTMLDivElement> | undefined;
    onSubmitCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInvalid?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInvalidCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onLoad?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onError?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onErrorCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onKeyDown?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyDownCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyPress?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyPressCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyUp?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyUpCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onAbort?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onAbortCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlay?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayThrough?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayThroughCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onDurationChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onDurationChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEmptied?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEmptiedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEncrypted?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEncryptedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEnded?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEndedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedData?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedDataCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedMetadata?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedMetadataCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadStart?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadStartCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPause?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPauseCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlay?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlayCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlaying?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlayingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onProgress?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onProgressCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onRateChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onRateChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onResize?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onResizeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeeked?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeekedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeeking?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeekingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onStalled?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onStalledCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSuspend?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSuspendCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onTimeUpdate?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onTimeUpdateCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onVolumeChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onVolumeChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onWaiting?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onWaitingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onAuxClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onAuxClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onContextMenu?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onContextMenuCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onDoubleClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onDoubleClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onDrag?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnd?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEndCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnter?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnterCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragExit?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragExitCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragLeave?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragLeaveCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragOver?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragOverCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragStart?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragStartCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDrop?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDropCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onMouseDown?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseDownCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseEnter?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseLeave?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseMove?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseMoveCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOut?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOutCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOver?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOverCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseUp?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseUpCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onSelect?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSelectCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onTouchCancel?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchCancelCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchEnd?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchEndCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchMove?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchMoveCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchStart?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchStartCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onPointerDown?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerDownCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerMove?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerMoveCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerUp?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerUpCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerCancel?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerCancelCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerEnter?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerLeave?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOver?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOverCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOut?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOutCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onGotPointerCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onGotPointerCaptureCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onLostPointerCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onLostPointerCaptureCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onScroll?: react.UIEventHandler<HTMLDivElement> | undefined;
    onScrollCapture?: react.UIEventHandler<HTMLDivElement> | undefined;
    onWheel?: react.WheelEventHandler<HTMLDivElement> | undefined;
    onWheelCapture?: react.WheelEventHandler<HTMLDivElement> | undefined;
    onAnimationStart?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationStartCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationEnd?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationEndCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationIteration?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationIterationCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onTransitionEnd?: react.TransitionEventHandler<HTMLDivElement> | undefined;
    onTransitionEndCapture?: react.TransitionEventHandler<HTMLDivElement> | undefined;
} & react.RefAttributes<HTMLDivElement>>;

interface HeadingKnownProps extends StyledProps, WithAlign, WithBorder, Pick<WithColors, 'color'>, WithChildren, WithLight, WithMargin, Omit<WithTextOptions, 'bold' | 'size'> {
}
type HeadingProps = Simplify<OmitElementProps<HTMLHeadingElement, HeadingKnownProps>>;
type HeadingLargeProps = Simplify<OmitElementProps<HTMLHeadingElement, HeadingKnownProps & {
    large?: boolean;
}>>;

interface IconKnownProps extends StyledProps, Pick<WithColors, 'color'>, WithMargin {
    name: Icons;
    /** @default 16 */
    size?: number;
    spin?: boolean;
    style?: CSSProperties;
    title?: ReactNode;
    url: string;
}
type IconProps = Simplify<RequireExactlyOne<IconKnownProps, 'name' | 'url'>>;
declare const Icon: react.ForwardRefExoticComponent<IconProps & react.RefAttributes<HTMLSpanElement>>;

interface InputKnownProps extends StyledProps, WithAccent, WithBorderless, WithElementSpacing, WithFormElements {
    /** @default false */
    large?: boolean;
    placeholder?: string;
    /** @default text */
    type?: InputTypes;
}
type InputProps = Simplify<OmitElementProps<HTMLInputElement, InputKnownProps, 'name' | 'type' | 'width'>>;
declare const Input: react.ForwardRefExoticComponent<{
    large?: boolean | undefined;
    placeholder?: string | undefined;
    type?: "number" | "date" | "file" | "search" | "password" | "color" | "email" | "hidden" | "tel" | "text" | undefined;
    as?: react.ElementType | undefined;
    theme?: Theme | undefined;
    accent?: VariantWithTones | undefined;
    borderless?: boolean | undefined;
    prefixSpacing?: boolean | _gilbarbara_types.StringOrNumber | undefined;
    suffixSpacing?: boolean | _gilbarbara_types.StringOrNumber | undefined;
    name: string;
    readOnly?: boolean | undefined;
    width?: _gilbarbara_types.StringOrNumber | undefined;
    disabled?: boolean | undefined;
    list?: string | undefined;
    download?: any;
    key?: react.Key | null | undefined;
    style?: react.CSSProperties | undefined;
    color?: string | undefined;
    hidden?: boolean | undefined;
    start?: number | undefined;
    height?: string | number | undefined;
    wrap?: string | undefined;
    content?: string | undefined;
    low?: number | undefined;
    high?: number | undefined;
    cite?: string | undefined;
    data?: string | undefined;
    form?: string | undefined;
    label?: string | undefined;
    slot?: string | undefined;
    span?: number | undefined;
    summary?: string | undefined;
    title?: string | undefined;
    pattern?: string | undefined;
    prefix?: string | undefined;
    value?: string | number | readonly string[] | undefined;
    accept?: string | undefined;
    acceptCharset?: string | undefined;
    action?: string | undefined;
    allowFullScreen?: boolean | undefined;
    allowTransparency?: boolean | undefined;
    alt?: string | undefined;
    async?: boolean | undefined;
    autoComplete?: string | undefined;
    autoPlay?: boolean | undefined;
    capture?: boolean | "user" | "environment" | undefined;
    cellPadding?: string | number | undefined;
    cellSpacing?: string | number | undefined;
    charSet?: string | undefined;
    challenge?: string | undefined;
    checked?: boolean | undefined;
    classID?: string | undefined;
    cols?: number | undefined;
    colSpan?: number | undefined;
    controls?: boolean | undefined;
    coords?: string | undefined;
    crossOrigin?: "" | "anonymous" | "use-credentials" | undefined;
    dateTime?: string | undefined;
    default?: boolean | undefined;
    defer?: boolean | undefined;
    encType?: string | undefined;
    formAction?: string | undefined;
    formEncType?: string | undefined;
    formMethod?: string | undefined;
    formNoValidate?: boolean | undefined;
    formTarget?: string | undefined;
    frameBorder?: string | number | undefined;
    headers?: string | undefined;
    href?: string | undefined;
    hrefLang?: string | undefined;
    htmlFor?: string | undefined;
    httpEquiv?: string | undefined;
    integrity?: string | undefined;
    keyParams?: string | undefined;
    keyType?: string | undefined;
    kind?: string | undefined;
    loop?: boolean | undefined;
    manifest?: string | undefined;
    marginHeight?: number | undefined;
    marginWidth?: number | undefined;
    max?: string | number | undefined;
    maxLength?: number | undefined;
    media?: string | undefined;
    mediaGroup?: string | undefined;
    method?: string | undefined;
    min?: string | number | undefined;
    minLength?: number | undefined;
    multiple?: boolean | undefined;
    muted?: boolean | undefined;
    noValidate?: boolean | undefined;
    open?: boolean | undefined;
    optimum?: number | undefined;
    playsInline?: boolean | undefined;
    poster?: string | undefined;
    preload?: string | undefined;
    required?: boolean | undefined;
    reversed?: boolean | undefined;
    rows?: number | undefined;
    rowSpan?: number | undefined;
    sandbox?: string | undefined;
    scope?: string | undefined;
    scoped?: boolean | undefined;
    scrolling?: string | undefined;
    seamless?: boolean | undefined;
    selected?: boolean | undefined;
    shape?: string | undefined;
    sizes?: string | undefined;
    src?: string | undefined;
    srcDoc?: string | undefined;
    srcLang?: string | undefined;
    srcSet?: string | undefined;
    step?: string | number | undefined;
    target?: string | undefined;
    useMap?: string | undefined;
    wmode?: string | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    autoFocus?: boolean | undefined;
    className?: string | undefined;
    contentEditable?: "inherit" | (boolean | "false" | "true") | "plaintext-only" | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "false" | "true") | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    nonce?: string | undefined;
    spellCheck?: (boolean | "false" | "true") | undefined;
    tabIndex?: number | undefined;
    translate?: "yes" | "no" | undefined;
    radioGroup?: string | undefined;
    role?: react.AriaRole | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    property?: string | undefined;
    rel?: string | undefined;
    resource?: string | undefined;
    rev?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "search" | "email" | "tel" | "text" | "none" | "url" | "numeric" | "decimal" | undefined;
    is?: string | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: (boolean | "false" | "true") | undefined;
    "aria-autocomplete"?: "list" | "none" | "inline" | "both" | undefined;
    "aria-braillelabel"?: string | undefined;
    "aria-brailleroledescription"?: string | undefined;
    "aria-busy"?: (boolean | "false" | "true") | undefined;
    "aria-checked"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colindextext"?: string | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "date" | "time" | "location" | "step" | "page" | "false" | "true" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-description"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: (boolean | "false" | "true") | undefined;
    "aria-dropeffect"?: "copy" | "link" | "none" | "move" | "execute" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: (boolean | "false" | "true") | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: (boolean | "false" | "true") | undefined;
    "aria-haspopup"?: boolean | "menu" | "tree" | "grid" | "dialog" | "listbox" | "false" | "true" | undefined;
    "aria-hidden"?: (boolean | "false" | "true") | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: (boolean | "false" | "true") | undefined;
    "aria-multiline"?: (boolean | "false" | "true") | undefined;
    "aria-multiselectable"?: (boolean | "false" | "true") | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-readonly"?: (boolean | "false" | "true") | undefined;
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    "aria-required"?: (boolean | "false" | "true") | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowindextext"?: string | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: (boolean | "false" | "true") | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    children?: react.ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    } | undefined;
    onCopy?: react.ClipboardEventHandler<HTMLInputElement> | undefined;
    onCopyCapture?: react.ClipboardEventHandler<HTMLInputElement> | undefined;
    onCut?: react.ClipboardEventHandler<HTMLInputElement> | undefined;
    onCutCapture?: react.ClipboardEventHandler<HTMLInputElement> | undefined;
    onPaste?: react.ClipboardEventHandler<HTMLInputElement> | undefined;
    onPasteCapture?: react.ClipboardEventHandler<HTMLInputElement> | undefined;
    onCompositionEnd?: react.CompositionEventHandler<HTMLInputElement> | undefined;
    onCompositionEndCapture?: react.CompositionEventHandler<HTMLInputElement> | undefined;
    onCompositionStart?: react.CompositionEventHandler<HTMLInputElement> | undefined;
    onCompositionStartCapture?: react.CompositionEventHandler<HTMLInputElement> | undefined;
    onCompositionUpdate?: react.CompositionEventHandler<HTMLInputElement> | undefined;
    onCompositionUpdateCapture?: react.CompositionEventHandler<HTMLInputElement> | undefined;
    onFocus?: react.FocusEventHandler<HTMLInputElement> | undefined;
    onFocusCapture?: react.FocusEventHandler<HTMLInputElement> | undefined;
    onBlur?: react.FocusEventHandler<HTMLInputElement> | undefined;
    onBlurCapture?: react.FocusEventHandler<HTMLInputElement> | undefined;
    onChange?: react.FormEventHandler<HTMLInputElement> | undefined;
    onChangeCapture?: react.FormEventHandler<HTMLInputElement> | undefined;
    onBeforeInput?: react.FormEventHandler<HTMLInputElement> | undefined;
    onBeforeInputCapture?: react.FormEventHandler<HTMLInputElement> | undefined;
    onInput?: react.FormEventHandler<HTMLInputElement> | undefined;
    onInputCapture?: react.FormEventHandler<HTMLInputElement> | undefined;
    onReset?: react.FormEventHandler<HTMLInputElement> | undefined;
    onResetCapture?: react.FormEventHandler<HTMLInputElement> | undefined;
    onSubmit?: react.FormEventHandler<HTMLInputElement> | undefined;
    onSubmitCapture?: react.FormEventHandler<HTMLInputElement> | undefined;
    onInvalid?: react.FormEventHandler<HTMLInputElement> | undefined;
    onInvalidCapture?: react.FormEventHandler<HTMLInputElement> | undefined;
    onLoad?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onLoadCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onError?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onErrorCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onKeyDown?: react.KeyboardEventHandler<HTMLInputElement> | undefined;
    onKeyDownCapture?: react.KeyboardEventHandler<HTMLInputElement> | undefined;
    onKeyPress?: react.KeyboardEventHandler<HTMLInputElement> | undefined;
    onKeyPressCapture?: react.KeyboardEventHandler<HTMLInputElement> | undefined;
    onKeyUp?: react.KeyboardEventHandler<HTMLInputElement> | undefined;
    onKeyUpCapture?: react.KeyboardEventHandler<HTMLInputElement> | undefined;
    onAbort?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onAbortCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onCanPlay?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onCanPlayCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onCanPlayThrough?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onCanPlayThroughCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onDurationChange?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onDurationChangeCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onEmptied?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onEmptiedCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onEncrypted?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onEncryptedCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onEnded?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onEndedCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onLoadedData?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onLoadedDataCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onLoadedMetadata?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onLoadedMetadataCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onLoadStart?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onLoadStartCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onPause?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onPauseCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onPlay?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onPlayCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onPlaying?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onPlayingCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onProgress?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onProgressCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onRateChange?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onRateChangeCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onResize?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onResizeCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onSeeked?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onSeekedCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onSeeking?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onSeekingCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onStalled?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onStalledCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onSuspend?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onSuspendCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onTimeUpdate?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onTimeUpdateCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onVolumeChange?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onVolumeChangeCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onWaiting?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onWaitingCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onAuxClick?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onAuxClickCapture?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onClick?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onClickCapture?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onContextMenu?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onContextMenuCapture?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onDoubleClick?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onDoubleClickCapture?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onDrag?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragCapture?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragEnd?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragEndCapture?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragEnter?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragEnterCapture?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragExit?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragExitCapture?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragLeave?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragLeaveCapture?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragOver?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragOverCapture?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragStart?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragStartCapture?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDrop?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDropCapture?: react.DragEventHandler<HTMLInputElement> | undefined;
    onMouseDown?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseDownCapture?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseEnter?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseLeave?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseMove?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseMoveCapture?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseOut?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseOutCapture?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseOver?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseOverCapture?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseUp?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseUpCapture?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onSelect?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onSelectCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onTouchCancel?: react.TouchEventHandler<HTMLInputElement> | undefined;
    onTouchCancelCapture?: react.TouchEventHandler<HTMLInputElement> | undefined;
    onTouchEnd?: react.TouchEventHandler<HTMLInputElement> | undefined;
    onTouchEndCapture?: react.TouchEventHandler<HTMLInputElement> | undefined;
    onTouchMove?: react.TouchEventHandler<HTMLInputElement> | undefined;
    onTouchMoveCapture?: react.TouchEventHandler<HTMLInputElement> | undefined;
    onTouchStart?: react.TouchEventHandler<HTMLInputElement> | undefined;
    onTouchStartCapture?: react.TouchEventHandler<HTMLInputElement> | undefined;
    onPointerDown?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerDownCapture?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerMove?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerMoveCapture?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerUp?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerUpCapture?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerCancel?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerCancelCapture?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerEnter?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerLeave?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerOver?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerOverCapture?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerOut?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerOutCapture?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onGotPointerCapture?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onGotPointerCaptureCapture?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onLostPointerCapture?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onLostPointerCaptureCapture?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onScroll?: react.UIEventHandler<HTMLInputElement> | undefined;
    onScrollCapture?: react.UIEventHandler<HTMLInputElement> | undefined;
    onWheel?: react.WheelEventHandler<HTMLInputElement> | undefined;
    onWheelCapture?: react.WheelEventHandler<HTMLInputElement> | undefined;
    onAnimationStart?: react.AnimationEventHandler<HTMLInputElement> | undefined;
    onAnimationStartCapture?: react.AnimationEventHandler<HTMLInputElement> | undefined;
    onAnimationEnd?: react.AnimationEventHandler<HTMLInputElement> | undefined;
    onAnimationEndCapture?: react.AnimationEventHandler<HTMLInputElement> | undefined;
    onAnimationIteration?: react.AnimationEventHandler<HTMLInputElement> | undefined;
    onAnimationIterationCapture?: react.AnimationEventHandler<HTMLInputElement> | undefined;
    onTransitionEnd?: react.TransitionEventHandler<HTMLInputElement> | undefined;
    onTransitionEndCapture?: react.TransitionEventHandler<HTMLInputElement> | undefined;
} & react.RefAttributes<HTMLInputElement>>;

interface InputColorKnownProps extends StyledProps, WithAccent, WithBorderless, WithFormElements {
    /** @default false */
    large?: boolean;
    /**
     * Get the value only when the color picker is closed.
     */
    onBlur?: FocusEventHandler<HTMLInputElement>;
    /**
     * Get the value every time the color changes.
     */
    onChange?: ChangeEventHandler<HTMLInputElement>;
    /**
     * Debounce onChange event in milliseconds.
     * Set it to 0 for real-time events.
     * @default 250
     */
    onChangeDebounce?: number;
    placeholder?: string;
    /**
     * A 7-character string specifying an RGB color in hexadecimal format.
     */
    value?: string;
}
type InputColorProps = Simplify<OmitElementProps<HTMLInputElement, InputColorKnownProps, 'name' | 'type' | 'width'>>;
declare const InputColor: react.ForwardRefExoticComponent<{
    large?: boolean | undefined;
    onBlur?: FocusEventHandler<HTMLInputElement> | undefined;
    onChange?: ChangeEventHandler<HTMLInputElement> | undefined;
    onChangeDebounce?: number | undefined;
    placeholder?: string | undefined;
    value?: string | undefined;
    as?: react.ElementType | undefined;
    theme?: Theme | undefined;
    accent?: VariantWithTones | undefined;
    borderless?: boolean | undefined;
    name: string;
    readOnly?: boolean | undefined;
    width?: _gilbarbara_types.StringOrNumber | undefined;
    disabled?: boolean | undefined;
    list?: string | undefined;
    download?: any;
    key?: react.Key | null | undefined;
    style?: react.CSSProperties | undefined;
    color?: string | undefined;
    hidden?: boolean | undefined;
    start?: number | undefined;
    height?: string | number | undefined;
    wrap?: string | undefined;
    content?: string | undefined;
    low?: number | undefined;
    high?: number | undefined;
    cite?: string | undefined;
    data?: string | undefined;
    form?: string | undefined;
    label?: string | undefined;
    slot?: string | undefined;
    span?: number | undefined;
    summary?: string | undefined;
    title?: string | undefined;
    pattern?: string | undefined;
    prefix?: string | undefined;
    accept?: string | undefined;
    acceptCharset?: string | undefined;
    action?: string | undefined;
    allowFullScreen?: boolean | undefined;
    allowTransparency?: boolean | undefined;
    alt?: string | undefined;
    async?: boolean | undefined;
    autoComplete?: string | undefined;
    autoPlay?: boolean | undefined;
    capture?: boolean | "user" | "environment" | undefined;
    cellPadding?: string | number | undefined;
    cellSpacing?: string | number | undefined;
    charSet?: string | undefined;
    challenge?: string | undefined;
    checked?: boolean | undefined;
    classID?: string | undefined;
    cols?: number | undefined;
    colSpan?: number | undefined;
    controls?: boolean | undefined;
    coords?: string | undefined;
    crossOrigin?: "" | "anonymous" | "use-credentials" | undefined;
    dateTime?: string | undefined;
    default?: boolean | undefined;
    defer?: boolean | undefined;
    encType?: string | undefined;
    formAction?: string | undefined;
    formEncType?: string | undefined;
    formMethod?: string | undefined;
    formNoValidate?: boolean | undefined;
    formTarget?: string | undefined;
    frameBorder?: string | number | undefined;
    headers?: string | undefined;
    href?: string | undefined;
    hrefLang?: string | undefined;
    htmlFor?: string | undefined;
    httpEquiv?: string | undefined;
    integrity?: string | undefined;
    keyParams?: string | undefined;
    keyType?: string | undefined;
    kind?: string | undefined;
    loop?: boolean | undefined;
    manifest?: string | undefined;
    marginHeight?: number | undefined;
    marginWidth?: number | undefined;
    max?: string | number | undefined;
    maxLength?: number | undefined;
    media?: string | undefined;
    mediaGroup?: string | undefined;
    method?: string | undefined;
    min?: string | number | undefined;
    minLength?: number | undefined;
    multiple?: boolean | undefined;
    muted?: boolean | undefined;
    noValidate?: boolean | undefined;
    open?: boolean | undefined;
    optimum?: number | undefined;
    playsInline?: boolean | undefined;
    poster?: string | undefined;
    preload?: string | undefined;
    required?: boolean | undefined;
    reversed?: boolean | undefined;
    rows?: number | undefined;
    rowSpan?: number | undefined;
    sandbox?: string | undefined;
    scope?: string | undefined;
    scoped?: boolean | undefined;
    scrolling?: string | undefined;
    seamless?: boolean | undefined;
    selected?: boolean | undefined;
    shape?: string | undefined;
    sizes?: string | undefined;
    src?: string | undefined;
    srcDoc?: string | undefined;
    srcLang?: string | undefined;
    srcSet?: string | undefined;
    step?: string | number | undefined;
    target?: string | undefined;
    useMap?: string | undefined;
    wmode?: string | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    autoFocus?: boolean | undefined;
    className?: string | undefined;
    contentEditable?: "inherit" | (boolean | "false" | "true") | "plaintext-only" | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "false" | "true") | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    nonce?: string | undefined;
    spellCheck?: (boolean | "false" | "true") | undefined;
    tabIndex?: number | undefined;
    translate?: "yes" | "no" | undefined;
    radioGroup?: string | undefined;
    role?: react.AriaRole | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    property?: string | undefined;
    rel?: string | undefined;
    resource?: string | undefined;
    rev?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "search" | "email" | "tel" | "text" | "none" | "url" | "numeric" | "decimal" | undefined;
    is?: string | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: (boolean | "false" | "true") | undefined;
    "aria-autocomplete"?: "list" | "none" | "inline" | "both" | undefined;
    "aria-braillelabel"?: string | undefined;
    "aria-brailleroledescription"?: string | undefined;
    "aria-busy"?: (boolean | "false" | "true") | undefined;
    "aria-checked"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colindextext"?: string | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "date" | "time" | "location" | "step" | "page" | "false" | "true" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-description"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: (boolean | "false" | "true") | undefined;
    "aria-dropeffect"?: "copy" | "link" | "none" | "move" | "execute" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: (boolean | "false" | "true") | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: (boolean | "false" | "true") | undefined;
    "aria-haspopup"?: boolean | "menu" | "tree" | "grid" | "dialog" | "listbox" | "false" | "true" | undefined;
    "aria-hidden"?: (boolean | "false" | "true") | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: (boolean | "false" | "true") | undefined;
    "aria-multiline"?: (boolean | "false" | "true") | undefined;
    "aria-multiselectable"?: (boolean | "false" | "true") | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-readonly"?: (boolean | "false" | "true") | undefined;
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    "aria-required"?: (boolean | "false" | "true") | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowindextext"?: string | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: (boolean | "false" | "true") | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    children?: react.ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    } | undefined;
    onCopy?: react.ClipboardEventHandler<HTMLInputElement> | undefined;
    onCopyCapture?: react.ClipboardEventHandler<HTMLInputElement> | undefined;
    onCut?: react.ClipboardEventHandler<HTMLInputElement> | undefined;
    onCutCapture?: react.ClipboardEventHandler<HTMLInputElement> | undefined;
    onPaste?: react.ClipboardEventHandler<HTMLInputElement> | undefined;
    onPasteCapture?: react.ClipboardEventHandler<HTMLInputElement> | undefined;
    onCompositionEnd?: react.CompositionEventHandler<HTMLInputElement> | undefined;
    onCompositionEndCapture?: react.CompositionEventHandler<HTMLInputElement> | undefined;
    onCompositionStart?: react.CompositionEventHandler<HTMLInputElement> | undefined;
    onCompositionStartCapture?: react.CompositionEventHandler<HTMLInputElement> | undefined;
    onCompositionUpdate?: react.CompositionEventHandler<HTMLInputElement> | undefined;
    onCompositionUpdateCapture?: react.CompositionEventHandler<HTMLInputElement> | undefined;
    onFocus?: FocusEventHandler<HTMLInputElement> | undefined;
    onFocusCapture?: FocusEventHandler<HTMLInputElement> | undefined;
    onBlurCapture?: FocusEventHandler<HTMLInputElement> | undefined;
    onChangeCapture?: react.FormEventHandler<HTMLInputElement> | undefined;
    onBeforeInput?: react.FormEventHandler<HTMLInputElement> | undefined;
    onBeforeInputCapture?: react.FormEventHandler<HTMLInputElement> | undefined;
    onInput?: react.FormEventHandler<HTMLInputElement> | undefined;
    onInputCapture?: react.FormEventHandler<HTMLInputElement> | undefined;
    onReset?: react.FormEventHandler<HTMLInputElement> | undefined;
    onResetCapture?: react.FormEventHandler<HTMLInputElement> | undefined;
    onSubmit?: react.FormEventHandler<HTMLInputElement> | undefined;
    onSubmitCapture?: react.FormEventHandler<HTMLInputElement> | undefined;
    onInvalid?: react.FormEventHandler<HTMLInputElement> | undefined;
    onInvalidCapture?: react.FormEventHandler<HTMLInputElement> | undefined;
    onLoad?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onLoadCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onError?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onErrorCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onKeyDown?: react.KeyboardEventHandler<HTMLInputElement> | undefined;
    onKeyDownCapture?: react.KeyboardEventHandler<HTMLInputElement> | undefined;
    onKeyPress?: react.KeyboardEventHandler<HTMLInputElement> | undefined;
    onKeyPressCapture?: react.KeyboardEventHandler<HTMLInputElement> | undefined;
    onKeyUp?: react.KeyboardEventHandler<HTMLInputElement> | undefined;
    onKeyUpCapture?: react.KeyboardEventHandler<HTMLInputElement> | undefined;
    onAbort?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onAbortCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onCanPlay?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onCanPlayCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onCanPlayThrough?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onCanPlayThroughCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onDurationChange?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onDurationChangeCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onEmptied?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onEmptiedCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onEncrypted?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onEncryptedCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onEnded?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onEndedCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onLoadedData?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onLoadedDataCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onLoadedMetadata?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onLoadedMetadataCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onLoadStart?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onLoadStartCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onPause?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onPauseCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onPlay?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onPlayCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onPlaying?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onPlayingCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onProgress?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onProgressCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onRateChange?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onRateChangeCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onResize?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onResizeCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onSeeked?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onSeekedCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onSeeking?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onSeekingCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onStalled?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onStalledCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onSuspend?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onSuspendCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onTimeUpdate?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onTimeUpdateCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onVolumeChange?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onVolumeChangeCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onWaiting?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onWaitingCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onAuxClick?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onAuxClickCapture?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onClick?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onClickCapture?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onContextMenu?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onContextMenuCapture?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onDoubleClick?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onDoubleClickCapture?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onDrag?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragCapture?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragEnd?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragEndCapture?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragEnter?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragEnterCapture?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragExit?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragExitCapture?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragLeave?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragLeaveCapture?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragOver?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragOverCapture?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragStart?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragStartCapture?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDrop?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDropCapture?: react.DragEventHandler<HTMLInputElement> | undefined;
    onMouseDown?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseDownCapture?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseEnter?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseLeave?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseMove?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseMoveCapture?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseOut?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseOutCapture?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseOver?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseOverCapture?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseUp?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseUpCapture?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onSelect?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onSelectCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onTouchCancel?: react.TouchEventHandler<HTMLInputElement> | undefined;
    onTouchCancelCapture?: react.TouchEventHandler<HTMLInputElement> | undefined;
    onTouchEnd?: react.TouchEventHandler<HTMLInputElement> | undefined;
    onTouchEndCapture?: react.TouchEventHandler<HTMLInputElement> | undefined;
    onTouchMove?: react.TouchEventHandler<HTMLInputElement> | undefined;
    onTouchMoveCapture?: react.TouchEventHandler<HTMLInputElement> | undefined;
    onTouchStart?: react.TouchEventHandler<HTMLInputElement> | undefined;
    onTouchStartCapture?: react.TouchEventHandler<HTMLInputElement> | undefined;
    onPointerDown?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerDownCapture?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerMove?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerMoveCapture?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerUp?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerUpCapture?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerCancel?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerCancelCapture?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerEnter?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerLeave?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerOver?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerOverCapture?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerOut?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerOutCapture?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onGotPointerCapture?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onGotPointerCaptureCapture?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onLostPointerCapture?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onLostPointerCaptureCapture?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onScroll?: react.UIEventHandler<HTMLInputElement> | undefined;
    onScrollCapture?: react.UIEventHandler<HTMLInputElement> | undefined;
    onWheel?: react.WheelEventHandler<HTMLInputElement> | undefined;
    onWheelCapture?: react.WheelEventHandler<HTMLInputElement> | undefined;
    onAnimationStart?: react.AnimationEventHandler<HTMLInputElement> | undefined;
    onAnimationStartCapture?: react.AnimationEventHandler<HTMLInputElement> | undefined;
    onAnimationEnd?: react.AnimationEventHandler<HTMLInputElement> | undefined;
    onAnimationEndCapture?: react.AnimationEventHandler<HTMLInputElement> | undefined;
    onAnimationIteration?: react.AnimationEventHandler<HTMLInputElement> | undefined;
    onAnimationIterationCapture?: react.AnimationEventHandler<HTMLInputElement> | undefined;
    onTransitionEnd?: react.TransitionEventHandler<HTMLInputElement> | undefined;
    onTransitionEndCapture?: react.TransitionEventHandler<HTMLInputElement> | undefined;
} & react.RefAttributes<HTMLInputElement>>;

interface InputFileKnownProps extends StyledProps, WithAccent, WithFormElements {
    /**
     * Invert background
     * @default true
     */
    invert?: boolean;
    /** @default false */
    large?: boolean;
    value?: string;
}
type InputFileProps = Simplify<OmitElementProps<HTMLInputElement, InputFileKnownProps, 'name' | 'type' | 'width'>>;
declare const InputFile: react.ForwardRefExoticComponent<{
    invert?: boolean | undefined;
    large?: boolean | undefined;
    value?: string | undefined;
    as?: react.ElementType | undefined;
    theme?: Theme | undefined;
    accent?: VariantWithTones | undefined;
    name: string;
    readOnly?: boolean | undefined;
    width?: _gilbarbara_types.StringOrNumber | undefined;
    disabled?: boolean | undefined;
    list?: string | undefined;
    download?: any;
    key?: react.Key | null | undefined;
    style?: react.CSSProperties | undefined;
    color?: string | undefined;
    hidden?: boolean | undefined;
    start?: number | undefined;
    height?: string | number | undefined;
    wrap?: string | undefined;
    content?: string | undefined;
    low?: number | undefined;
    high?: number | undefined;
    cite?: string | undefined;
    data?: string | undefined;
    form?: string | undefined;
    label?: string | undefined;
    slot?: string | undefined;
    span?: number | undefined;
    summary?: string | undefined;
    title?: string | undefined;
    pattern?: string | undefined;
    prefix?: string | undefined;
    accept?: string | undefined;
    acceptCharset?: string | undefined;
    action?: string | undefined;
    allowFullScreen?: boolean | undefined;
    allowTransparency?: boolean | undefined;
    alt?: string | undefined;
    async?: boolean | undefined;
    autoComplete?: string | undefined;
    autoPlay?: boolean | undefined;
    capture?: boolean | "user" | "environment" | undefined;
    cellPadding?: string | number | undefined;
    cellSpacing?: string | number | undefined;
    charSet?: string | undefined;
    challenge?: string | undefined;
    checked?: boolean | undefined;
    classID?: string | undefined;
    cols?: number | undefined;
    colSpan?: number | undefined;
    controls?: boolean | undefined;
    coords?: string | undefined;
    crossOrigin?: "" | "anonymous" | "use-credentials" | undefined;
    dateTime?: string | undefined;
    default?: boolean | undefined;
    defer?: boolean | undefined;
    encType?: string | undefined;
    formAction?: string | undefined;
    formEncType?: string | undefined;
    formMethod?: string | undefined;
    formNoValidate?: boolean | undefined;
    formTarget?: string | undefined;
    frameBorder?: string | number | undefined;
    headers?: string | undefined;
    href?: string | undefined;
    hrefLang?: string | undefined;
    htmlFor?: string | undefined;
    httpEquiv?: string | undefined;
    integrity?: string | undefined;
    keyParams?: string | undefined;
    keyType?: string | undefined;
    kind?: string | undefined;
    loop?: boolean | undefined;
    manifest?: string | undefined;
    marginHeight?: number | undefined;
    marginWidth?: number | undefined;
    max?: string | number | undefined;
    maxLength?: number | undefined;
    media?: string | undefined;
    mediaGroup?: string | undefined;
    method?: string | undefined;
    min?: string | number | undefined;
    minLength?: number | undefined;
    multiple?: boolean | undefined;
    muted?: boolean | undefined;
    noValidate?: boolean | undefined;
    open?: boolean | undefined;
    optimum?: number | undefined;
    placeholder?: string | undefined;
    playsInline?: boolean | undefined;
    poster?: string | undefined;
    preload?: string | undefined;
    required?: boolean | undefined;
    reversed?: boolean | undefined;
    rows?: number | undefined;
    rowSpan?: number | undefined;
    sandbox?: string | undefined;
    scope?: string | undefined;
    scoped?: boolean | undefined;
    scrolling?: string | undefined;
    seamless?: boolean | undefined;
    selected?: boolean | undefined;
    shape?: string | undefined;
    sizes?: string | undefined;
    src?: string | undefined;
    srcDoc?: string | undefined;
    srcLang?: string | undefined;
    srcSet?: string | undefined;
    step?: string | number | undefined;
    target?: string | undefined;
    useMap?: string | undefined;
    wmode?: string | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    autoFocus?: boolean | undefined;
    className?: string | undefined;
    contentEditable?: "inherit" | (boolean | "false" | "true") | "plaintext-only" | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "false" | "true") | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    nonce?: string | undefined;
    spellCheck?: (boolean | "false" | "true") | undefined;
    tabIndex?: number | undefined;
    translate?: "yes" | "no" | undefined;
    radioGroup?: string | undefined;
    role?: react.AriaRole | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    property?: string | undefined;
    rel?: string | undefined;
    resource?: string | undefined;
    rev?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "search" | "email" | "tel" | "text" | "none" | "url" | "numeric" | "decimal" | undefined;
    is?: string | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: (boolean | "false" | "true") | undefined;
    "aria-autocomplete"?: "list" | "none" | "inline" | "both" | undefined;
    "aria-braillelabel"?: string | undefined;
    "aria-brailleroledescription"?: string | undefined;
    "aria-busy"?: (boolean | "false" | "true") | undefined;
    "aria-checked"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colindextext"?: string | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "date" | "time" | "location" | "step" | "page" | "false" | "true" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-description"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: (boolean | "false" | "true") | undefined;
    "aria-dropeffect"?: "copy" | "link" | "none" | "move" | "execute" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: (boolean | "false" | "true") | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: (boolean | "false" | "true") | undefined;
    "aria-haspopup"?: boolean | "menu" | "tree" | "grid" | "dialog" | "listbox" | "false" | "true" | undefined;
    "aria-hidden"?: (boolean | "false" | "true") | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: (boolean | "false" | "true") | undefined;
    "aria-multiline"?: (boolean | "false" | "true") | undefined;
    "aria-multiselectable"?: (boolean | "false" | "true") | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-readonly"?: (boolean | "false" | "true") | undefined;
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    "aria-required"?: (boolean | "false" | "true") | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowindextext"?: string | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: (boolean | "false" | "true") | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    children?: react.ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    } | undefined;
    onCopy?: react.ClipboardEventHandler<HTMLInputElement> | undefined;
    onCopyCapture?: react.ClipboardEventHandler<HTMLInputElement> | undefined;
    onCut?: react.ClipboardEventHandler<HTMLInputElement> | undefined;
    onCutCapture?: react.ClipboardEventHandler<HTMLInputElement> | undefined;
    onPaste?: react.ClipboardEventHandler<HTMLInputElement> | undefined;
    onPasteCapture?: react.ClipboardEventHandler<HTMLInputElement> | undefined;
    onCompositionEnd?: react.CompositionEventHandler<HTMLInputElement> | undefined;
    onCompositionEndCapture?: react.CompositionEventHandler<HTMLInputElement> | undefined;
    onCompositionStart?: react.CompositionEventHandler<HTMLInputElement> | undefined;
    onCompositionStartCapture?: react.CompositionEventHandler<HTMLInputElement> | undefined;
    onCompositionUpdate?: react.CompositionEventHandler<HTMLInputElement> | undefined;
    onCompositionUpdateCapture?: react.CompositionEventHandler<HTMLInputElement> | undefined;
    onFocus?: react.FocusEventHandler<HTMLInputElement> | undefined;
    onFocusCapture?: react.FocusEventHandler<HTMLInputElement> | undefined;
    onBlur?: react.FocusEventHandler<HTMLInputElement> | undefined;
    onBlurCapture?: react.FocusEventHandler<HTMLInputElement> | undefined;
    onChange?: react.FormEventHandler<HTMLInputElement> | undefined;
    onChangeCapture?: react.FormEventHandler<HTMLInputElement> | undefined;
    onBeforeInput?: react.FormEventHandler<HTMLInputElement> | undefined;
    onBeforeInputCapture?: react.FormEventHandler<HTMLInputElement> | undefined;
    onInput?: react.FormEventHandler<HTMLInputElement> | undefined;
    onInputCapture?: react.FormEventHandler<HTMLInputElement> | undefined;
    onReset?: react.FormEventHandler<HTMLInputElement> | undefined;
    onResetCapture?: react.FormEventHandler<HTMLInputElement> | undefined;
    onSubmit?: react.FormEventHandler<HTMLInputElement> | undefined;
    onSubmitCapture?: react.FormEventHandler<HTMLInputElement> | undefined;
    onInvalid?: react.FormEventHandler<HTMLInputElement> | undefined;
    onInvalidCapture?: react.FormEventHandler<HTMLInputElement> | undefined;
    onLoad?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onLoadCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onError?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onErrorCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onKeyDown?: react.KeyboardEventHandler<HTMLInputElement> | undefined;
    onKeyDownCapture?: react.KeyboardEventHandler<HTMLInputElement> | undefined;
    onKeyPress?: react.KeyboardEventHandler<HTMLInputElement> | undefined;
    onKeyPressCapture?: react.KeyboardEventHandler<HTMLInputElement> | undefined;
    onKeyUp?: react.KeyboardEventHandler<HTMLInputElement> | undefined;
    onKeyUpCapture?: react.KeyboardEventHandler<HTMLInputElement> | undefined;
    onAbort?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onAbortCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onCanPlay?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onCanPlayCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onCanPlayThrough?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onCanPlayThroughCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onDurationChange?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onDurationChangeCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onEmptied?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onEmptiedCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onEncrypted?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onEncryptedCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onEnded?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onEndedCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onLoadedData?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onLoadedDataCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onLoadedMetadata?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onLoadedMetadataCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onLoadStart?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onLoadStartCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onPause?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onPauseCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onPlay?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onPlayCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onPlaying?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onPlayingCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onProgress?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onProgressCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onRateChange?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onRateChangeCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onResize?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onResizeCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onSeeked?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onSeekedCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onSeeking?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onSeekingCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onStalled?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onStalledCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onSuspend?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onSuspendCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onTimeUpdate?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onTimeUpdateCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onVolumeChange?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onVolumeChangeCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onWaiting?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onWaitingCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onAuxClick?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onAuxClickCapture?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onClick?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onClickCapture?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onContextMenu?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onContextMenuCapture?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onDoubleClick?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onDoubleClickCapture?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onDrag?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragCapture?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragEnd?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragEndCapture?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragEnter?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragEnterCapture?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragExit?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragExitCapture?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragLeave?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragLeaveCapture?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragOver?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragOverCapture?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragStart?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDragStartCapture?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDrop?: react.DragEventHandler<HTMLInputElement> | undefined;
    onDropCapture?: react.DragEventHandler<HTMLInputElement> | undefined;
    onMouseDown?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseDownCapture?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseEnter?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseLeave?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseMove?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseMoveCapture?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseOut?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseOutCapture?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseOver?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseOverCapture?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseUp?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseUpCapture?: react.MouseEventHandler<HTMLInputElement> | undefined;
    onSelect?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onSelectCapture?: react.ReactEventHandler<HTMLInputElement> | undefined;
    onTouchCancel?: react.TouchEventHandler<HTMLInputElement> | undefined;
    onTouchCancelCapture?: react.TouchEventHandler<HTMLInputElement> | undefined;
    onTouchEnd?: react.TouchEventHandler<HTMLInputElement> | undefined;
    onTouchEndCapture?: react.TouchEventHandler<HTMLInputElement> | undefined;
    onTouchMove?: react.TouchEventHandler<HTMLInputElement> | undefined;
    onTouchMoveCapture?: react.TouchEventHandler<HTMLInputElement> | undefined;
    onTouchStart?: react.TouchEventHandler<HTMLInputElement> | undefined;
    onTouchStartCapture?: react.TouchEventHandler<HTMLInputElement> | undefined;
    onPointerDown?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerDownCapture?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerMove?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerMoveCapture?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerUp?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerUpCapture?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerCancel?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerCancelCapture?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerEnter?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerLeave?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerOver?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerOverCapture?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerOut?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerOutCapture?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onGotPointerCapture?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onGotPointerCaptureCapture?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onLostPointerCapture?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onLostPointerCaptureCapture?: react.PointerEventHandler<HTMLInputElement> | undefined;
    onScroll?: react.UIEventHandler<HTMLInputElement> | undefined;
    onScrollCapture?: react.UIEventHandler<HTMLInputElement> | undefined;
    onWheel?: react.WheelEventHandler<HTMLInputElement> | undefined;
    onWheelCapture?: react.WheelEventHandler<HTMLInputElement> | undefined;
    onAnimationStart?: react.AnimationEventHandler<HTMLInputElement> | undefined;
    onAnimationStartCapture?: react.AnimationEventHandler<HTMLInputElement> | undefined;
    onAnimationEnd?: react.AnimationEventHandler<HTMLInputElement> | undefined;
    onAnimationEndCapture?: react.AnimationEventHandler<HTMLInputElement> | undefined;
    onAnimationIteration?: react.AnimationEventHandler<HTMLInputElement> | undefined;
    onAnimationIterationCapture?: react.AnimationEventHandler<HTMLInputElement> | undefined;
    onTransitionEnd?: react.TransitionEventHandler<HTMLInputElement> | undefined;
    onTransitionEndCapture?: react.TransitionEventHandler<HTMLInputElement> | undefined;
} & react.RefAttributes<HTMLInputElement>>;

interface LabelKnownProps extends StyledProps, Pick<WithColors, 'color'>, WithChildren, WithInline, WithTextOptions {
    /** For the htmlFor attribute */
    labelId?: string;
    labelInfo?: ReactNode;
}
type LabelProps = Simplify<OmitElementProps<HTMLLabelElement, LabelKnownProps>>;
declare const Label: react.ForwardRefExoticComponent<{
    labelId?: string | undefined;
    labelInfo?: ReactNode;
    as?: react.ElementType | undefined;
    theme?: Theme | undefined;
    color?: VariantWithTones | undefined;
    children: ReactNode;
    inline?: boolean | undefined;
    bold?: boolean | undefined;
    italic?: boolean | undefined;
    letterSpacing?: csstype.Property.LetterSpacing<0 | (string & {})> | undefined;
    lineHeight?: csstype.Property.LineHeight<0 | (string & {})> | undefined;
    textDecoration?: csstype.Property.TextDecoration<0 | (string & {})> | undefined;
    textTransform?: csstype.Property.TextTransform | undefined;
    wordSpacing?: csstype.Property.WordSpacing<0 | (string & {})> | undefined;
    size?: "sm" | "md" | "lg" | "xs" | undefined;
    list?: string | undefined;
    download?: any;
    key?: react.Key | null | undefined;
    style?: react.CSSProperties | undefined;
    name?: string | undefined;
    hidden?: boolean | undefined;
    start?: number | undefined;
    height?: string | number | undefined;
    width?: string | number | undefined;
    wrap?: string | undefined;
    content?: string | undefined;
    readOnly?: boolean | undefined;
    low?: number | undefined;
    high?: number | undefined;
    cite?: string | undefined;
    data?: string | undefined;
    form?: string | undefined;
    label?: string | undefined;
    slot?: string | undefined;
    span?: number | undefined;
    summary?: string | undefined;
    title?: string | undefined;
    pattern?: string | undefined;
    prefix?: string | undefined;
    type?: string | undefined;
    disabled?: boolean | undefined;
    value?: string | number | readonly string[] | undefined;
    accept?: string | undefined;
    acceptCharset?: string | undefined;
    action?: string | undefined;
    allowFullScreen?: boolean | undefined;
    allowTransparency?: boolean | undefined;
    alt?: string | undefined;
    async?: boolean | undefined;
    autoComplete?: string | undefined;
    autoPlay?: boolean | undefined;
    capture?: boolean | "user" | "environment" | undefined;
    cellPadding?: string | number | undefined;
    cellSpacing?: string | number | undefined;
    charSet?: string | undefined;
    challenge?: string | undefined;
    checked?: boolean | undefined;
    classID?: string | undefined;
    cols?: number | undefined;
    colSpan?: number | undefined;
    controls?: boolean | undefined;
    coords?: string | undefined;
    crossOrigin?: "" | "anonymous" | "use-credentials" | undefined;
    dateTime?: string | undefined;
    default?: boolean | undefined;
    defer?: boolean | undefined;
    encType?: string | undefined;
    formAction?: string | undefined;
    formEncType?: string | undefined;
    formMethod?: string | undefined;
    formNoValidate?: boolean | undefined;
    formTarget?: string | undefined;
    frameBorder?: string | number | undefined;
    headers?: string | undefined;
    href?: string | undefined;
    hrefLang?: string | undefined;
    htmlFor?: string | undefined;
    httpEquiv?: string | undefined;
    integrity?: string | undefined;
    keyParams?: string | undefined;
    keyType?: string | undefined;
    kind?: string | undefined;
    loop?: boolean | undefined;
    manifest?: string | undefined;
    marginHeight?: number | undefined;
    marginWidth?: number | undefined;
    max?: string | number | undefined;
    maxLength?: number | undefined;
    media?: string | undefined;
    mediaGroup?: string | undefined;
    method?: string | undefined;
    min?: string | number | undefined;
    minLength?: number | undefined;
    multiple?: boolean | undefined;
    muted?: boolean | undefined;
    noValidate?: boolean | undefined;
    open?: boolean | undefined;
    optimum?: number | undefined;
    placeholder?: string | undefined;
    playsInline?: boolean | undefined;
    poster?: string | undefined;
    preload?: string | undefined;
    required?: boolean | undefined;
    reversed?: boolean | undefined;
    rows?: number | undefined;
    rowSpan?: number | undefined;
    sandbox?: string | undefined;
    scope?: string | undefined;
    scoped?: boolean | undefined;
    scrolling?: string | undefined;
    seamless?: boolean | undefined;
    selected?: boolean | undefined;
    shape?: string | undefined;
    sizes?: string | undefined;
    src?: string | undefined;
    srcDoc?: string | undefined;
    srcLang?: string | undefined;
    srcSet?: string | undefined;
    step?: string | number | undefined;
    target?: string | undefined;
    useMap?: string | undefined;
    wmode?: string | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    autoFocus?: boolean | undefined;
    className?: string | undefined;
    contentEditable?: "inherit" | (boolean | "false" | "true") | "plaintext-only" | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "false" | "true") | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    nonce?: string | undefined;
    spellCheck?: (boolean | "false" | "true") | undefined;
    tabIndex?: number | undefined;
    translate?: "yes" | "no" | undefined;
    radioGroup?: string | undefined;
    role?: react.AriaRole | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    property?: string | undefined;
    rel?: string | undefined;
    resource?: string | undefined;
    rev?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "search" | "email" | "tel" | "text" | "none" | "url" | "numeric" | "decimal" | undefined;
    is?: string | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: (boolean | "false" | "true") | undefined;
    "aria-autocomplete"?: "list" | "none" | "inline" | "both" | undefined;
    "aria-braillelabel"?: string | undefined;
    "aria-brailleroledescription"?: string | undefined;
    "aria-busy"?: (boolean | "false" | "true") | undefined;
    "aria-checked"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colindextext"?: string | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "date" | "time" | "location" | "step" | "page" | "false" | "true" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-description"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: (boolean | "false" | "true") | undefined;
    "aria-dropeffect"?: "copy" | "link" | "none" | "move" | "execute" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: (boolean | "false" | "true") | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: (boolean | "false" | "true") | undefined;
    "aria-haspopup"?: boolean | "menu" | "tree" | "grid" | "dialog" | "listbox" | "false" | "true" | undefined;
    "aria-hidden"?: (boolean | "false" | "true") | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: (boolean | "false" | "true") | undefined;
    "aria-multiline"?: (boolean | "false" | "true") | undefined;
    "aria-multiselectable"?: (boolean | "false" | "true") | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-readonly"?: (boolean | "false" | "true") | undefined;
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    "aria-required"?: (boolean | "false" | "true") | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowindextext"?: string | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: (boolean | "false" | "true") | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    } | undefined;
    onCopy?: react.ClipboardEventHandler<HTMLLabelElement> | undefined;
    onCopyCapture?: react.ClipboardEventHandler<HTMLLabelElement> | undefined;
    onCut?: react.ClipboardEventHandler<HTMLLabelElement> | undefined;
    onCutCapture?: react.ClipboardEventHandler<HTMLLabelElement> | undefined;
    onPaste?: react.ClipboardEventHandler<HTMLLabelElement> | undefined;
    onPasteCapture?: react.ClipboardEventHandler<HTMLLabelElement> | undefined;
    onCompositionEnd?: react.CompositionEventHandler<HTMLLabelElement> | undefined;
    onCompositionEndCapture?: react.CompositionEventHandler<HTMLLabelElement> | undefined;
    onCompositionStart?: react.CompositionEventHandler<HTMLLabelElement> | undefined;
    onCompositionStartCapture?: react.CompositionEventHandler<HTMLLabelElement> | undefined;
    onCompositionUpdate?: react.CompositionEventHandler<HTMLLabelElement> | undefined;
    onCompositionUpdateCapture?: react.CompositionEventHandler<HTMLLabelElement> | undefined;
    onFocus?: react.FocusEventHandler<HTMLLabelElement> | undefined;
    onFocusCapture?: react.FocusEventHandler<HTMLLabelElement> | undefined;
    onBlur?: react.FocusEventHandler<HTMLLabelElement> | undefined;
    onBlurCapture?: react.FocusEventHandler<HTMLLabelElement> | undefined;
    onChange?: react.FormEventHandler<HTMLLabelElement> | undefined;
    onChangeCapture?: react.FormEventHandler<HTMLLabelElement> | undefined;
    onBeforeInput?: react.FormEventHandler<HTMLLabelElement> | undefined;
    onBeforeInputCapture?: react.FormEventHandler<HTMLLabelElement> | undefined;
    onInput?: react.FormEventHandler<HTMLLabelElement> | undefined;
    onInputCapture?: react.FormEventHandler<HTMLLabelElement> | undefined;
    onReset?: react.FormEventHandler<HTMLLabelElement> | undefined;
    onResetCapture?: react.FormEventHandler<HTMLLabelElement> | undefined;
    onSubmit?: react.FormEventHandler<HTMLLabelElement> | undefined;
    onSubmitCapture?: react.FormEventHandler<HTMLLabelElement> | undefined;
    onInvalid?: react.FormEventHandler<HTMLLabelElement> | undefined;
    onInvalidCapture?: react.FormEventHandler<HTMLLabelElement> | undefined;
    onLoad?: react.ReactEventHandler<HTMLLabelElement> | undefined;
    onLoadCapture?: react.ReactEventHandler<HTMLLabelElement> | undefined;
    onError?: react.ReactEventHandler<HTMLLabelElement> | undefined;
    onErrorCapture?: react.ReactEventHandler<HTMLLabelElement> | undefined;
    onKeyDown?: react.KeyboardEventHandler<HTMLLabelElement> | undefined;
    onKeyDownCapture?: react.KeyboardEventHandler<HTMLLabelElement> | undefined;
    onKeyPress?: react.KeyboardEventHandler<HTMLLabelElement> | undefined;
    onKeyPressCapture?: react.KeyboardEventHandler<HTMLLabelElement> | undefined;
    onKeyUp?: react.KeyboardEventHandler<HTMLLabelElement> | undefined;
    onKeyUpCapture?: react.KeyboardEventHandler<HTMLLabelElement> | undefined;
    onAbort?: react.ReactEventHandler<HTMLLabelElement> | undefined;
    onAbortCapture?: react.ReactEventHandler<HTMLLabelElement> | undefined;
    onCanPlay?: react.ReactEventHandler<HTMLLabelElement> | undefined;
    onCanPlayCapture?: react.ReactEventHandler<HTMLLabelElement> | undefined;
    onCanPlayThrough?: react.ReactEventHandler<HTMLLabelElement> | undefined;
    onCanPlayThroughCapture?: react.ReactEventHandler<HTMLLabelElement> | undefined;
    onDurationChange?: react.ReactEventHandler<HTMLLabelElement> | undefined;
    onDurationChangeCapture?: react.ReactEventHandler<HTMLLabelElement> | undefined;
    onEmptied?: react.ReactEventHandler<HTMLLabelElement> | undefined;
    onEmptiedCapture?: react.ReactEventHandler<HTMLLabelElement> | undefined;
    onEncrypted?: react.ReactEventHandler<HTMLLabelElement> | undefined;
    onEncryptedCapture?: react.ReactEventHandler<HTMLLabelElement> | undefined;
    onEnded?: react.ReactEventHandler<HTMLLabelElement> | undefined;
    onEndedCapture?: react.ReactEventHandler<HTMLLabelElement> | undefined;
    onLoadedData?: react.ReactEventHandler<HTMLLabelElement> | undefined;
    onLoadedDataCapture?: react.ReactEventHandler<HTMLLabelElement> | undefined;
    onLoadedMetadata?: react.ReactEventHandler<HTMLLabelElement> | undefined;
    onLoadedMetadataCapture?: react.ReactEventHandler<HTMLLabelElement> | undefined;
    onLoadStart?: react.ReactEventHandler<HTMLLabelElement> | undefined;
    onLoadStartCapture?: react.ReactEventHandler<HTMLLabelElement> | undefined;
    onPause?: react.ReactEventHandler<HTMLLabelElement> | undefined;
    onPauseCapture?: react.ReactEventHandler<HTMLLabelElement> | undefined;
    onPlay?: react.ReactEventHandler<HTMLLabelElement> | undefined;
    onPlayCapture?: react.ReactEventHandler<HTMLLabelElement> | undefined;
    onPlaying?: react.ReactEventHandler<HTMLLabelElement> | undefined;
    onPlayingCapture?: react.ReactEventHandler<HTMLLabelElement> | undefined;
    onProgress?: react.ReactEventHandler<HTMLLabelElement> | undefined;
    onProgressCapture?: react.ReactEventHandler<HTMLLabelElement> | undefined;
    onRateChange?: react.ReactEventHandler<HTMLLabelElement> | undefined;
    onRateChangeCapture?: react.ReactEventHandler<HTMLLabelElement> | undefined;
    onResize?: react.ReactEventHandler<HTMLLabelElement> | undefined;
    onResizeCapture?: react.ReactEventHandler<HTMLLabelElement> | undefined;
    onSeeked?: react.ReactEventHandler<HTMLLabelElement> | undefined;
    onSeekedCapture?: react.ReactEventHandler<HTMLLabelElement> | undefined;
    onSeeking?: react.ReactEventHandler<HTMLLabelElement> | undefined;
    onSeekingCapture?: react.ReactEventHandler<HTMLLabelElement> | undefined;
    onStalled?: react.ReactEventHandler<HTMLLabelElement> | undefined;
    onStalledCapture?: react.ReactEventHandler<HTMLLabelElement> | undefined;
    onSuspend?: react.ReactEventHandler<HTMLLabelElement> | undefined;
    onSuspendCapture?: react.ReactEventHandler<HTMLLabelElement> | undefined;
    onTimeUpdate?: react.ReactEventHandler<HTMLLabelElement> | undefined;
    onTimeUpdateCapture?: react.ReactEventHandler<HTMLLabelElement> | undefined;
    onVolumeChange?: react.ReactEventHandler<HTMLLabelElement> | undefined;
    onVolumeChangeCapture?: react.ReactEventHandler<HTMLLabelElement> | undefined;
    onWaiting?: react.ReactEventHandler<HTMLLabelElement> | undefined;
    onWaitingCapture?: react.ReactEventHandler<HTMLLabelElement> | undefined;
    onAuxClick?: react.MouseEventHandler<HTMLLabelElement> | undefined;
    onAuxClickCapture?: react.MouseEventHandler<HTMLLabelElement> | undefined;
    onClick?: react.MouseEventHandler<HTMLLabelElement> | undefined;
    onClickCapture?: react.MouseEventHandler<HTMLLabelElement> | undefined;
    onContextMenu?: react.MouseEventHandler<HTMLLabelElement> | undefined;
    onContextMenuCapture?: react.MouseEventHandler<HTMLLabelElement> | undefined;
    onDoubleClick?: react.MouseEventHandler<HTMLLabelElement> | undefined;
    onDoubleClickCapture?: react.MouseEventHandler<HTMLLabelElement> | undefined;
    onDrag?: react.DragEventHandler<HTMLLabelElement> | undefined;
    onDragCapture?: react.DragEventHandler<HTMLLabelElement> | undefined;
    onDragEnd?: react.DragEventHandler<HTMLLabelElement> | undefined;
    onDragEndCapture?: react.DragEventHandler<HTMLLabelElement> | undefined;
    onDragEnter?: react.DragEventHandler<HTMLLabelElement> | undefined;
    onDragEnterCapture?: react.DragEventHandler<HTMLLabelElement> | undefined;
    onDragExit?: react.DragEventHandler<HTMLLabelElement> | undefined;
    onDragExitCapture?: react.DragEventHandler<HTMLLabelElement> | undefined;
    onDragLeave?: react.DragEventHandler<HTMLLabelElement> | undefined;
    onDragLeaveCapture?: react.DragEventHandler<HTMLLabelElement> | undefined;
    onDragOver?: react.DragEventHandler<HTMLLabelElement> | undefined;
    onDragOverCapture?: react.DragEventHandler<HTMLLabelElement> | undefined;
    onDragStart?: react.DragEventHandler<HTMLLabelElement> | undefined;
    onDragStartCapture?: react.DragEventHandler<HTMLLabelElement> | undefined;
    onDrop?: react.DragEventHandler<HTMLLabelElement> | undefined;
    onDropCapture?: react.DragEventHandler<HTMLLabelElement> | undefined;
    onMouseDown?: react.MouseEventHandler<HTMLLabelElement> | undefined;
    onMouseDownCapture?: react.MouseEventHandler<HTMLLabelElement> | undefined;
    onMouseEnter?: react.MouseEventHandler<HTMLLabelElement> | undefined;
    onMouseLeave?: react.MouseEventHandler<HTMLLabelElement> | undefined;
    onMouseMove?: react.MouseEventHandler<HTMLLabelElement> | undefined;
    onMouseMoveCapture?: react.MouseEventHandler<HTMLLabelElement> | undefined;
    onMouseOut?: react.MouseEventHandler<HTMLLabelElement> | undefined;
    onMouseOutCapture?: react.MouseEventHandler<HTMLLabelElement> | undefined;
    onMouseOver?: react.MouseEventHandler<HTMLLabelElement> | undefined;
    onMouseOverCapture?: react.MouseEventHandler<HTMLLabelElement> | undefined;
    onMouseUp?: react.MouseEventHandler<HTMLLabelElement> | undefined;
    onMouseUpCapture?: react.MouseEventHandler<HTMLLabelElement> | undefined;
    onSelect?: react.ReactEventHandler<HTMLLabelElement> | undefined;
    onSelectCapture?: react.ReactEventHandler<HTMLLabelElement> | undefined;
    onTouchCancel?: react.TouchEventHandler<HTMLLabelElement> | undefined;
    onTouchCancelCapture?: react.TouchEventHandler<HTMLLabelElement> | undefined;
    onTouchEnd?: react.TouchEventHandler<HTMLLabelElement> | undefined;
    onTouchEndCapture?: react.TouchEventHandler<HTMLLabelElement> | undefined;
    onTouchMove?: react.TouchEventHandler<HTMLLabelElement> | undefined;
    onTouchMoveCapture?: react.TouchEventHandler<HTMLLabelElement> | undefined;
    onTouchStart?: react.TouchEventHandler<HTMLLabelElement> | undefined;
    onTouchStartCapture?: react.TouchEventHandler<HTMLLabelElement> | undefined;
    onPointerDown?: react.PointerEventHandler<HTMLLabelElement> | undefined;
    onPointerDownCapture?: react.PointerEventHandler<HTMLLabelElement> | undefined;
    onPointerMove?: react.PointerEventHandler<HTMLLabelElement> | undefined;
    onPointerMoveCapture?: react.PointerEventHandler<HTMLLabelElement> | undefined;
    onPointerUp?: react.PointerEventHandler<HTMLLabelElement> | undefined;
    onPointerUpCapture?: react.PointerEventHandler<HTMLLabelElement> | undefined;
    onPointerCancel?: react.PointerEventHandler<HTMLLabelElement> | undefined;
    onPointerCancelCapture?: react.PointerEventHandler<HTMLLabelElement> | undefined;
    onPointerEnter?: react.PointerEventHandler<HTMLLabelElement> | undefined;
    onPointerLeave?: react.PointerEventHandler<HTMLLabelElement> | undefined;
    onPointerOver?: react.PointerEventHandler<HTMLLabelElement> | undefined;
    onPointerOverCapture?: react.PointerEventHandler<HTMLLabelElement> | undefined;
    onPointerOut?: react.PointerEventHandler<HTMLLabelElement> | undefined;
    onPointerOutCapture?: react.PointerEventHandler<HTMLLabelElement> | undefined;
    onGotPointerCapture?: react.PointerEventHandler<HTMLLabelElement> | undefined;
    onGotPointerCaptureCapture?: react.PointerEventHandler<HTMLLabelElement> | undefined;
    onLostPointerCapture?: react.PointerEventHandler<HTMLLabelElement> | undefined;
    onLostPointerCaptureCapture?: react.PointerEventHandler<HTMLLabelElement> | undefined;
    onScroll?: react.UIEventHandler<HTMLLabelElement> | undefined;
    onScrollCapture?: react.UIEventHandler<HTMLLabelElement> | undefined;
    onWheel?: react.WheelEventHandler<HTMLLabelElement> | undefined;
    onWheelCapture?: react.WheelEventHandler<HTMLLabelElement> | undefined;
    onAnimationStart?: react.AnimationEventHandler<HTMLLabelElement> | undefined;
    onAnimationStartCapture?: react.AnimationEventHandler<HTMLLabelElement> | undefined;
    onAnimationEnd?: react.AnimationEventHandler<HTMLLabelElement> | undefined;
    onAnimationEndCapture?: react.AnimationEventHandler<HTMLLabelElement> | undefined;
    onAnimationIteration?: react.AnimationEventHandler<HTMLLabelElement> | undefined;
    onAnimationIterationCapture?: react.AnimationEventHandler<HTMLLabelElement> | undefined;
    onTransitionEnd?: react.TransitionEventHandler<HTMLLabelElement> | undefined;
    onTransitionEndCapture?: react.TransitionEventHandler<HTMLLabelElement> | undefined;
} & react.RefAttributes<HTMLLabelElement>>;

interface ListKnownProps extends StyledProps, WithChildren, WithLayout, WithMargin, WithRadius, WithShadow {
    /**
     * Component border color.
     * @default gray.100 (light mode) | gray.700 (dark mode)
     */
    borderColor?: VariantWithTones;
    /** @default vertical */
    direction?: Direction;
    /**
     * Hide the border of the component.
     * @default false
     */
    hideBorder?: boolean;
    /**
     * Hide the border between items.
     * @default false
     */
    hideDivider?: boolean;
    /** @default md */
    size?: 'sm' | 'md' | 'lg';
}
type ListProps = Simplify<OmitElementProps<HTMLUListElement, ListKnownProps>>;

interface ModalKnownProps extends StyledProps, WithBorder, WithPadding, WithRadius, WithShadow, Omit<PortalProps, 'isActive' | 'showCloseButton'> {
    hideCloseButton?: boolean;
    isActive: boolean;
    maxHeight?: StandardLonghandProperties['maxHeight'] | number;
    maxWidth?: StandardLonghandProperties['maxWidth'] | number;
    style?: CSSProperties;
    title?: ReactNode;
    width?: StringOrNumber;
}
type ModalProps = Simplify<ModalKnownProps>;
declare function Modal(props: ModalProps): react_jsx_runtime.JSX.Element;
declare namespace Modal {
    var displayName: string;
}

interface NonIdealStateKnownProps extends StyledProps, WithBorder, WithColors, WithChildrenOptional, WithFlexItem, WithLayout, WithMargin, WithPadding, WithRadius, WithShadow {
    description?: ReactNode;
    /** @default vertical */
    direction?: Direction;
    /** @default false */
    hideIcon?: boolean;
    icon?: Icons;
    /** @default md */
    size?: Sizes;
    title?: ReactNode;
    /** @default not-found */
    type?: 'error' | 'no-results' | 'not-found' | 'offline' | null;
}
type NonIdealStateProps = Simplify<OmitElementProps<HTMLDivElement, NonIdealStateKnownProps, 'wrap'>>;
declare function NonIdealState(props: NonIdealStateProps): react_jsx_runtime.JSX.Element;
declare namespace NonIdealState {
    var displayName: string;
}

interface PageKnownProps extends StyledProps, WithColors, Pick<WithFlexBox, 'align' | 'justify'>, WithPadding {
    /**
     * Override `align` and `justify` to "center"
     *
     * @default false
     */
    centered?: boolean;
    children: ReactNode;
    /** @default false */
    isLoading?: boolean;
    maxWidth?: StringOrNumber;
    /** @default 100vh */
    minHeight?: StringOrNumber;
    /**
     * Set the "data-component-name" property
     *
     * @default Page
     */
    name?: string;
    /**
     * Don't add the default padding
     * @default false
     */
    skipSpacing?: boolean;
    style?: CSSProperties;
    textAlign?: Alignment;
}
type PageProps = Simplify<OmitElementProps<HTMLDivElement, PageKnownProps, 'wrap'>>;
declare function Page(props: PageProps): react_jsx_runtime.JSX.Element;
declare namespace Page {
    var displayName: string;
}

interface PaginationKnownProps extends WithAccent, WithBorder, WithMargin, WithPadding {
    /** @default end */
    align?: 'start' | 'center' | 'end';
    currentPage: number;
    /**
     * Hide First/Last links
     * @default false
     */
    disableEdgeNavigation?: boolean;
    /**
     * Limit to show the First/Last buttons
     * @default 3
     */
    edgeNavigationLimit?: number;
    onClick: (currentPage: number, type?: string) => void;
    style?: CSSProperties;
    totalPages: number;
}
type PaginationProps = Simplify<PaginationKnownProps>;
declare function Pagination(props: PaginationProps): react_jsx_runtime.JSX.Element | null;
declare namespace Pagination {
    var displayName: string;
}

interface ParagraphKnownProps extends StyledProps, WithAlign, WithChildren, Pick<WithColors, 'color'>, WithMargin, WithTextOptions {
    /**
     * Skip the top margin for adjacent paragraphs.
     * @default false
     */
    skipMarginTop?: boolean;
}
type ParagraphProps = Simplify<OmitElementProps<HTMLParagraphElement, ParagraphKnownProps>>;
declare const Paragraph: react.ForwardRefExoticComponent<{
    skipMarginTop?: boolean | undefined;
    as?: react.ElementType | undefined;
    theme?: Theme | undefined;
    align?: Alignment | undefined;
    children: react.ReactNode;
    color?: VariantWithTones | undefined;
    margin?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    mb?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    ml?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mr?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mt?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mx?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    my?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    bold?: boolean | undefined;
    italic?: boolean | undefined;
    letterSpacing?: csstype.Property.LetterSpacing<0 | (string & {})> | undefined;
    lineHeight?: csstype.Property.LineHeight<0 | (string & {})> | undefined;
    textDecoration?: csstype.Property.TextDecoration<0 | (string & {})> | undefined;
    textTransform?: csstype.Property.TextTransform | undefined;
    wordSpacing?: csstype.Property.WordSpacing<0 | (string & {})> | undefined;
    size?: "sm" | "md" | "lg" | "xs" | undefined;
    list?: string | undefined;
    download?: any;
    key?: react.Key | null | undefined;
    style?: react.CSSProperties | undefined;
    name?: string | undefined;
    hidden?: boolean | undefined;
    start?: number | undefined;
    height?: string | number | undefined;
    width?: string | number | undefined;
    wrap?: string | undefined;
    content?: string | undefined;
    readOnly?: boolean | undefined;
    low?: number | undefined;
    high?: number | undefined;
    cite?: string | undefined;
    data?: string | undefined;
    form?: string | undefined;
    label?: string | undefined;
    slot?: string | undefined;
    span?: number | undefined;
    summary?: string | undefined;
    title?: string | undefined;
    pattern?: string | undefined;
    prefix?: string | undefined;
    type?: string | undefined;
    disabled?: boolean | undefined;
    value?: string | number | readonly string[] | undefined;
    accept?: string | undefined;
    acceptCharset?: string | undefined;
    action?: string | undefined;
    allowFullScreen?: boolean | undefined;
    allowTransparency?: boolean | undefined;
    alt?: string | undefined;
    async?: boolean | undefined;
    autoComplete?: string | undefined;
    autoPlay?: boolean | undefined;
    capture?: boolean | "user" | "environment" | undefined;
    cellPadding?: string | number | undefined;
    cellSpacing?: string | number | undefined;
    charSet?: string | undefined;
    challenge?: string | undefined;
    checked?: boolean | undefined;
    classID?: string | undefined;
    cols?: number | undefined;
    colSpan?: number | undefined;
    controls?: boolean | undefined;
    coords?: string | undefined;
    crossOrigin?: "" | "anonymous" | "use-credentials" | undefined;
    dateTime?: string | undefined;
    default?: boolean | undefined;
    defer?: boolean | undefined;
    encType?: string | undefined;
    formAction?: string | undefined;
    formEncType?: string | undefined;
    formMethod?: string | undefined;
    formNoValidate?: boolean | undefined;
    formTarget?: string | undefined;
    frameBorder?: string | number | undefined;
    headers?: string | undefined;
    href?: string | undefined;
    hrefLang?: string | undefined;
    htmlFor?: string | undefined;
    httpEquiv?: string | undefined;
    integrity?: string | undefined;
    keyParams?: string | undefined;
    keyType?: string | undefined;
    kind?: string | undefined;
    loop?: boolean | undefined;
    manifest?: string | undefined;
    marginHeight?: number | undefined;
    marginWidth?: number | undefined;
    max?: string | number | undefined;
    maxLength?: number | undefined;
    media?: string | undefined;
    mediaGroup?: string | undefined;
    method?: string | undefined;
    min?: string | number | undefined;
    minLength?: number | undefined;
    multiple?: boolean | undefined;
    muted?: boolean | undefined;
    noValidate?: boolean | undefined;
    open?: boolean | undefined;
    optimum?: number | undefined;
    placeholder?: string | undefined;
    playsInline?: boolean | undefined;
    poster?: string | undefined;
    preload?: string | undefined;
    required?: boolean | undefined;
    reversed?: boolean | undefined;
    rows?: number | undefined;
    rowSpan?: number | undefined;
    sandbox?: string | undefined;
    scope?: string | undefined;
    scoped?: boolean | undefined;
    scrolling?: string | undefined;
    seamless?: boolean | undefined;
    selected?: boolean | undefined;
    shape?: string | undefined;
    sizes?: string | undefined;
    src?: string | undefined;
    srcDoc?: string | undefined;
    srcLang?: string | undefined;
    srcSet?: string | undefined;
    step?: string | number | undefined;
    target?: string | undefined;
    useMap?: string | undefined;
    wmode?: string | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    autoFocus?: boolean | undefined;
    className?: string | undefined;
    contentEditable?: "inherit" | (boolean | "false" | "true") | "plaintext-only" | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "false" | "true") | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    nonce?: string | undefined;
    spellCheck?: (boolean | "false" | "true") | undefined;
    tabIndex?: number | undefined;
    translate?: "yes" | "no" | undefined;
    radioGroup?: string | undefined;
    role?: react.AriaRole | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    property?: string | undefined;
    rel?: string | undefined;
    resource?: string | undefined;
    rev?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "search" | "email" | "tel" | "text" | "none" | "url" | "numeric" | "decimal" | undefined;
    is?: string | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: (boolean | "false" | "true") | undefined;
    "aria-autocomplete"?: "list" | "none" | "inline" | "both" | undefined;
    "aria-braillelabel"?: string | undefined;
    "aria-brailleroledescription"?: string | undefined;
    "aria-busy"?: (boolean | "false" | "true") | undefined;
    "aria-checked"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colindextext"?: string | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "date" | "time" | "location" | "step" | "page" | "false" | "true" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-description"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: (boolean | "false" | "true") | undefined;
    "aria-dropeffect"?: "copy" | "link" | "none" | "move" | "execute" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: (boolean | "false" | "true") | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: (boolean | "false" | "true") | undefined;
    "aria-haspopup"?: boolean | "menu" | "tree" | "grid" | "dialog" | "listbox" | "false" | "true" | undefined;
    "aria-hidden"?: (boolean | "false" | "true") | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: (boolean | "false" | "true") | undefined;
    "aria-multiline"?: (boolean | "false" | "true") | undefined;
    "aria-multiselectable"?: (boolean | "false" | "true") | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-readonly"?: (boolean | "false" | "true") | undefined;
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    "aria-required"?: (boolean | "false" | "true") | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowindextext"?: string | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: (boolean | "false" | "true") | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    } | undefined;
    onCopy?: react.ClipboardEventHandler<HTMLParagraphElement> | undefined;
    onCopyCapture?: react.ClipboardEventHandler<HTMLParagraphElement> | undefined;
    onCut?: react.ClipboardEventHandler<HTMLParagraphElement> | undefined;
    onCutCapture?: react.ClipboardEventHandler<HTMLParagraphElement> | undefined;
    onPaste?: react.ClipboardEventHandler<HTMLParagraphElement> | undefined;
    onPasteCapture?: react.ClipboardEventHandler<HTMLParagraphElement> | undefined;
    onCompositionEnd?: react.CompositionEventHandler<HTMLParagraphElement> | undefined;
    onCompositionEndCapture?: react.CompositionEventHandler<HTMLParagraphElement> | undefined;
    onCompositionStart?: react.CompositionEventHandler<HTMLParagraphElement> | undefined;
    onCompositionStartCapture?: react.CompositionEventHandler<HTMLParagraphElement> | undefined;
    onCompositionUpdate?: react.CompositionEventHandler<HTMLParagraphElement> | undefined;
    onCompositionUpdateCapture?: react.CompositionEventHandler<HTMLParagraphElement> | undefined;
    onFocus?: react.FocusEventHandler<HTMLParagraphElement> | undefined;
    onFocusCapture?: react.FocusEventHandler<HTMLParagraphElement> | undefined;
    onBlur?: react.FocusEventHandler<HTMLParagraphElement> | undefined;
    onBlurCapture?: react.FocusEventHandler<HTMLParagraphElement> | undefined;
    onChange?: react.FormEventHandler<HTMLParagraphElement> | undefined;
    onChangeCapture?: react.FormEventHandler<HTMLParagraphElement> | undefined;
    onBeforeInput?: react.FormEventHandler<HTMLParagraphElement> | undefined;
    onBeforeInputCapture?: react.FormEventHandler<HTMLParagraphElement> | undefined;
    onInput?: react.FormEventHandler<HTMLParagraphElement> | undefined;
    onInputCapture?: react.FormEventHandler<HTMLParagraphElement> | undefined;
    onReset?: react.FormEventHandler<HTMLParagraphElement> | undefined;
    onResetCapture?: react.FormEventHandler<HTMLParagraphElement> | undefined;
    onSubmit?: react.FormEventHandler<HTMLParagraphElement> | undefined;
    onSubmitCapture?: react.FormEventHandler<HTMLParagraphElement> | undefined;
    onInvalid?: react.FormEventHandler<HTMLParagraphElement> | undefined;
    onInvalidCapture?: react.FormEventHandler<HTMLParagraphElement> | undefined;
    onLoad?: react.ReactEventHandler<HTMLParagraphElement> | undefined;
    onLoadCapture?: react.ReactEventHandler<HTMLParagraphElement> | undefined;
    onError?: react.ReactEventHandler<HTMLParagraphElement> | undefined;
    onErrorCapture?: react.ReactEventHandler<HTMLParagraphElement> | undefined;
    onKeyDown?: react.KeyboardEventHandler<HTMLParagraphElement> | undefined;
    onKeyDownCapture?: react.KeyboardEventHandler<HTMLParagraphElement> | undefined;
    onKeyPress?: react.KeyboardEventHandler<HTMLParagraphElement> | undefined;
    onKeyPressCapture?: react.KeyboardEventHandler<HTMLParagraphElement> | undefined;
    onKeyUp?: react.KeyboardEventHandler<HTMLParagraphElement> | undefined;
    onKeyUpCapture?: react.KeyboardEventHandler<HTMLParagraphElement> | undefined;
    onAbort?: react.ReactEventHandler<HTMLParagraphElement> | undefined;
    onAbortCapture?: react.ReactEventHandler<HTMLParagraphElement> | undefined;
    onCanPlay?: react.ReactEventHandler<HTMLParagraphElement> | undefined;
    onCanPlayCapture?: react.ReactEventHandler<HTMLParagraphElement> | undefined;
    onCanPlayThrough?: react.ReactEventHandler<HTMLParagraphElement> | undefined;
    onCanPlayThroughCapture?: react.ReactEventHandler<HTMLParagraphElement> | undefined;
    onDurationChange?: react.ReactEventHandler<HTMLParagraphElement> | undefined;
    onDurationChangeCapture?: react.ReactEventHandler<HTMLParagraphElement> | undefined;
    onEmptied?: react.ReactEventHandler<HTMLParagraphElement> | undefined;
    onEmptiedCapture?: react.ReactEventHandler<HTMLParagraphElement> | undefined;
    onEncrypted?: react.ReactEventHandler<HTMLParagraphElement> | undefined;
    onEncryptedCapture?: react.ReactEventHandler<HTMLParagraphElement> | undefined;
    onEnded?: react.ReactEventHandler<HTMLParagraphElement> | undefined;
    onEndedCapture?: react.ReactEventHandler<HTMLParagraphElement> | undefined;
    onLoadedData?: react.ReactEventHandler<HTMLParagraphElement> | undefined;
    onLoadedDataCapture?: react.ReactEventHandler<HTMLParagraphElement> | undefined;
    onLoadedMetadata?: react.ReactEventHandler<HTMLParagraphElement> | undefined;
    onLoadedMetadataCapture?: react.ReactEventHandler<HTMLParagraphElement> | undefined;
    onLoadStart?: react.ReactEventHandler<HTMLParagraphElement> | undefined;
    onLoadStartCapture?: react.ReactEventHandler<HTMLParagraphElement> | undefined;
    onPause?: react.ReactEventHandler<HTMLParagraphElement> | undefined;
    onPauseCapture?: react.ReactEventHandler<HTMLParagraphElement> | undefined;
    onPlay?: react.ReactEventHandler<HTMLParagraphElement> | undefined;
    onPlayCapture?: react.ReactEventHandler<HTMLParagraphElement> | undefined;
    onPlaying?: react.ReactEventHandler<HTMLParagraphElement> | undefined;
    onPlayingCapture?: react.ReactEventHandler<HTMLParagraphElement> | undefined;
    onProgress?: react.ReactEventHandler<HTMLParagraphElement> | undefined;
    onProgressCapture?: react.ReactEventHandler<HTMLParagraphElement> | undefined;
    onRateChange?: react.ReactEventHandler<HTMLParagraphElement> | undefined;
    onRateChangeCapture?: react.ReactEventHandler<HTMLParagraphElement> | undefined;
    onResize?: react.ReactEventHandler<HTMLParagraphElement> | undefined;
    onResizeCapture?: react.ReactEventHandler<HTMLParagraphElement> | undefined;
    onSeeked?: react.ReactEventHandler<HTMLParagraphElement> | undefined;
    onSeekedCapture?: react.ReactEventHandler<HTMLParagraphElement> | undefined;
    onSeeking?: react.ReactEventHandler<HTMLParagraphElement> | undefined;
    onSeekingCapture?: react.ReactEventHandler<HTMLParagraphElement> | undefined;
    onStalled?: react.ReactEventHandler<HTMLParagraphElement> | undefined;
    onStalledCapture?: react.ReactEventHandler<HTMLParagraphElement> | undefined;
    onSuspend?: react.ReactEventHandler<HTMLParagraphElement> | undefined;
    onSuspendCapture?: react.ReactEventHandler<HTMLParagraphElement> | undefined;
    onTimeUpdate?: react.ReactEventHandler<HTMLParagraphElement> | undefined;
    onTimeUpdateCapture?: react.ReactEventHandler<HTMLParagraphElement> | undefined;
    onVolumeChange?: react.ReactEventHandler<HTMLParagraphElement> | undefined;
    onVolumeChangeCapture?: react.ReactEventHandler<HTMLParagraphElement> | undefined;
    onWaiting?: react.ReactEventHandler<HTMLParagraphElement> | undefined;
    onWaitingCapture?: react.ReactEventHandler<HTMLParagraphElement> | undefined;
    onAuxClick?: react.MouseEventHandler<HTMLParagraphElement> | undefined;
    onAuxClickCapture?: react.MouseEventHandler<HTMLParagraphElement> | undefined;
    onClick?: react.MouseEventHandler<HTMLParagraphElement> | undefined;
    onClickCapture?: react.MouseEventHandler<HTMLParagraphElement> | undefined;
    onContextMenu?: react.MouseEventHandler<HTMLParagraphElement> | undefined;
    onContextMenuCapture?: react.MouseEventHandler<HTMLParagraphElement> | undefined;
    onDoubleClick?: react.MouseEventHandler<HTMLParagraphElement> | undefined;
    onDoubleClickCapture?: react.MouseEventHandler<HTMLParagraphElement> | undefined;
    onDrag?: react.DragEventHandler<HTMLParagraphElement> | undefined;
    onDragCapture?: react.DragEventHandler<HTMLParagraphElement> | undefined;
    onDragEnd?: react.DragEventHandler<HTMLParagraphElement> | undefined;
    onDragEndCapture?: react.DragEventHandler<HTMLParagraphElement> | undefined;
    onDragEnter?: react.DragEventHandler<HTMLParagraphElement> | undefined;
    onDragEnterCapture?: react.DragEventHandler<HTMLParagraphElement> | undefined;
    onDragExit?: react.DragEventHandler<HTMLParagraphElement> | undefined;
    onDragExitCapture?: react.DragEventHandler<HTMLParagraphElement> | undefined;
    onDragLeave?: react.DragEventHandler<HTMLParagraphElement> | undefined;
    onDragLeaveCapture?: react.DragEventHandler<HTMLParagraphElement> | undefined;
    onDragOver?: react.DragEventHandler<HTMLParagraphElement> | undefined;
    onDragOverCapture?: react.DragEventHandler<HTMLParagraphElement> | undefined;
    onDragStart?: react.DragEventHandler<HTMLParagraphElement> | undefined;
    onDragStartCapture?: react.DragEventHandler<HTMLParagraphElement> | undefined;
    onDrop?: react.DragEventHandler<HTMLParagraphElement> | undefined;
    onDropCapture?: react.DragEventHandler<HTMLParagraphElement> | undefined;
    onMouseDown?: react.MouseEventHandler<HTMLParagraphElement> | undefined;
    onMouseDownCapture?: react.MouseEventHandler<HTMLParagraphElement> | undefined;
    onMouseEnter?: react.MouseEventHandler<HTMLParagraphElement> | undefined;
    onMouseLeave?: react.MouseEventHandler<HTMLParagraphElement> | undefined;
    onMouseMove?: react.MouseEventHandler<HTMLParagraphElement> | undefined;
    onMouseMoveCapture?: react.MouseEventHandler<HTMLParagraphElement> | undefined;
    onMouseOut?: react.MouseEventHandler<HTMLParagraphElement> | undefined;
    onMouseOutCapture?: react.MouseEventHandler<HTMLParagraphElement> | undefined;
    onMouseOver?: react.MouseEventHandler<HTMLParagraphElement> | undefined;
    onMouseOverCapture?: react.MouseEventHandler<HTMLParagraphElement> | undefined;
    onMouseUp?: react.MouseEventHandler<HTMLParagraphElement> | undefined;
    onMouseUpCapture?: react.MouseEventHandler<HTMLParagraphElement> | undefined;
    onSelect?: react.ReactEventHandler<HTMLParagraphElement> | undefined;
    onSelectCapture?: react.ReactEventHandler<HTMLParagraphElement> | undefined;
    onTouchCancel?: react.TouchEventHandler<HTMLParagraphElement> | undefined;
    onTouchCancelCapture?: react.TouchEventHandler<HTMLParagraphElement> | undefined;
    onTouchEnd?: react.TouchEventHandler<HTMLParagraphElement> | undefined;
    onTouchEndCapture?: react.TouchEventHandler<HTMLParagraphElement> | undefined;
    onTouchMove?: react.TouchEventHandler<HTMLParagraphElement> | undefined;
    onTouchMoveCapture?: react.TouchEventHandler<HTMLParagraphElement> | undefined;
    onTouchStart?: react.TouchEventHandler<HTMLParagraphElement> | undefined;
    onTouchStartCapture?: react.TouchEventHandler<HTMLParagraphElement> | undefined;
    onPointerDown?: react.PointerEventHandler<HTMLParagraphElement> | undefined;
    onPointerDownCapture?: react.PointerEventHandler<HTMLParagraphElement> | undefined;
    onPointerMove?: react.PointerEventHandler<HTMLParagraphElement> | undefined;
    onPointerMoveCapture?: react.PointerEventHandler<HTMLParagraphElement> | undefined;
    onPointerUp?: react.PointerEventHandler<HTMLParagraphElement> | undefined;
    onPointerUpCapture?: react.PointerEventHandler<HTMLParagraphElement> | undefined;
    onPointerCancel?: react.PointerEventHandler<HTMLParagraphElement> | undefined;
    onPointerCancelCapture?: react.PointerEventHandler<HTMLParagraphElement> | undefined;
    onPointerEnter?: react.PointerEventHandler<HTMLParagraphElement> | undefined;
    onPointerLeave?: react.PointerEventHandler<HTMLParagraphElement> | undefined;
    onPointerOver?: react.PointerEventHandler<HTMLParagraphElement> | undefined;
    onPointerOverCapture?: react.PointerEventHandler<HTMLParagraphElement> | undefined;
    onPointerOut?: react.PointerEventHandler<HTMLParagraphElement> | undefined;
    onPointerOutCapture?: react.PointerEventHandler<HTMLParagraphElement> | undefined;
    onGotPointerCapture?: react.PointerEventHandler<HTMLParagraphElement> | undefined;
    onGotPointerCaptureCapture?: react.PointerEventHandler<HTMLParagraphElement> | undefined;
    onLostPointerCapture?: react.PointerEventHandler<HTMLParagraphElement> | undefined;
    onLostPointerCaptureCapture?: react.PointerEventHandler<HTMLParagraphElement> | undefined;
    onScroll?: react.UIEventHandler<HTMLParagraphElement> | undefined;
    onScrollCapture?: react.UIEventHandler<HTMLParagraphElement> | undefined;
    onWheel?: react.WheelEventHandler<HTMLParagraphElement> | undefined;
    onWheelCapture?: react.WheelEventHandler<HTMLParagraphElement> | undefined;
    onAnimationStart?: react.AnimationEventHandler<HTMLParagraphElement> | undefined;
    onAnimationStartCapture?: react.AnimationEventHandler<HTMLParagraphElement> | undefined;
    onAnimationEnd?: react.AnimationEventHandler<HTMLParagraphElement> | undefined;
    onAnimationEndCapture?: react.AnimationEventHandler<HTMLParagraphElement> | undefined;
    onAnimationIteration?: react.AnimationEventHandler<HTMLParagraphElement> | undefined;
    onAnimationIterationCapture?: react.AnimationEventHandler<HTMLParagraphElement> | undefined;
    onTransitionEnd?: react.TransitionEventHandler<HTMLParagraphElement> | undefined;
    onTransitionEndCapture?: react.TransitionEventHandler<HTMLParagraphElement> | undefined;
} & react.RefAttributes<HTMLParagraphElement>>;

interface PortalKnownProps extends StyledProps, WithChildren {
    /** @default true */
    closeOnClickOverlay?: boolean;
    /** @default true */
    closeOnEsc?: boolean;
    /** @default false */
    hideOverlay?: boolean;
    /** @default false */
    isActive?: boolean;
    onClose?: () => void;
    onOpen?: () => void;
    /** @default false */
    showCloseButton?: boolean;
    /** @default 1000 */
    zIndex?: number;
}
type PortalProps = Simplify<PortalKnownProps>;
declare function Portal(props: PortalProps): react.ReactPortal | null;
declare namespace Portal {
    var displayName: string;
}

interface ProgressBarKnownProps extends StyledProps, WithAccent, WithMargin {
    /**
     * Component track color
     * @default 'gray.200'
     */
    backgroundColor?: VariantWithTones;
    /** @default false */
    hideText?: boolean;
    /** @default false */
    large?: boolean;
    step: number;
    steps: number;
    /** @default 100% */
    width?: StringOrNumber;
}
type ProgressBarProps = Simplify<OmitElementProps<HTMLDivElement, ProgressBarKnownProps>>;
declare const ProgressBar: react.ForwardRefExoticComponent<{
    backgroundColor?: VariantWithTones | undefined;
    hideText?: boolean | undefined;
    large?: boolean | undefined;
    step: number;
    steps: number;
    width?: StringOrNumber | undefined;
    as?: react.ElementType | undefined;
    theme?: Theme | undefined;
    accent?: VariantWithTones | undefined;
    margin?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    mb?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    ml?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mr?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mt?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mx?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    my?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    list?: string | undefined;
    download?: any;
    key?: react.Key | null | undefined;
    style?: react.CSSProperties | undefined;
    name?: string | undefined;
    color?: string | undefined;
    hidden?: boolean | undefined;
    start?: number | undefined;
    height?: string | number | undefined;
    wrap?: string | undefined;
    content?: string | undefined;
    readOnly?: boolean | undefined;
    low?: number | undefined;
    high?: number | undefined;
    cite?: string | undefined;
    data?: string | undefined;
    form?: string | undefined;
    label?: string | undefined;
    slot?: string | undefined;
    span?: number | undefined;
    summary?: string | undefined;
    title?: string | undefined;
    pattern?: string | undefined;
    prefix?: string | undefined;
    type?: string | undefined;
    disabled?: boolean | undefined;
    value?: string | number | readonly string[] | undefined;
    accept?: string | undefined;
    acceptCharset?: string | undefined;
    action?: string | undefined;
    allowFullScreen?: boolean | undefined;
    allowTransparency?: boolean | undefined;
    alt?: string | undefined;
    async?: boolean | undefined;
    autoComplete?: string | undefined;
    autoPlay?: boolean | undefined;
    capture?: boolean | "user" | "environment" | undefined;
    cellPadding?: string | number | undefined;
    cellSpacing?: string | number | undefined;
    charSet?: string | undefined;
    challenge?: string | undefined;
    checked?: boolean | undefined;
    classID?: string | undefined;
    cols?: number | undefined;
    colSpan?: number | undefined;
    controls?: boolean | undefined;
    coords?: string | undefined;
    crossOrigin?: "" | "anonymous" | "use-credentials" | undefined;
    dateTime?: string | undefined;
    default?: boolean | undefined;
    defer?: boolean | undefined;
    encType?: string | undefined;
    formAction?: string | undefined;
    formEncType?: string | undefined;
    formMethod?: string | undefined;
    formNoValidate?: boolean | undefined;
    formTarget?: string | undefined;
    frameBorder?: string | number | undefined;
    headers?: string | undefined;
    href?: string | undefined;
    hrefLang?: string | undefined;
    htmlFor?: string | undefined;
    httpEquiv?: string | undefined;
    integrity?: string | undefined;
    keyParams?: string | undefined;
    keyType?: string | undefined;
    kind?: string | undefined;
    loop?: boolean | undefined;
    manifest?: string | undefined;
    marginHeight?: number | undefined;
    marginWidth?: number | undefined;
    max?: string | number | undefined;
    maxLength?: number | undefined;
    media?: string | undefined;
    mediaGroup?: string | undefined;
    method?: string | undefined;
    min?: string | number | undefined;
    minLength?: number | undefined;
    multiple?: boolean | undefined;
    muted?: boolean | undefined;
    noValidate?: boolean | undefined;
    open?: boolean | undefined;
    optimum?: number | undefined;
    placeholder?: string | undefined;
    playsInline?: boolean | undefined;
    poster?: string | undefined;
    preload?: string | undefined;
    required?: boolean | undefined;
    reversed?: boolean | undefined;
    rows?: number | undefined;
    rowSpan?: number | undefined;
    sandbox?: string | undefined;
    scope?: string | undefined;
    scoped?: boolean | undefined;
    scrolling?: string | undefined;
    seamless?: boolean | undefined;
    selected?: boolean | undefined;
    shape?: string | undefined;
    sizes?: string | undefined;
    src?: string | undefined;
    srcDoc?: string | undefined;
    srcLang?: string | undefined;
    srcSet?: string | undefined;
    target?: string | undefined;
    useMap?: string | undefined;
    wmode?: string | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    autoFocus?: boolean | undefined;
    className?: string | undefined;
    contentEditable?: "inherit" | (boolean | "false" | "true") | "plaintext-only" | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "false" | "true") | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    nonce?: string | undefined;
    spellCheck?: (boolean | "false" | "true") | undefined;
    tabIndex?: number | undefined;
    translate?: "yes" | "no" | undefined;
    radioGroup?: string | undefined;
    role?: react.AriaRole | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    property?: string | undefined;
    rel?: string | undefined;
    resource?: string | undefined;
    rev?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "search" | "email" | "tel" | "text" | "none" | "url" | "numeric" | "decimal" | undefined;
    is?: string | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: (boolean | "false" | "true") | undefined;
    "aria-autocomplete"?: "list" | "none" | "inline" | "both" | undefined;
    "aria-braillelabel"?: string | undefined;
    "aria-brailleroledescription"?: string | undefined;
    "aria-busy"?: (boolean | "false" | "true") | undefined;
    "aria-checked"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colindextext"?: string | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "date" | "time" | "location" | "step" | "page" | "false" | "true" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-description"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: (boolean | "false" | "true") | undefined;
    "aria-dropeffect"?: "copy" | "link" | "none" | "move" | "execute" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: (boolean | "false" | "true") | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: (boolean | "false" | "true") | undefined;
    "aria-haspopup"?: boolean | "menu" | "tree" | "grid" | "dialog" | "listbox" | "false" | "true" | undefined;
    "aria-hidden"?: (boolean | "false" | "true") | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: (boolean | "false" | "true") | undefined;
    "aria-multiline"?: (boolean | "false" | "true") | undefined;
    "aria-multiselectable"?: (boolean | "false" | "true") | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-readonly"?: (boolean | "false" | "true") | undefined;
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    "aria-required"?: (boolean | "false" | "true") | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowindextext"?: string | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: (boolean | "false" | "true") | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    children?: react.ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    } | undefined;
    onCopy?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCopyCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCut?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCutCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onPaste?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onPasteCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCompositionEnd?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionEndCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionStart?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionStartCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionUpdate?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionUpdateCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onFocus?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onFocusCapture?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onBlur?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onBlurCapture?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onChange?: react.FormEventHandler<HTMLDivElement> | undefined;
    onChangeCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onBeforeInput?: react.FormEventHandler<HTMLDivElement> | undefined;
    onBeforeInputCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInput?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInputCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onReset?: react.FormEventHandler<HTMLDivElement> | undefined;
    onResetCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onSubmit?: react.FormEventHandler<HTMLDivElement> | undefined;
    onSubmitCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInvalid?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInvalidCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onLoad?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onError?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onErrorCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onKeyDown?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyDownCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyPress?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyPressCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyUp?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyUpCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onAbort?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onAbortCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlay?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayThrough?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayThroughCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onDurationChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onDurationChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEmptied?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEmptiedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEncrypted?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEncryptedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEnded?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEndedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedData?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedDataCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedMetadata?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedMetadataCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadStart?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadStartCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPause?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPauseCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlay?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlayCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlaying?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlayingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onProgress?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onProgressCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onRateChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onRateChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onResize?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onResizeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeeked?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeekedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeeking?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeekingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onStalled?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onStalledCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSuspend?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSuspendCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onTimeUpdate?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onTimeUpdateCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onVolumeChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onVolumeChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onWaiting?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onWaitingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onAuxClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onAuxClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onContextMenu?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onContextMenuCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onDoubleClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onDoubleClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onDrag?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnd?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEndCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnter?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnterCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragExit?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragExitCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragLeave?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragLeaveCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragOver?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragOverCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragStart?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragStartCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDrop?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDropCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onMouseDown?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseDownCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseEnter?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseLeave?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseMove?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseMoveCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOut?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOutCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOver?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOverCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseUp?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseUpCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onSelect?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSelectCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onTouchCancel?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchCancelCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchEnd?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchEndCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchMove?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchMoveCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchStart?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchStartCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onPointerDown?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerDownCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerMove?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerMoveCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerUp?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerUpCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerCancel?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerCancelCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerEnter?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerLeave?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOver?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOverCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOut?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOutCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onGotPointerCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onGotPointerCaptureCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onLostPointerCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onLostPointerCaptureCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onScroll?: react.UIEventHandler<HTMLDivElement> | undefined;
    onScrollCapture?: react.UIEventHandler<HTMLDivElement> | undefined;
    onWheel?: react.WheelEventHandler<HTMLDivElement> | undefined;
    onWheelCapture?: react.WheelEventHandler<HTMLDivElement> | undefined;
    onAnimationStart?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationStartCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationEnd?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationEndCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationIteration?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationIterationCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onTransitionEnd?: react.TransitionEventHandler<HTMLDivElement> | undefined;
    onTransitionEndCapture?: react.TransitionEventHandler<HTMLDivElement> | undefined;
} & react.RefAttributes<HTMLDivElement>>;

type TextOptions = WithTextOptions<HeadingSizes | SizesAll>;
interface QuoteKnownProps extends StyledProps, WithAccent, WithChildren, TextOptions {
    attribution?: ReactNode;
    /**
     * The distance between the quote and citation
     *
     * @default xs
     */
    attributionGap?: Spacing;
    /**
     * The font size of the citation
     *
     * @default sm
     */
    attributionSize?: TextOptions['size'];
    /**
     * The placement of the border
     *
     * @default left
     */
    border?: Position;
    /**
     * The size of the border
     *
     * @default sm
     */
    borderSize?: Sizes;
    /**
     * The distance between the border and content
     *
     * @default md
     */
    gap?: Spacing;
}
type QuoteProps = Simplify<OmitElementProps<HTMLElement, QuoteKnownProps>>;
declare const Quote: react.ForwardRefExoticComponent<{
    attribution?: ReactNode;
    attributionGap?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    attributionSize?: TextOptions['size'];
    border?: Position | undefined;
    borderSize?: "sm" | "md" | "lg" | undefined;
    gap?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    as?: react.ElementType | undefined;
    theme?: Theme | undefined;
    accent?: VariantWithTones | undefined;
    children: ReactNode;
    bold?: boolean | undefined;
    italic?: boolean | undefined;
    letterSpacing?: csstype.Property.LetterSpacing<0 | (string & {})> | undefined;
    lineHeight?: csstype.Property.LineHeight<0 | (string & {})> | undefined;
    textDecoration?: csstype.Property.TextDecoration<0 | (string & {})> | undefined;
    textTransform?: csstype.Property.TextTransform | undefined;
    wordSpacing?: csstype.Property.WordSpacing<0 | (string & {})> | undefined;
    size?: "sm" | "md" | "lg" | "xs" | HeadingSizes | undefined;
    list?: string | undefined;
    download?: any;
    key?: react.Key | null | undefined;
    style?: react.CSSProperties | undefined;
    name?: string | undefined;
    color?: string | undefined;
    hidden?: boolean | undefined;
    start?: number | undefined;
    height?: string | number | undefined;
    width?: string | number | undefined;
    wrap?: string | undefined;
    content?: string | undefined;
    readOnly?: boolean | undefined;
    low?: number | undefined;
    high?: number | undefined;
    cite?: string | undefined;
    data?: string | undefined;
    form?: string | undefined;
    label?: string | undefined;
    slot?: string | undefined;
    span?: number | undefined;
    summary?: string | undefined;
    title?: string | undefined;
    pattern?: string | undefined;
    prefix?: string | undefined;
    type?: string | undefined;
    disabled?: boolean | undefined;
    value?: string | number | readonly string[] | undefined;
    accept?: string | undefined;
    acceptCharset?: string | undefined;
    action?: string | undefined;
    allowFullScreen?: boolean | undefined;
    allowTransparency?: boolean | undefined;
    alt?: string | undefined;
    async?: boolean | undefined;
    autoComplete?: string | undefined;
    autoPlay?: boolean | undefined;
    capture?: boolean | "user" | "environment" | undefined;
    cellPadding?: string | number | undefined;
    cellSpacing?: string | number | undefined;
    charSet?: string | undefined;
    challenge?: string | undefined;
    checked?: boolean | undefined;
    classID?: string | undefined;
    cols?: number | undefined;
    colSpan?: number | undefined;
    controls?: boolean | undefined;
    coords?: string | undefined;
    crossOrigin?: "" | "anonymous" | "use-credentials" | undefined;
    dateTime?: string | undefined;
    default?: boolean | undefined;
    defer?: boolean | undefined;
    encType?: string | undefined;
    formAction?: string | undefined;
    formEncType?: string | undefined;
    formMethod?: string | undefined;
    formNoValidate?: boolean | undefined;
    formTarget?: string | undefined;
    frameBorder?: string | number | undefined;
    headers?: string | undefined;
    href?: string | undefined;
    hrefLang?: string | undefined;
    htmlFor?: string | undefined;
    httpEquiv?: string | undefined;
    integrity?: string | undefined;
    keyParams?: string | undefined;
    keyType?: string | undefined;
    kind?: string | undefined;
    loop?: boolean | undefined;
    manifest?: string | undefined;
    marginHeight?: number | undefined;
    marginWidth?: number | undefined;
    max?: string | number | undefined;
    maxLength?: number | undefined;
    media?: string | undefined;
    mediaGroup?: string | undefined;
    method?: string | undefined;
    min?: string | number | undefined;
    minLength?: number | undefined;
    multiple?: boolean | undefined;
    muted?: boolean | undefined;
    noValidate?: boolean | undefined;
    open?: boolean | undefined;
    optimum?: number | undefined;
    placeholder?: string | undefined;
    playsInline?: boolean | undefined;
    poster?: string | undefined;
    preload?: string | undefined;
    required?: boolean | undefined;
    reversed?: boolean | undefined;
    rows?: number | undefined;
    rowSpan?: number | undefined;
    sandbox?: string | undefined;
    scope?: string | undefined;
    scoped?: boolean | undefined;
    scrolling?: string | undefined;
    seamless?: boolean | undefined;
    selected?: boolean | undefined;
    shape?: string | undefined;
    sizes?: string | undefined;
    src?: string | undefined;
    srcDoc?: string | undefined;
    srcLang?: string | undefined;
    srcSet?: string | undefined;
    step?: string | number | undefined;
    target?: string | undefined;
    useMap?: string | undefined;
    wmode?: string | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    autoFocus?: boolean | undefined;
    className?: string | undefined;
    contentEditable?: "inherit" | (boolean | "false" | "true") | "plaintext-only" | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "false" | "true") | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    nonce?: string | undefined;
    spellCheck?: (boolean | "false" | "true") | undefined;
    tabIndex?: number | undefined;
    translate?: "yes" | "no" | undefined;
    radioGroup?: string | undefined;
    role?: react.AriaRole | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    property?: string | undefined;
    rel?: string | undefined;
    resource?: string | undefined;
    rev?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "search" | "email" | "tel" | "text" | "none" | "url" | "numeric" | "decimal" | undefined;
    is?: string | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: (boolean | "false" | "true") | undefined;
    "aria-autocomplete"?: "list" | "none" | "inline" | "both" | undefined;
    "aria-braillelabel"?: string | undefined;
    "aria-brailleroledescription"?: string | undefined;
    "aria-busy"?: (boolean | "false" | "true") | undefined;
    "aria-checked"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colindextext"?: string | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "date" | "time" | "location" | "step" | "page" | "false" | "true" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-description"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: (boolean | "false" | "true") | undefined;
    "aria-dropeffect"?: "copy" | "link" | "none" | "move" | "execute" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: (boolean | "false" | "true") | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: (boolean | "false" | "true") | undefined;
    "aria-haspopup"?: boolean | "menu" | "tree" | "grid" | "dialog" | "listbox" | "false" | "true" | undefined;
    "aria-hidden"?: (boolean | "false" | "true") | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: (boolean | "false" | "true") | undefined;
    "aria-multiline"?: (boolean | "false" | "true") | undefined;
    "aria-multiselectable"?: (boolean | "false" | "true") | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-readonly"?: (boolean | "false" | "true") | undefined;
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    "aria-required"?: (boolean | "false" | "true") | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowindextext"?: string | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: (boolean | "false" | "true") | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    } | undefined;
    onCopy?: react.ClipboardEventHandler<HTMLElement> | undefined;
    onCopyCapture?: react.ClipboardEventHandler<HTMLElement> | undefined;
    onCut?: react.ClipboardEventHandler<HTMLElement> | undefined;
    onCutCapture?: react.ClipboardEventHandler<HTMLElement> | undefined;
    onPaste?: react.ClipboardEventHandler<HTMLElement> | undefined;
    onPasteCapture?: react.ClipboardEventHandler<HTMLElement> | undefined;
    onCompositionEnd?: react.CompositionEventHandler<HTMLElement> | undefined;
    onCompositionEndCapture?: react.CompositionEventHandler<HTMLElement> | undefined;
    onCompositionStart?: react.CompositionEventHandler<HTMLElement> | undefined;
    onCompositionStartCapture?: react.CompositionEventHandler<HTMLElement> | undefined;
    onCompositionUpdate?: react.CompositionEventHandler<HTMLElement> | undefined;
    onCompositionUpdateCapture?: react.CompositionEventHandler<HTMLElement> | undefined;
    onFocus?: react.FocusEventHandler<HTMLElement> | undefined;
    onFocusCapture?: react.FocusEventHandler<HTMLElement> | undefined;
    onBlur?: react.FocusEventHandler<HTMLElement> | undefined;
    onBlurCapture?: react.FocusEventHandler<HTMLElement> | undefined;
    onChange?: react.FormEventHandler<HTMLElement> | undefined;
    onChangeCapture?: react.FormEventHandler<HTMLElement> | undefined;
    onBeforeInput?: react.FormEventHandler<HTMLElement> | undefined;
    onBeforeInputCapture?: react.FormEventHandler<HTMLElement> | undefined;
    onInput?: react.FormEventHandler<HTMLElement> | undefined;
    onInputCapture?: react.FormEventHandler<HTMLElement> | undefined;
    onReset?: react.FormEventHandler<HTMLElement> | undefined;
    onResetCapture?: react.FormEventHandler<HTMLElement> | undefined;
    onSubmit?: react.FormEventHandler<HTMLElement> | undefined;
    onSubmitCapture?: react.FormEventHandler<HTMLElement> | undefined;
    onInvalid?: react.FormEventHandler<HTMLElement> | undefined;
    onInvalidCapture?: react.FormEventHandler<HTMLElement> | undefined;
    onLoad?: react.ReactEventHandler<HTMLElement> | undefined;
    onLoadCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onError?: react.ReactEventHandler<HTMLElement> | undefined;
    onErrorCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onKeyDown?: react.KeyboardEventHandler<HTMLElement> | undefined;
    onKeyDownCapture?: react.KeyboardEventHandler<HTMLElement> | undefined;
    onKeyPress?: react.KeyboardEventHandler<HTMLElement> | undefined;
    onKeyPressCapture?: react.KeyboardEventHandler<HTMLElement> | undefined;
    onKeyUp?: react.KeyboardEventHandler<HTMLElement> | undefined;
    onKeyUpCapture?: react.KeyboardEventHandler<HTMLElement> | undefined;
    onAbort?: react.ReactEventHandler<HTMLElement> | undefined;
    onAbortCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onCanPlay?: react.ReactEventHandler<HTMLElement> | undefined;
    onCanPlayCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onCanPlayThrough?: react.ReactEventHandler<HTMLElement> | undefined;
    onCanPlayThroughCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onDurationChange?: react.ReactEventHandler<HTMLElement> | undefined;
    onDurationChangeCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onEmptied?: react.ReactEventHandler<HTMLElement> | undefined;
    onEmptiedCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onEncrypted?: react.ReactEventHandler<HTMLElement> | undefined;
    onEncryptedCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onEnded?: react.ReactEventHandler<HTMLElement> | undefined;
    onEndedCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onLoadedData?: react.ReactEventHandler<HTMLElement> | undefined;
    onLoadedDataCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onLoadedMetadata?: react.ReactEventHandler<HTMLElement> | undefined;
    onLoadedMetadataCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onLoadStart?: react.ReactEventHandler<HTMLElement> | undefined;
    onLoadStartCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onPause?: react.ReactEventHandler<HTMLElement> | undefined;
    onPauseCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onPlay?: react.ReactEventHandler<HTMLElement> | undefined;
    onPlayCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onPlaying?: react.ReactEventHandler<HTMLElement> | undefined;
    onPlayingCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onProgress?: react.ReactEventHandler<HTMLElement> | undefined;
    onProgressCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onRateChange?: react.ReactEventHandler<HTMLElement> | undefined;
    onRateChangeCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onResize?: react.ReactEventHandler<HTMLElement> | undefined;
    onResizeCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onSeeked?: react.ReactEventHandler<HTMLElement> | undefined;
    onSeekedCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onSeeking?: react.ReactEventHandler<HTMLElement> | undefined;
    onSeekingCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onStalled?: react.ReactEventHandler<HTMLElement> | undefined;
    onStalledCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onSuspend?: react.ReactEventHandler<HTMLElement> | undefined;
    onSuspendCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onTimeUpdate?: react.ReactEventHandler<HTMLElement> | undefined;
    onTimeUpdateCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onVolumeChange?: react.ReactEventHandler<HTMLElement> | undefined;
    onVolumeChangeCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onWaiting?: react.ReactEventHandler<HTMLElement> | undefined;
    onWaitingCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onAuxClick?: react.MouseEventHandler<HTMLElement> | undefined;
    onAuxClickCapture?: react.MouseEventHandler<HTMLElement> | undefined;
    onClick?: react.MouseEventHandler<HTMLElement> | undefined;
    onClickCapture?: react.MouseEventHandler<HTMLElement> | undefined;
    onContextMenu?: react.MouseEventHandler<HTMLElement> | undefined;
    onContextMenuCapture?: react.MouseEventHandler<HTMLElement> | undefined;
    onDoubleClick?: react.MouseEventHandler<HTMLElement> | undefined;
    onDoubleClickCapture?: react.MouseEventHandler<HTMLElement> | undefined;
    onDrag?: react.DragEventHandler<HTMLElement> | undefined;
    onDragCapture?: react.DragEventHandler<HTMLElement> | undefined;
    onDragEnd?: react.DragEventHandler<HTMLElement> | undefined;
    onDragEndCapture?: react.DragEventHandler<HTMLElement> | undefined;
    onDragEnter?: react.DragEventHandler<HTMLElement> | undefined;
    onDragEnterCapture?: react.DragEventHandler<HTMLElement> | undefined;
    onDragExit?: react.DragEventHandler<HTMLElement> | undefined;
    onDragExitCapture?: react.DragEventHandler<HTMLElement> | undefined;
    onDragLeave?: react.DragEventHandler<HTMLElement> | undefined;
    onDragLeaveCapture?: react.DragEventHandler<HTMLElement> | undefined;
    onDragOver?: react.DragEventHandler<HTMLElement> | undefined;
    onDragOverCapture?: react.DragEventHandler<HTMLElement> | undefined;
    onDragStart?: react.DragEventHandler<HTMLElement> | undefined;
    onDragStartCapture?: react.DragEventHandler<HTMLElement> | undefined;
    onDrop?: react.DragEventHandler<HTMLElement> | undefined;
    onDropCapture?: react.DragEventHandler<HTMLElement> | undefined;
    onMouseDown?: react.MouseEventHandler<HTMLElement> | undefined;
    onMouseDownCapture?: react.MouseEventHandler<HTMLElement> | undefined;
    onMouseEnter?: react.MouseEventHandler<HTMLElement> | undefined;
    onMouseLeave?: react.MouseEventHandler<HTMLElement> | undefined;
    onMouseMove?: react.MouseEventHandler<HTMLElement> | undefined;
    onMouseMoveCapture?: react.MouseEventHandler<HTMLElement> | undefined;
    onMouseOut?: react.MouseEventHandler<HTMLElement> | undefined;
    onMouseOutCapture?: react.MouseEventHandler<HTMLElement> | undefined;
    onMouseOver?: react.MouseEventHandler<HTMLElement> | undefined;
    onMouseOverCapture?: react.MouseEventHandler<HTMLElement> | undefined;
    onMouseUp?: react.MouseEventHandler<HTMLElement> | undefined;
    onMouseUpCapture?: react.MouseEventHandler<HTMLElement> | undefined;
    onSelect?: react.ReactEventHandler<HTMLElement> | undefined;
    onSelectCapture?: react.ReactEventHandler<HTMLElement> | undefined;
    onTouchCancel?: react.TouchEventHandler<HTMLElement> | undefined;
    onTouchCancelCapture?: react.TouchEventHandler<HTMLElement> | undefined;
    onTouchEnd?: react.TouchEventHandler<HTMLElement> | undefined;
    onTouchEndCapture?: react.TouchEventHandler<HTMLElement> | undefined;
    onTouchMove?: react.TouchEventHandler<HTMLElement> | undefined;
    onTouchMoveCapture?: react.TouchEventHandler<HTMLElement> | undefined;
    onTouchStart?: react.TouchEventHandler<HTMLElement> | undefined;
    onTouchStartCapture?: react.TouchEventHandler<HTMLElement> | undefined;
    onPointerDown?: react.PointerEventHandler<HTMLElement> | undefined;
    onPointerDownCapture?: react.PointerEventHandler<HTMLElement> | undefined;
    onPointerMove?: react.PointerEventHandler<HTMLElement> | undefined;
    onPointerMoveCapture?: react.PointerEventHandler<HTMLElement> | undefined;
    onPointerUp?: react.PointerEventHandler<HTMLElement> | undefined;
    onPointerUpCapture?: react.PointerEventHandler<HTMLElement> | undefined;
    onPointerCancel?: react.PointerEventHandler<HTMLElement> | undefined;
    onPointerCancelCapture?: react.PointerEventHandler<HTMLElement> | undefined;
    onPointerEnter?: react.PointerEventHandler<HTMLElement> | undefined;
    onPointerLeave?: react.PointerEventHandler<HTMLElement> | undefined;
    onPointerOver?: react.PointerEventHandler<HTMLElement> | undefined;
    onPointerOverCapture?: react.PointerEventHandler<HTMLElement> | undefined;
    onPointerOut?: react.PointerEventHandler<HTMLElement> | undefined;
    onPointerOutCapture?: react.PointerEventHandler<HTMLElement> | undefined;
    onGotPointerCapture?: react.PointerEventHandler<HTMLElement> | undefined;
    onGotPointerCaptureCapture?: react.PointerEventHandler<HTMLElement> | undefined;
    onLostPointerCapture?: react.PointerEventHandler<HTMLElement> | undefined;
    onLostPointerCaptureCapture?: react.PointerEventHandler<HTMLElement> | undefined;
    onScroll?: react.UIEventHandler<HTMLElement> | undefined;
    onScrollCapture?: react.UIEventHandler<HTMLElement> | undefined;
    onWheel?: react.WheelEventHandler<HTMLElement> | undefined;
    onWheelCapture?: react.WheelEventHandler<HTMLElement> | undefined;
    onAnimationStart?: react.AnimationEventHandler<HTMLElement> | undefined;
    onAnimationStartCapture?: react.AnimationEventHandler<HTMLElement> | undefined;
    onAnimationEnd?: react.AnimationEventHandler<HTMLElement> | undefined;
    onAnimationEndCapture?: react.AnimationEventHandler<HTMLElement> | undefined;
    onAnimationIteration?: react.AnimationEventHandler<HTMLElement> | undefined;
    onAnimationIterationCapture?: react.AnimationEventHandler<HTMLElement> | undefined;
    onTransitionEnd?: react.TransitionEventHandler<HTMLElement> | undefined;
    onTransitionEndCapture?: react.TransitionEventHandler<HTMLElement> | undefined;
} & react.RefAttributes<HTMLElement>>;

interface RadioGroupKnownProps extends WithComponentSize, Omit<RadioProps, 'align' | 'checked' | 'defaultChecked' | 'label'> {
    defaultValue?: StringOrNumber;
    inline?: boolean;
    items: RadioItem[];
}
type RadioGroupProps = Simplify<RadioGroupKnownProps>;
declare function RadioGroup(props: RadioGroupProps): react_jsx_runtime.JSX.Element | null;
declare namespace RadioGroup {
    var displayName: string;
}

interface SearchItem extends WithAccent {
    label?: ReactNode;
    value: string;
}
interface SearchKnownProps extends StyledProps, WithAccent, WithBorderless, WithMargin {
    /**
     * Disable closing the list when you click outside.
     * @default false
     */
    disableCloseOnBlur?: boolean;
    /** @default false */
    disableKeyboardNavigation?: boolean;
    disabled?: boolean;
    height?: StringOrNumber;
    /** @default false */
    hideIcon?: boolean;
    /** @default search */
    icon?: Icons;
    items: SearchItem[];
    loading?: boolean;
    noResultsLabel?: ReactNode;
    onBlur?: (value: string) => void;
    onFocus?: (value: string) => void;
    /**
     * Fires after the "debounce" delay
     */
    onSearch?: (value: string) => void;
    /**
     * Debounce onSearch event in milliseconds.
     * Set it to 0 for real-time events.
     * @default 250
     */
    onSearchDebounce?: number;
    onSelect: (value: string) => void;
    /**
     * Fires immediately when the user types
     */
    onType?: (value: string) => void;
    /** @default Search for... */
    placeholder?: string;
    /**
     * Disable internal filtering.
     * @default false
     */
    remote?: boolean;
    /**
     * Show the list on focus (if available)
     *
     * @default true
     */
    showListOnFocus?: boolean;
    style?: CSSProperties;
    /** @default 100% */
    width?: StringOrNumber;
}
type SearchProps = Simplify<SearchKnownProps>;

interface SelectKnownProps extends StyledProps, WithAccent, WithBorderless, WithChildren, Omit<WithElementSpacing, 'suffixSpacing'>, WithFormElements {
    large?: boolean;
}
type SelectProps = Simplify<OmitElementProps<HTMLSelectElement, SelectKnownProps>>;
declare const Select: react.ForwardRefExoticComponent<{
    large?: boolean | undefined;
    as?: react.ElementType | undefined;
    theme?: Theme | undefined;
    accent?: VariantWithTones | undefined;
    borderless?: boolean | undefined;
    children: react.ReactNode;
    prefixSpacing?: boolean | _gilbarbara_types.StringOrNumber | undefined;
    name: string;
    readOnly?: boolean | undefined;
    width?: _gilbarbara_types.StringOrNumber | undefined;
    disabled?: boolean | undefined;
    list?: string | undefined;
    download?: any;
    key?: react.Key | null | undefined;
    style?: react.CSSProperties | undefined;
    color?: string | undefined;
    hidden?: boolean | undefined;
    start?: number | undefined;
    height?: string | number | undefined;
    wrap?: string | undefined;
    content?: string | undefined;
    low?: number | undefined;
    high?: number | undefined;
    cite?: string | undefined;
    data?: string | undefined;
    form?: string | undefined;
    label?: string | undefined;
    slot?: string | undefined;
    span?: number | undefined;
    summary?: string | undefined;
    title?: string | undefined;
    pattern?: string | undefined;
    prefix?: string | undefined;
    type?: string | undefined;
    value?: string | number | readonly string[] | undefined;
    accept?: string | undefined;
    acceptCharset?: string | undefined;
    action?: string | undefined;
    allowFullScreen?: boolean | undefined;
    allowTransparency?: boolean | undefined;
    alt?: string | undefined;
    async?: boolean | undefined;
    autoComplete?: string | undefined;
    autoPlay?: boolean | undefined;
    capture?: boolean | "user" | "environment" | undefined;
    cellPadding?: string | number | undefined;
    cellSpacing?: string | number | undefined;
    charSet?: string | undefined;
    challenge?: string | undefined;
    checked?: boolean | undefined;
    classID?: string | undefined;
    cols?: number | undefined;
    colSpan?: number | undefined;
    controls?: boolean | undefined;
    coords?: string | undefined;
    crossOrigin?: "" | "anonymous" | "use-credentials" | undefined;
    dateTime?: string | undefined;
    default?: boolean | undefined;
    defer?: boolean | undefined;
    encType?: string | undefined;
    formAction?: string | undefined;
    formEncType?: string | undefined;
    formMethod?: string | undefined;
    formNoValidate?: boolean | undefined;
    formTarget?: string | undefined;
    frameBorder?: string | number | undefined;
    headers?: string | undefined;
    href?: string | undefined;
    hrefLang?: string | undefined;
    htmlFor?: string | undefined;
    httpEquiv?: string | undefined;
    integrity?: string | undefined;
    keyParams?: string | undefined;
    keyType?: string | undefined;
    kind?: string | undefined;
    loop?: boolean | undefined;
    manifest?: string | undefined;
    marginHeight?: number | undefined;
    marginWidth?: number | undefined;
    max?: string | number | undefined;
    maxLength?: number | undefined;
    media?: string | undefined;
    mediaGroup?: string | undefined;
    method?: string | undefined;
    min?: string | number | undefined;
    minLength?: number | undefined;
    multiple?: boolean | undefined;
    muted?: boolean | undefined;
    noValidate?: boolean | undefined;
    open?: boolean | undefined;
    optimum?: number | undefined;
    placeholder?: string | undefined;
    playsInline?: boolean | undefined;
    poster?: string | undefined;
    preload?: string | undefined;
    required?: boolean | undefined;
    reversed?: boolean | undefined;
    rows?: number | undefined;
    rowSpan?: number | undefined;
    sandbox?: string | undefined;
    scope?: string | undefined;
    scoped?: boolean | undefined;
    scrolling?: string | undefined;
    seamless?: boolean | undefined;
    selected?: boolean | undefined;
    shape?: string | undefined;
    sizes?: string | undefined;
    src?: string | undefined;
    srcDoc?: string | undefined;
    srcLang?: string | undefined;
    srcSet?: string | undefined;
    step?: string | number | undefined;
    target?: string | undefined;
    useMap?: string | undefined;
    wmode?: string | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    autoFocus?: boolean | undefined;
    className?: string | undefined;
    contentEditable?: "inherit" | (boolean | "false" | "true") | "plaintext-only" | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "false" | "true") | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    nonce?: string | undefined;
    spellCheck?: (boolean | "false" | "true") | undefined;
    tabIndex?: number | undefined;
    translate?: "yes" | "no" | undefined;
    radioGroup?: string | undefined;
    role?: react.AriaRole | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    property?: string | undefined;
    rel?: string | undefined;
    resource?: string | undefined;
    rev?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "search" | "email" | "tel" | "text" | "none" | "url" | "numeric" | "decimal" | undefined;
    is?: string | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: (boolean | "false" | "true") | undefined;
    "aria-autocomplete"?: "list" | "none" | "inline" | "both" | undefined;
    "aria-braillelabel"?: string | undefined;
    "aria-brailleroledescription"?: string | undefined;
    "aria-busy"?: (boolean | "false" | "true") | undefined;
    "aria-checked"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colindextext"?: string | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "date" | "time" | "location" | "step" | "page" | "false" | "true" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-description"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: (boolean | "false" | "true") | undefined;
    "aria-dropeffect"?: "copy" | "link" | "none" | "move" | "execute" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: (boolean | "false" | "true") | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: (boolean | "false" | "true") | undefined;
    "aria-haspopup"?: boolean | "menu" | "tree" | "grid" | "dialog" | "listbox" | "false" | "true" | undefined;
    "aria-hidden"?: (boolean | "false" | "true") | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: (boolean | "false" | "true") | undefined;
    "aria-multiline"?: (boolean | "false" | "true") | undefined;
    "aria-multiselectable"?: (boolean | "false" | "true") | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-readonly"?: (boolean | "false" | "true") | undefined;
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    "aria-required"?: (boolean | "false" | "true") | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowindextext"?: string | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: (boolean | "false" | "true") | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    } | undefined;
    onCopy?: react.ClipboardEventHandler<HTMLSelectElement> | undefined;
    onCopyCapture?: react.ClipboardEventHandler<HTMLSelectElement> | undefined;
    onCut?: react.ClipboardEventHandler<HTMLSelectElement> | undefined;
    onCutCapture?: react.ClipboardEventHandler<HTMLSelectElement> | undefined;
    onPaste?: react.ClipboardEventHandler<HTMLSelectElement> | undefined;
    onPasteCapture?: react.ClipboardEventHandler<HTMLSelectElement> | undefined;
    onCompositionEnd?: react.CompositionEventHandler<HTMLSelectElement> | undefined;
    onCompositionEndCapture?: react.CompositionEventHandler<HTMLSelectElement> | undefined;
    onCompositionStart?: react.CompositionEventHandler<HTMLSelectElement> | undefined;
    onCompositionStartCapture?: react.CompositionEventHandler<HTMLSelectElement> | undefined;
    onCompositionUpdate?: react.CompositionEventHandler<HTMLSelectElement> | undefined;
    onCompositionUpdateCapture?: react.CompositionEventHandler<HTMLSelectElement> | undefined;
    onFocus?: react.FocusEventHandler<HTMLSelectElement> | undefined;
    onFocusCapture?: react.FocusEventHandler<HTMLSelectElement> | undefined;
    onBlur?: react.FocusEventHandler<HTMLSelectElement> | undefined;
    onBlurCapture?: react.FocusEventHandler<HTMLSelectElement> | undefined;
    onChange?: react.FormEventHandler<HTMLSelectElement> | undefined;
    onChangeCapture?: react.FormEventHandler<HTMLSelectElement> | undefined;
    onBeforeInput?: react.FormEventHandler<HTMLSelectElement> | undefined;
    onBeforeInputCapture?: react.FormEventHandler<HTMLSelectElement> | undefined;
    onInput?: react.FormEventHandler<HTMLSelectElement> | undefined;
    onInputCapture?: react.FormEventHandler<HTMLSelectElement> | undefined;
    onReset?: react.FormEventHandler<HTMLSelectElement> | undefined;
    onResetCapture?: react.FormEventHandler<HTMLSelectElement> | undefined;
    onSubmit?: react.FormEventHandler<HTMLSelectElement> | undefined;
    onSubmitCapture?: react.FormEventHandler<HTMLSelectElement> | undefined;
    onInvalid?: react.FormEventHandler<HTMLSelectElement> | undefined;
    onInvalidCapture?: react.FormEventHandler<HTMLSelectElement> | undefined;
    onLoad?: react.ReactEventHandler<HTMLSelectElement> | undefined;
    onLoadCapture?: react.ReactEventHandler<HTMLSelectElement> | undefined;
    onError?: react.ReactEventHandler<HTMLSelectElement> | undefined;
    onErrorCapture?: react.ReactEventHandler<HTMLSelectElement> | undefined;
    onKeyDown?: react.KeyboardEventHandler<HTMLSelectElement> | undefined;
    onKeyDownCapture?: react.KeyboardEventHandler<HTMLSelectElement> | undefined;
    onKeyPress?: react.KeyboardEventHandler<HTMLSelectElement> | undefined;
    onKeyPressCapture?: react.KeyboardEventHandler<HTMLSelectElement> | undefined;
    onKeyUp?: react.KeyboardEventHandler<HTMLSelectElement> | undefined;
    onKeyUpCapture?: react.KeyboardEventHandler<HTMLSelectElement> | undefined;
    onAbort?: react.ReactEventHandler<HTMLSelectElement> | undefined;
    onAbortCapture?: react.ReactEventHandler<HTMLSelectElement> | undefined;
    onCanPlay?: react.ReactEventHandler<HTMLSelectElement> | undefined;
    onCanPlayCapture?: react.ReactEventHandler<HTMLSelectElement> | undefined;
    onCanPlayThrough?: react.ReactEventHandler<HTMLSelectElement> | undefined;
    onCanPlayThroughCapture?: react.ReactEventHandler<HTMLSelectElement> | undefined;
    onDurationChange?: react.ReactEventHandler<HTMLSelectElement> | undefined;
    onDurationChangeCapture?: react.ReactEventHandler<HTMLSelectElement> | undefined;
    onEmptied?: react.ReactEventHandler<HTMLSelectElement> | undefined;
    onEmptiedCapture?: react.ReactEventHandler<HTMLSelectElement> | undefined;
    onEncrypted?: react.ReactEventHandler<HTMLSelectElement> | undefined;
    onEncryptedCapture?: react.ReactEventHandler<HTMLSelectElement> | undefined;
    onEnded?: react.ReactEventHandler<HTMLSelectElement> | undefined;
    onEndedCapture?: react.ReactEventHandler<HTMLSelectElement> | undefined;
    onLoadedData?: react.ReactEventHandler<HTMLSelectElement> | undefined;
    onLoadedDataCapture?: react.ReactEventHandler<HTMLSelectElement> | undefined;
    onLoadedMetadata?: react.ReactEventHandler<HTMLSelectElement> | undefined;
    onLoadedMetadataCapture?: react.ReactEventHandler<HTMLSelectElement> | undefined;
    onLoadStart?: react.ReactEventHandler<HTMLSelectElement> | undefined;
    onLoadStartCapture?: react.ReactEventHandler<HTMLSelectElement> | undefined;
    onPause?: react.ReactEventHandler<HTMLSelectElement> | undefined;
    onPauseCapture?: react.ReactEventHandler<HTMLSelectElement> | undefined;
    onPlay?: react.ReactEventHandler<HTMLSelectElement> | undefined;
    onPlayCapture?: react.ReactEventHandler<HTMLSelectElement> | undefined;
    onPlaying?: react.ReactEventHandler<HTMLSelectElement> | undefined;
    onPlayingCapture?: react.ReactEventHandler<HTMLSelectElement> | undefined;
    onProgress?: react.ReactEventHandler<HTMLSelectElement> | undefined;
    onProgressCapture?: react.ReactEventHandler<HTMLSelectElement> | undefined;
    onRateChange?: react.ReactEventHandler<HTMLSelectElement> | undefined;
    onRateChangeCapture?: react.ReactEventHandler<HTMLSelectElement> | undefined;
    onResize?: react.ReactEventHandler<HTMLSelectElement> | undefined;
    onResizeCapture?: react.ReactEventHandler<HTMLSelectElement> | undefined;
    onSeeked?: react.ReactEventHandler<HTMLSelectElement> | undefined;
    onSeekedCapture?: react.ReactEventHandler<HTMLSelectElement> | undefined;
    onSeeking?: react.ReactEventHandler<HTMLSelectElement> | undefined;
    onSeekingCapture?: react.ReactEventHandler<HTMLSelectElement> | undefined;
    onStalled?: react.ReactEventHandler<HTMLSelectElement> | undefined;
    onStalledCapture?: react.ReactEventHandler<HTMLSelectElement> | undefined;
    onSuspend?: react.ReactEventHandler<HTMLSelectElement> | undefined;
    onSuspendCapture?: react.ReactEventHandler<HTMLSelectElement> | undefined;
    onTimeUpdate?: react.ReactEventHandler<HTMLSelectElement> | undefined;
    onTimeUpdateCapture?: react.ReactEventHandler<HTMLSelectElement> | undefined;
    onVolumeChange?: react.ReactEventHandler<HTMLSelectElement> | undefined;
    onVolumeChangeCapture?: react.ReactEventHandler<HTMLSelectElement> | undefined;
    onWaiting?: react.ReactEventHandler<HTMLSelectElement> | undefined;
    onWaitingCapture?: react.ReactEventHandler<HTMLSelectElement> | undefined;
    onAuxClick?: react.MouseEventHandler<HTMLSelectElement> | undefined;
    onAuxClickCapture?: react.MouseEventHandler<HTMLSelectElement> | undefined;
    onClick?: react.MouseEventHandler<HTMLSelectElement> | undefined;
    onClickCapture?: react.MouseEventHandler<HTMLSelectElement> | undefined;
    onContextMenu?: react.MouseEventHandler<HTMLSelectElement> | undefined;
    onContextMenuCapture?: react.MouseEventHandler<HTMLSelectElement> | undefined;
    onDoubleClick?: react.MouseEventHandler<HTMLSelectElement> | undefined;
    onDoubleClickCapture?: react.MouseEventHandler<HTMLSelectElement> | undefined;
    onDrag?: react.DragEventHandler<HTMLSelectElement> | undefined;
    onDragCapture?: react.DragEventHandler<HTMLSelectElement> | undefined;
    onDragEnd?: react.DragEventHandler<HTMLSelectElement> | undefined;
    onDragEndCapture?: react.DragEventHandler<HTMLSelectElement> | undefined;
    onDragEnter?: react.DragEventHandler<HTMLSelectElement> | undefined;
    onDragEnterCapture?: react.DragEventHandler<HTMLSelectElement> | undefined;
    onDragExit?: react.DragEventHandler<HTMLSelectElement> | undefined;
    onDragExitCapture?: react.DragEventHandler<HTMLSelectElement> | undefined;
    onDragLeave?: react.DragEventHandler<HTMLSelectElement> | undefined;
    onDragLeaveCapture?: react.DragEventHandler<HTMLSelectElement> | undefined;
    onDragOver?: react.DragEventHandler<HTMLSelectElement> | undefined;
    onDragOverCapture?: react.DragEventHandler<HTMLSelectElement> | undefined;
    onDragStart?: react.DragEventHandler<HTMLSelectElement> | undefined;
    onDragStartCapture?: react.DragEventHandler<HTMLSelectElement> | undefined;
    onDrop?: react.DragEventHandler<HTMLSelectElement> | undefined;
    onDropCapture?: react.DragEventHandler<HTMLSelectElement> | undefined;
    onMouseDown?: react.MouseEventHandler<HTMLSelectElement> | undefined;
    onMouseDownCapture?: react.MouseEventHandler<HTMLSelectElement> | undefined;
    onMouseEnter?: react.MouseEventHandler<HTMLSelectElement> | undefined;
    onMouseLeave?: react.MouseEventHandler<HTMLSelectElement> | undefined;
    onMouseMove?: react.MouseEventHandler<HTMLSelectElement> | undefined;
    onMouseMoveCapture?: react.MouseEventHandler<HTMLSelectElement> | undefined;
    onMouseOut?: react.MouseEventHandler<HTMLSelectElement> | undefined;
    onMouseOutCapture?: react.MouseEventHandler<HTMLSelectElement> | undefined;
    onMouseOver?: react.MouseEventHandler<HTMLSelectElement> | undefined;
    onMouseOverCapture?: react.MouseEventHandler<HTMLSelectElement> | undefined;
    onMouseUp?: react.MouseEventHandler<HTMLSelectElement> | undefined;
    onMouseUpCapture?: react.MouseEventHandler<HTMLSelectElement> | undefined;
    onSelect?: react.ReactEventHandler<HTMLSelectElement> | undefined;
    onSelectCapture?: react.ReactEventHandler<HTMLSelectElement> | undefined;
    onTouchCancel?: react.TouchEventHandler<HTMLSelectElement> | undefined;
    onTouchCancelCapture?: react.TouchEventHandler<HTMLSelectElement> | undefined;
    onTouchEnd?: react.TouchEventHandler<HTMLSelectElement> | undefined;
    onTouchEndCapture?: react.TouchEventHandler<HTMLSelectElement> | undefined;
    onTouchMove?: react.TouchEventHandler<HTMLSelectElement> | undefined;
    onTouchMoveCapture?: react.TouchEventHandler<HTMLSelectElement> | undefined;
    onTouchStart?: react.TouchEventHandler<HTMLSelectElement> | undefined;
    onTouchStartCapture?: react.TouchEventHandler<HTMLSelectElement> | undefined;
    onPointerDown?: react.PointerEventHandler<HTMLSelectElement> | undefined;
    onPointerDownCapture?: react.PointerEventHandler<HTMLSelectElement> | undefined;
    onPointerMove?: react.PointerEventHandler<HTMLSelectElement> | undefined;
    onPointerMoveCapture?: react.PointerEventHandler<HTMLSelectElement> | undefined;
    onPointerUp?: react.PointerEventHandler<HTMLSelectElement> | undefined;
    onPointerUpCapture?: react.PointerEventHandler<HTMLSelectElement> | undefined;
    onPointerCancel?: react.PointerEventHandler<HTMLSelectElement> | undefined;
    onPointerCancelCapture?: react.PointerEventHandler<HTMLSelectElement> | undefined;
    onPointerEnter?: react.PointerEventHandler<HTMLSelectElement> | undefined;
    onPointerLeave?: react.PointerEventHandler<HTMLSelectElement> | undefined;
    onPointerOver?: react.PointerEventHandler<HTMLSelectElement> | undefined;
    onPointerOverCapture?: react.PointerEventHandler<HTMLSelectElement> | undefined;
    onPointerOut?: react.PointerEventHandler<HTMLSelectElement> | undefined;
    onPointerOutCapture?: react.PointerEventHandler<HTMLSelectElement> | undefined;
    onGotPointerCapture?: react.PointerEventHandler<HTMLSelectElement> | undefined;
    onGotPointerCaptureCapture?: react.PointerEventHandler<HTMLSelectElement> | undefined;
    onLostPointerCapture?: react.PointerEventHandler<HTMLSelectElement> | undefined;
    onLostPointerCaptureCapture?: react.PointerEventHandler<HTMLSelectElement> | undefined;
    onScroll?: react.UIEventHandler<HTMLSelectElement> | undefined;
    onScrollCapture?: react.UIEventHandler<HTMLSelectElement> | undefined;
    onWheel?: react.WheelEventHandler<HTMLSelectElement> | undefined;
    onWheelCapture?: react.WheelEventHandler<HTMLSelectElement> | undefined;
    onAnimationStart?: react.AnimationEventHandler<HTMLSelectElement> | undefined;
    onAnimationStartCapture?: react.AnimationEventHandler<HTMLSelectElement> | undefined;
    onAnimationEnd?: react.AnimationEventHandler<HTMLSelectElement> | undefined;
    onAnimationEndCapture?: react.AnimationEventHandler<HTMLSelectElement> | undefined;
    onAnimationIteration?: react.AnimationEventHandler<HTMLSelectElement> | undefined;
    onAnimationIterationCapture?: react.AnimationEventHandler<HTMLSelectElement> | undefined;
    onTransitionEnd?: react.TransitionEventHandler<HTMLSelectElement> | undefined;
    onTransitionEndCapture?: react.TransitionEventHandler<HTMLSelectElement> | undefined;
} & react.RefAttributes<HTMLSelectElement>>;

interface SkeletonKnownProps extends StyledProps, WithChildrenOptional, WithLayout, WithMargin, WithRadius {
    /**
     *
     * The accent color of the animation
     * @default white
     */
    accent?: VariantWithTones;
    /**
     * The animation delay in seconds
     * @default 0
     */
    animationDelay?: number;
    /**
     * The animation duration in seconds
     * @default 1.2
     */
    animationDuration?: number;
    /**
     * The appear duration in seconds
     * The animation only happens when isLoaded changes to true
     * @default 0.4
     */
    appearDuration?: number;
    /**
     * The background color of the animation
     * @default gray.50
     */
    bg?: VariantWithTones;
    /**
     *  Take the width of its children
     *  @default false
     */
    fitContent?: boolean;
    /**
     * Render the children when isLoaded is true
     */
    isLoaded?: boolean;
}
type SkeletonProps = Simplify<OmitElementProps<HTMLDivElement, SkeletonKnownProps>>;

interface SpacerKnownProps extends StyledProps, WithBorder, WithChildren, WithFlexItem, WithLayout, WithMargin, WithPadding, WithRadius, WithShadow {
    /**
     * The spacer direction.
     * @default horizontal
     */
    direction?: Direction;
    /**
     * Distribution of the children in the spacer.
     * @default start
     */
    distribution?: 'start' | 'center' | 'end' | 'space-between' | 'space-around' | 'space-evenly';
    /**
     * The horizontal gap between the children.
     * @default sm
     */
    gap?: Spacing;
    /** The vertical gap between the children. */
    gapVertical?: Spacing;
    /**
     * Expand child width (Vertical only)
     * @default false
     */
    grow?: boolean;
    /**
     * The vertical alignment of the children.
     * @default center
     */
    verticalAlign?: 'center' | 'end' | 'start' | 'stretch';
    /**
     * Wrap the children if they don't fit in the container.
     * @default true
     */
    wrap?: boolean;
}
type SpacerProps = Simplify<OmitElementProps<HTMLDivElement, SpacerKnownProps>>;
/**
 * You can use a "data-flex" property on the children to grow or shrink to fit the space available.
 */
declare const Spacer: react.ForwardRefExoticComponent<{
    direction?: Direction | undefined;
    distribution?: "space-between" | "center" | "start" | "end" | "space-around" | "space-evenly" | undefined;
    gap?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    gapVertical?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    grow?: boolean | undefined;
    verticalAlign?: "center" | "start" | "end" | "stretch" | undefined;
    wrap?: boolean | undefined;
    as?: react.ElementType | undefined;
    theme?: Theme | undefined;
    border?: boolean | BorderItemSide | BorderItem | BorderItem[] | undefined;
    children: react.ReactNode;
    alignSelf?: csstype.Property.AlignSelf | undefined;
    basis?: csstype.Property.FlexBasis<0 | (string & {})> | undefined;
    fill?: boolean | Direction | undefined;
    flex?: boolean | {
        grow?: number | undefined;
        shrink?: number | undefined;
    } | "grow" | "shrink" | undefined;
    justifySelf?: csstype.Property.JustifySelf | undefined;
    order?: csstype.Property.Order | undefined;
    opacity?: number | csstype.Property.Opacity | undefined;
    overflow?: csstype.Property.Overflow | undefined;
    pointerEvents?: csstype.Property.PointerEvents | undefined;
    textAlign?: csstype.Property.TextAlign | undefined;
    transform?: csstype.Property.Transform | undefined;
    transformOrigin?: csstype.Property.TransformOrigin<0 | (string & {})> | undefined;
    transition?: csstype.Property.Transition<string & {}> | undefined;
    display?: csstype.Property.Display | undefined;
    height?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | undefined;
    maxHeight?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "none" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "-webkit-min-content" | "intrinsic" | undefined;
    maxWidth?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "none" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "-webkit-min-content" | "intrinsic" | undefined;
    minHeight?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "-webkit-min-content" | "intrinsic" | undefined;
    minWidth?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "-webkit-min-content" | "intrinsic" | "-webkit-fill-available" | "min-intrinsic" | undefined;
    width?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "intrinsic" | "min-intrinsic" | undefined;
    margin?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    mb?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    ml?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mr?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mt?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mx?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    my?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    padding?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    pb?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    pl?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    pr?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    pt?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    px?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    py?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    radius?: false | "sm" | "md" | "lg" | "xs" | "xl" | "xxs" | "round" | {
        bottom?: "sm" | "md" | "lg" | "xs" | "xl" | "xxs" | "round" | undefined;
        left?: "sm" | "md" | "lg" | "xs" | "xl" | "xxs" | "round" | undefined;
        right?: "sm" | "md" | "lg" | "xs" | "xl" | "xxs" | "round" | undefined;
        top?: "sm" | "md" | "lg" | "xs" | "xl" | "xxs" | "round" | undefined;
    } | undefined;
    shadow?: false | "low" | "mid" | "high" | undefined;
    list?: string | undefined;
    download?: any;
    key?: react.Key | null | undefined;
    style?: react.CSSProperties | undefined;
    name?: string | undefined;
    color?: string | undefined;
    hidden?: boolean | undefined;
    start?: number | undefined;
    content?: string | undefined;
    readOnly?: boolean | undefined;
    low?: number | undefined;
    high?: number | undefined;
    cite?: string | undefined;
    data?: string | undefined;
    form?: string | undefined;
    label?: string | undefined;
    slot?: string | undefined;
    span?: number | undefined;
    summary?: string | undefined;
    title?: string | undefined;
    pattern?: string | undefined;
    prefix?: string | undefined;
    type?: string | undefined;
    disabled?: boolean | undefined;
    value?: string | number | readonly string[] | undefined;
    accept?: string | undefined;
    acceptCharset?: string | undefined;
    action?: string | undefined;
    allowFullScreen?: boolean | undefined;
    allowTransparency?: boolean | undefined;
    alt?: string | undefined;
    async?: boolean | undefined;
    autoComplete?: string | undefined;
    autoPlay?: boolean | undefined;
    capture?: boolean | "user" | "environment" | undefined;
    cellPadding?: string | number | undefined;
    cellSpacing?: string | number | undefined;
    charSet?: string | undefined;
    challenge?: string | undefined;
    checked?: boolean | undefined;
    classID?: string | undefined;
    cols?: number | undefined;
    colSpan?: number | undefined;
    controls?: boolean | undefined;
    coords?: string | undefined;
    crossOrigin?: "" | "anonymous" | "use-credentials" | undefined;
    dateTime?: string | undefined;
    default?: boolean | undefined;
    defer?: boolean | undefined;
    encType?: string | undefined;
    formAction?: string | undefined;
    formEncType?: string | undefined;
    formMethod?: string | undefined;
    formNoValidate?: boolean | undefined;
    formTarget?: string | undefined;
    frameBorder?: string | number | undefined;
    headers?: string | undefined;
    href?: string | undefined;
    hrefLang?: string | undefined;
    htmlFor?: string | undefined;
    httpEquiv?: string | undefined;
    integrity?: string | undefined;
    keyParams?: string | undefined;
    keyType?: string | undefined;
    kind?: string | undefined;
    loop?: boolean | undefined;
    manifest?: string | undefined;
    marginHeight?: number | undefined;
    marginWidth?: number | undefined;
    max?: string | number | undefined;
    maxLength?: number | undefined;
    media?: string | undefined;
    mediaGroup?: string | undefined;
    method?: string | undefined;
    min?: string | number | undefined;
    minLength?: number | undefined;
    multiple?: boolean | undefined;
    muted?: boolean | undefined;
    noValidate?: boolean | undefined;
    open?: boolean | undefined;
    optimum?: number | undefined;
    placeholder?: string | undefined;
    playsInline?: boolean | undefined;
    poster?: string | undefined;
    preload?: string | undefined;
    required?: boolean | undefined;
    reversed?: boolean | undefined;
    rows?: number | undefined;
    rowSpan?: number | undefined;
    sandbox?: string | undefined;
    scope?: string | undefined;
    scoped?: boolean | undefined;
    scrolling?: string | undefined;
    seamless?: boolean | undefined;
    selected?: boolean | undefined;
    shape?: string | undefined;
    sizes?: string | undefined;
    src?: string | undefined;
    srcDoc?: string | undefined;
    srcLang?: string | undefined;
    srcSet?: string | undefined;
    step?: string | number | undefined;
    target?: string | undefined;
    useMap?: string | undefined;
    wmode?: string | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    autoFocus?: boolean | undefined;
    className?: string | undefined;
    contentEditable?: "inherit" | (boolean | "false" | "true") | "plaintext-only" | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "false" | "true") | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    nonce?: string | undefined;
    spellCheck?: (boolean | "false" | "true") | undefined;
    tabIndex?: number | undefined;
    translate?: "yes" | "no" | undefined;
    radioGroup?: string | undefined;
    role?: react.AriaRole | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    property?: string | undefined;
    rel?: string | undefined;
    resource?: string | undefined;
    rev?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "search" | "email" | "tel" | "text" | "none" | "url" | "numeric" | "decimal" | undefined;
    is?: string | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: (boolean | "false" | "true") | undefined;
    "aria-autocomplete"?: "list" | "none" | "inline" | "both" | undefined;
    "aria-braillelabel"?: string | undefined;
    "aria-brailleroledescription"?: string | undefined;
    "aria-busy"?: (boolean | "false" | "true") | undefined;
    "aria-checked"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colindextext"?: string | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "date" | "time" | "location" | "step" | "page" | "false" | "true" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-description"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: (boolean | "false" | "true") | undefined;
    "aria-dropeffect"?: "copy" | "link" | "none" | "move" | "execute" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: (boolean | "false" | "true") | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: (boolean | "false" | "true") | undefined;
    "aria-haspopup"?: boolean | "menu" | "tree" | "grid" | "dialog" | "listbox" | "false" | "true" | undefined;
    "aria-hidden"?: (boolean | "false" | "true") | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: (boolean | "false" | "true") | undefined;
    "aria-multiline"?: (boolean | "false" | "true") | undefined;
    "aria-multiselectable"?: (boolean | "false" | "true") | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-readonly"?: (boolean | "false" | "true") | undefined;
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    "aria-required"?: (boolean | "false" | "true") | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowindextext"?: string | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: (boolean | "false" | "true") | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    } | undefined;
    onCopy?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCopyCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCut?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCutCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onPaste?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onPasteCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCompositionEnd?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionEndCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionStart?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionStartCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionUpdate?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionUpdateCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onFocus?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onFocusCapture?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onBlur?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onBlurCapture?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onChange?: react.FormEventHandler<HTMLDivElement> | undefined;
    onChangeCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onBeforeInput?: react.FormEventHandler<HTMLDivElement> | undefined;
    onBeforeInputCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInput?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInputCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onReset?: react.FormEventHandler<HTMLDivElement> | undefined;
    onResetCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onSubmit?: react.FormEventHandler<HTMLDivElement> | undefined;
    onSubmitCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInvalid?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInvalidCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onLoad?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onError?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onErrorCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onKeyDown?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyDownCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyPress?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyPressCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyUp?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyUpCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onAbort?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onAbortCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlay?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayThrough?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayThroughCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onDurationChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onDurationChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEmptied?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEmptiedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEncrypted?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEncryptedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEnded?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEndedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedData?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedDataCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedMetadata?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedMetadataCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadStart?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadStartCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPause?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPauseCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlay?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlayCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlaying?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlayingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onProgress?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onProgressCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onRateChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onRateChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onResize?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onResizeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeeked?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeekedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeeking?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeekingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onStalled?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onStalledCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSuspend?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSuspendCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onTimeUpdate?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onTimeUpdateCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onVolumeChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onVolumeChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onWaiting?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onWaitingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onAuxClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onAuxClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onContextMenu?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onContextMenuCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onDoubleClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onDoubleClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onDrag?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnd?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEndCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnter?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnterCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragExit?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragExitCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragLeave?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragLeaveCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragOver?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragOverCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragStart?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragStartCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDrop?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDropCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onMouseDown?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseDownCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseEnter?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseLeave?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseMove?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseMoveCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOut?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOutCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOver?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOverCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseUp?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseUpCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onSelect?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSelectCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onTouchCancel?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchCancelCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchEnd?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchEndCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchMove?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchMoveCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchStart?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchStartCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onPointerDown?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerDownCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerMove?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerMoveCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerUp?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerUpCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerCancel?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerCancelCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerEnter?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerLeave?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOver?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOverCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOut?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOutCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onGotPointerCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onGotPointerCaptureCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onLostPointerCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onLostPointerCaptureCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onScroll?: react.UIEventHandler<HTMLDivElement> | undefined;
    onScrollCapture?: react.UIEventHandler<HTMLDivElement> | undefined;
    onWheel?: react.WheelEventHandler<HTMLDivElement> | undefined;
    onWheelCapture?: react.WheelEventHandler<HTMLDivElement> | undefined;
    onAnimationStart?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationStartCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationEnd?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationEndCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationIteration?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationIterationCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onTransitionEnd?: react.TransitionEventHandler<HTMLDivElement> | undefined;
    onTransitionEndCapture?: react.TransitionEventHandler<HTMLDivElement> | undefined;
} & react.RefAttributes<HTMLDivElement>>;

interface StatusIndicatorKnownProps extends StyledProps, WithMargin {
    /** Component color */
    color?: Variant | string;
    ratio?: number;
    size?: number;
    /** @default 100 */
    tone?: Tone;
}
type StatusIndicatorProps = Simplify<OmitElementProps<HTMLDivElement, StatusIndicatorKnownProps>>;
declare function StatusIndicator(props: StatusIndicatorProps): react_jsx_runtime.JSX.Element;
declare namespace StatusIndicator {
    var displayName: string;
}

interface TabKnownProps extends StyledProps, WithChildren, WithColors, WithDisabled {
    id: string;
    title: ReactNode;
}
type TabProps = Simplify<TabKnownProps>;
declare function Tab(props: TabProps): react_jsx_runtime.JSX.Element;
declare namespace Tab {
    var displayName: string;
}

interface TabsKnownProps extends StyledProps, WithAccent, WithChildren, WithMargin {
    defaultId?: string;
    /** @default vertical */
    direction?: Direction;
    /** @default false */
    disableActiveBorderRadius?: boolean;
    id?: string;
    loader?: ReactNode;
    maxHeight?: number | StandardLonghandProperties['maxHeight'];
    minHeight?: number | StandardLonghandProperties['minHeight'];
    noContent?: ReactNode;
    onClick?: (id: string) => void;
    style?: CSSProperties;
}
type TabsProps = Simplify<TabsKnownProps>;
declare function Tabs(props: TabsProps): react_jsx_runtime.JSX.Element | null;
declare namespace Tabs {
    var displayName: string;
}

interface TagKnownProps extends StyledProps, WithChildren, WithColors, WithMargin, WithTextOptions {
    /** @default primary.50 */
    bg?: VariantWithTones;
    iconAfter?: Icons;
    iconBefore?: Icons;
    invert?: boolean;
    onClickAfter?: (event: MouseEvent<HTMLButtonElement>) => void;
    onClickBefore?: (event: MouseEvent<HTMLButtonElement>) => void;
    style?: CSSProperties;
}
type TagProps = Simplify<TagKnownProps>;
declare const Tag: react.ForwardRefExoticComponent<{
    bg?: VariantWithTones | undefined;
    iconAfter?: "align-bottom" | "align-center" | "align-left" | "align-middle" | "align-right" | "align-top" | "apple-watch" | "arrange-back" | "arrange-front" | "attachment" | "backspace" | "band-aid" | "battery" | "battery-empty" | "battery-full" | "board" | "border-all" | "border-bottom" | "border-left" | "border-right" | "border-style-dashed" | "border-style-dotted" | "border-style-solid" | "border-top" | "bot" | "bowl" | "boy" | "briefcase" | "browse" | "browser" | "calculator" | "calendar-dates" | "calendar-due" | "calendar-next" | "calendar-today" | "calendar" | "calibrate" | "captions" | "card-clubs" | "card-diamonds" | "card-hearts" | "card-spades" | "carousel" | "cast" | "chart" | "clapper-board" | "clipboard" | "code" | "code-slash" | "collage" | "color-bucket" | "color-picker" | "community" | "components" | "compress-left" | "compress-right" | "compress-v" | "compress" | "controller" | "copy" | "corner-double-down-left" | "corner-double-down-right" | "corner-double-left-down" | "corner-double-left-up" | "corner-double-right-down" | "corner-double-right-up" | "corner-double-up-left" | "corner-double-up-right" | "corner-down-left" | "corner-down-right" | "corner-left-down" | "corner-left-up" | "corner-right-down" | "corner-right-up" | "corner-up-left" | "corner-up-right" | "credit-card" | "crop" | "dark-mode" | "desktop" | "details-less" | "details-more" | "dialpad" | "dice-1" | "dice-2" | "dice-3" | "dice-4" | "dice-5" | "dice-6" | "display-flex" | "display-fullwidth" | "display-grid" | "display-spacing" | "distribute-horizontal" | "distribute-vertical" | "dock-bottom" | "dock-left" | "dock-right" | "dock-window" | "drive" | "drop-invert" | "drop-opacity" | "drop" | "duplicate" | "edit-black-point" | "edit-contrast" | "edit-exposure" | "edit-fade" | "edit-flip-h" | "edit-flip-v" | "edit-highlight" | "edit-markup" | "edit-mask" | "edit-noise" | "edit-shadows" | "edit-straight" | "edit-unmask" | "enter" | "erase" | "euro" | "export" | "extension-add" | "extension-remove" | "extension" | "external" | "feed" | "file-add" | "file-document" | "file-remove" | "file" | "film" | "filters" | "folder-add" | "folder-remove" | "folder" | "font-height" | "font-spacing" | "format-center" | "format-color" | "format-heading" | "format-indent-decrease" | "format-indent-increase" | "format-italic" | "format-justify" | "format-left" | "format-line-height" | "format-right" | "format-separator" | "format-slash" | "format-text" | "format-underline" | "format-uppercase" | "games" | "gender-female" | "gender-male" | "girl" | "glass-alt" | "home-screen" | "image" | "import" | "inpicture" | "insert-after-o" | "insert-after-r" | "insert-after" | "insert-before-o" | "insert-before-r" | "insert-before" | "insights" | "internal" | "laptop" | "list-tree" | "list" | "lock-unlock" | "lock" | "log-off" | "loupe" | "magnet" | "mail-forward" | "mail-reply" | "maximize-alt" | "maximize" | "menu-boxed" | "menu-grid-o" | "menu-grid-r" | "menu-left-alt" | "menu-left" | "menu-motion" | "menu-right-alt" | "menu-right" | "menu" | "merge-horizontal" | "merge-vertical" | "mini-player" | "minimize-alt" | "minimize" | "moon" | "mouse" | "move-down" | "move-left" | "move-right" | "move-up" | "notifications" | "pacman" | "path-back" | "path-crop" | "path-divide" | "path-exclude" | "path-front" | "path-intersect" | "path-outline" | "path-trim" | "path-unite" | "performance" | "piano" | "pill" | "plug" | "pokemon" | "poll" | "printer" | "profile" | "pull-clear" | "push-chevron-down-o" | "circle" | "push-chevron-down-r" | "square" | "push-chevron-down" | "push-chevron-left-o" | "push-chevron-left-r" | "push-chevron-left" | "push-chevron-right-o" | "push-chevron-right-r" | "push-chevron-right" | "push-chevron-up-o" | "push-chevron-up-r" | "push-chevron-up" | "push-down" | "push-left" | "push-right" | "push-up" | "qr" | "quote-o" | "quote" | "radio-check" | "radio-checked" | "ratio" | "redo" | "remove-r" | "remove" | "rename" | "reorder" | "row-first" | "row-last" | "ruler" | "scan" | "screen-mirror" | "screen-wide" | "screen" | "scroll-h" | "scroll-v" | "search-found" | "search-loading" | "search" | "select-o" | "select-r" | "select" | "shopping-bag" | "shopping-cart" | "sidebar-open" | "sidebar-right" | "sidebar" | "signal" | "size" | "smartphone" | "smile-mouth-open" | "smile-neutral" | "smile-no-mouth" | "smile-none" | "smile-sad" | "smile-upside" | "smile" | "space-between-v" | "space-between" | "spinner-alt" | "spinner-two-alt" | "spinner-two" | "spinner" | "sun" | "swap-vertical" | "swap" | "tab" | "terrain" | "thermostat" | "today" | "toggle-off" | "toggle-on" | "toggle-square-off" | "toggle-square" | "toolbar-bottom" | "toolbar-left" | "toolbar-right" | "toolbar-top" | "toolbox" | "touchpad" | "track" | "transcript" | "trash-empty" | "trash" | "trending-down" | "trending" | "tv" | "ui-kit" | "umbrella" | "undo" | "usb" | "usb-c" | "view-cols" | "view-comfortable" | "view-day" | "view-grid" | "view-list" | "view-month" | "view-split" | "voicemail-o" | "voicemail-r" | "voicemail" | "work-alt" | "yinyang" | "zoom-in" | "zoom-out" | "accessibility" | "accessibility-circle" | "accessibility-o" | "airplane" | "airpods" | "alarm" | "album" | "anchor" | "angular" | "apple" | "approximately-equal" | "archive" | "arrow-bottom-left-o" | "arrow-bottom-left-r" | "arrow-bottom-left" | "arrow-bottom-right-o" | "arrow-bottom-right-r" | "arrow-bottom-right" | "arrow-down-o" | "arrow-down-r" | "arrow-down" | "arrows-exchange-alt-v" | "arrows-exchange-alt" | "arrows-exchange-v" | "arrows-exchange" | "arrows-expand-down-left" | "arrows-expand-down-right" | "arrows-expand-left" | "arrows-expand-right" | "arrows-expand-up-left" | "arrows-expand-up-right" | "arrows-h" | "arrows-h-alt" | "arrow-left-o" | "arrow-left-r" | "arrow-left" | "arrow-right-o" | "arrow-right-r" | "arrow-right" | "arrows-scroll-h" | "arrows-scroll-v" | "arrow-switch" | "arrow-switch-o" | "arrow-switch-r" | "arrow-top-left-o" | "arrow-top-left-r" | "arrow-top-left" | "arrow-top-right-o" | "arrow-top-right-r" | "arrow-top-right" | "arrow-up-o" | "arrow-up-r" | "arrow-up" | "arrows-v" | "arrows-v-alt" | "asterisk" | "asterisk-o" | "asterisk-r" | "atlassian" | "attribution" | "award" | "badge" | "bamboo" | "bell" | "bell-o" | "bell-slash" | "bitbucket" | "block-o" | "blocked" | "bluetooth" | "book" | "bookmark" | "bookmark-slash" | "bug" | "bullseye" | "bullseye-arrow" | "c-plus-plus" | "cache" | "camera" | "camera-alt" | "categories" | "check" | "check-circle" | "check-o" | "check-r" | "checklist" | "chevron-double-down-o" | "chevron-double-down-r" | "chevron-double-left-o" | "chevron-double-left-r" | "chevron-double-right-o" | "chevron-double-right-r" | "chevron-double-up-o" | "chevron-double-up-r" | "chevron-down-o" | "chevron-down-r" | "chevron-down" | "chevron-left-o" | "chevron-left-r" | "chevron-left" | "chevron-right-o" | "chevron-right-r" | "chevron-right" | "chevron-up-o" | "chevron-up-r" | "chevron-up" | "chevron-double-down" | "chevron-double-left" | "chevron-double-right" | "chevron-double-up" | "chip" | "circle-ci" | "circle-half" | "clock" | "close" | "close-circle" | "close-o" | "close-r" | "cloud" | "cloud-slash" | "code-climate" | "code-review" | "codepen" | "codesandbox" | "codescan" | "coffee" | "cog" | "command-key" | "command-palette" | "comment" | "comment-external" | "container" | "control-key" | "copyright" | "cross" | "crown" | "danger-circle" | "danger-o" | "database" | "diamond" | "digital-ocean" | "disc" | "discord" | "discussion" | "discussion-closed" | "discussion-duplicated" | "discussion-outdated" | "divide" | "download" | "draft" | "dribble" | "dropbox" | "eject" | "ellipsis" | "equal" | "expand" | "eye" | "eye-slash" | "facebook" | "figma" | "filter" | "flag" | "flame" | "flash" | "flash-circle" | "flash-o" | "focus" | "fold" | "fold-down" | "fold-up" | "format-bold" | "format-strikethrough" | "framer" | "ghost" | "gift" | "git" | "git-branch" | "git-commit" | "git-compare" | "git-fork" | "git-merge" | "git-pull-request" | "github" | "github-actions" | "github-copilot" | "gitlab" | "gitter" | "glass" | "glasses" | "globe" | "google" | "google-calendar" | "google-drive" | "google-meet" | "grabber" | "graph" | "greater-than" | "greater-than-or-equal" | "hash" | "headphone" | "heart" | "heart-o" | "help" | "hexagon" | "history" | "home" | "hourglass" | "inbox" | "infinity" | "info-circle" | "info-o" | "instagram" | "invision" | "iterations" | "javascript" | "jenkins" | "jest" | "jsfiddle" | "key" | "key-alt" | "keyboard" | "keyhole-circle" | "keyhole-o" | "kotlin" | "law" | "layout-grid" | "layout-grid-small" | "layout-list" | "layout-pin" | "leaf" | "less-than" | "less-than-or-equal" | "lightbulb" | "link" | "linkedin" | "live" | "live-photo" | "loadbar" | "loadbar-alt" | "loadbar-doc" | "loadbar-sound" | "location" | "log" | "loom" | "mail" | "mail-read" | "markdown" | "megaphone" | "mention" | "menu-close" | "menu-open" | "menu-round-circle" | "menu-round-o" | "message" | "message-circle" | "message-o" | "messenger" | "meta" | "meter" | "mic" | "mic-slash" | "microsoft" | "microsoft-teams" | "microsoft-windows" | "milestone" | "minus" | "minus-circle" | "minus-o" | "minus-r" | "money-sign" | "more" | "more-circle" | "more-o" | "more-r" | "more-vertical" | "more-vertical-circle" | "more-vertical-o" | "more-vertical-r" | "multi-select" | "music-note" | "music-note-alt" | "next" | "next-o" | "next-r" | "next.js" | "node.js" | "not-equal" | "note" | "notebook" | "npm" | "numbers" | "option-key" | "options" | "organization" | "package" | "paintbrush" | "paperclip" | "password" | "patreon" | "pause" | "pause-o" | "pause-r" | "paypal" | "pencil" | "percent" | "phone" | "phone-o" | "pi" | "pin" | "pin-slash" | "play" | "play-backwards" | "play-forwards" | "play-o" | "play-r" | "playlist" | "playlist-add" | "playlist-check" | "playlist-remove" | "playlist-search" | "plus" | "plus-circle" | "plus-minus" | "plus-minus-slash" | "plus-o" | "plus-r" | "podcast" | "previous" | "previous-o" | "previous-r" | "product-hunt" | "project" | "pulse" | "python" | "ram" | "react" | "record-o" | "redux" | "repeat" | "repo" | "report" | "return" | "roadmap" | "rocket" | "rocket-chat" | "rust" | "safe" | "send" | "send-alt" | "server" | "serverless" | "share" | "share-mobile" | "shield" | "shield-slash" | "shift-key" | "shortcuts" | "shuffle" | "side-by-side" | "sigma" | "sign-in" | "sign-out" | "single-select" | "skype" | "slack" | "sort" | "sort-asc" | "sort-desc" | "sparkle" | "sparkle-o" | "speaker" | "spotify" | "square-payments" | "square-root" | "stack" | "stacked" | "star" | "star-o" | "stop" | "stop-o" | "stop-r" | "stop-sign" | "stopwatch" | "storybook" | "student" | "style" | "svelte" | "swift" | "sync" | "sync-alt" | "tab-key" | "tag" | "tags" | "tasklist" | "template" | "terminal" | "thumbs-down" | "thumbs-up" | "tidal" | "timelapse" | "timer" | "times" | "tools" | "tools-alt" | "touch-id" | "travis-ci" | "tree" | "trello" | "triangle" | "trophy" | "tumblr" | "twilio" | "twitch" | "twitter" | "typescript" | "unavailable-o" | "unblock-o" | "unfold" | "unlink" | "unread" | "unverified" | "upload" | "user" | "user-add" | "user-remove" | "users" | "vector" | "vercel" | "verified" | "versions" | "video" | "video-camera" | "vimeo" | "vinyl" | "volume-high" | "volume-low" | "volume-mid" | "vscode" | "vue" | "wand" | "wave" | "webcam" | "webhook" | "website" | "webstorm" | "whatsapp" | "wheelchair" | "wi-fi" | "workflow" | "workplace" | "youtube" | "zap" | "zigzag" | "zoom" | undefined;
    iconBefore?: "align-bottom" | "align-center" | "align-left" | "align-middle" | "align-right" | "align-top" | "apple-watch" | "arrange-back" | "arrange-front" | "attachment" | "backspace" | "band-aid" | "battery" | "battery-empty" | "battery-full" | "board" | "border-all" | "border-bottom" | "border-left" | "border-right" | "border-style-dashed" | "border-style-dotted" | "border-style-solid" | "border-top" | "bot" | "bowl" | "boy" | "briefcase" | "browse" | "browser" | "calculator" | "calendar-dates" | "calendar-due" | "calendar-next" | "calendar-today" | "calendar" | "calibrate" | "captions" | "card-clubs" | "card-diamonds" | "card-hearts" | "card-spades" | "carousel" | "cast" | "chart" | "clapper-board" | "clipboard" | "code" | "code-slash" | "collage" | "color-bucket" | "color-picker" | "community" | "components" | "compress-left" | "compress-right" | "compress-v" | "compress" | "controller" | "copy" | "corner-double-down-left" | "corner-double-down-right" | "corner-double-left-down" | "corner-double-left-up" | "corner-double-right-down" | "corner-double-right-up" | "corner-double-up-left" | "corner-double-up-right" | "corner-down-left" | "corner-down-right" | "corner-left-down" | "corner-left-up" | "corner-right-down" | "corner-right-up" | "corner-up-left" | "corner-up-right" | "credit-card" | "crop" | "dark-mode" | "desktop" | "details-less" | "details-more" | "dialpad" | "dice-1" | "dice-2" | "dice-3" | "dice-4" | "dice-5" | "dice-6" | "display-flex" | "display-fullwidth" | "display-grid" | "display-spacing" | "distribute-horizontal" | "distribute-vertical" | "dock-bottom" | "dock-left" | "dock-right" | "dock-window" | "drive" | "drop-invert" | "drop-opacity" | "drop" | "duplicate" | "edit-black-point" | "edit-contrast" | "edit-exposure" | "edit-fade" | "edit-flip-h" | "edit-flip-v" | "edit-highlight" | "edit-markup" | "edit-mask" | "edit-noise" | "edit-shadows" | "edit-straight" | "edit-unmask" | "enter" | "erase" | "euro" | "export" | "extension-add" | "extension-remove" | "extension" | "external" | "feed" | "file-add" | "file-document" | "file-remove" | "file" | "film" | "filters" | "folder-add" | "folder-remove" | "folder" | "font-height" | "font-spacing" | "format-center" | "format-color" | "format-heading" | "format-indent-decrease" | "format-indent-increase" | "format-italic" | "format-justify" | "format-left" | "format-line-height" | "format-right" | "format-separator" | "format-slash" | "format-text" | "format-underline" | "format-uppercase" | "games" | "gender-female" | "gender-male" | "girl" | "glass-alt" | "home-screen" | "image" | "import" | "inpicture" | "insert-after-o" | "insert-after-r" | "insert-after" | "insert-before-o" | "insert-before-r" | "insert-before" | "insights" | "internal" | "laptop" | "list-tree" | "list" | "lock-unlock" | "lock" | "log-off" | "loupe" | "magnet" | "mail-forward" | "mail-reply" | "maximize-alt" | "maximize" | "menu-boxed" | "menu-grid-o" | "menu-grid-r" | "menu-left-alt" | "menu-left" | "menu-motion" | "menu-right-alt" | "menu-right" | "menu" | "merge-horizontal" | "merge-vertical" | "mini-player" | "minimize-alt" | "minimize" | "moon" | "mouse" | "move-down" | "move-left" | "move-right" | "move-up" | "notifications" | "pacman" | "path-back" | "path-crop" | "path-divide" | "path-exclude" | "path-front" | "path-intersect" | "path-outline" | "path-trim" | "path-unite" | "performance" | "piano" | "pill" | "plug" | "pokemon" | "poll" | "printer" | "profile" | "pull-clear" | "push-chevron-down-o" | "circle" | "push-chevron-down-r" | "square" | "push-chevron-down" | "push-chevron-left-o" | "push-chevron-left-r" | "push-chevron-left" | "push-chevron-right-o" | "push-chevron-right-r" | "push-chevron-right" | "push-chevron-up-o" | "push-chevron-up-r" | "push-chevron-up" | "push-down" | "push-left" | "push-right" | "push-up" | "qr" | "quote-o" | "quote" | "radio-check" | "radio-checked" | "ratio" | "redo" | "remove-r" | "remove" | "rename" | "reorder" | "row-first" | "row-last" | "ruler" | "scan" | "screen-mirror" | "screen-wide" | "screen" | "scroll-h" | "scroll-v" | "search-found" | "search-loading" | "search" | "select-o" | "select-r" | "select" | "shopping-bag" | "shopping-cart" | "sidebar-open" | "sidebar-right" | "sidebar" | "signal" | "size" | "smartphone" | "smile-mouth-open" | "smile-neutral" | "smile-no-mouth" | "smile-none" | "smile-sad" | "smile-upside" | "smile" | "space-between-v" | "space-between" | "spinner-alt" | "spinner-two-alt" | "spinner-two" | "spinner" | "sun" | "swap-vertical" | "swap" | "tab" | "terrain" | "thermostat" | "today" | "toggle-off" | "toggle-on" | "toggle-square-off" | "toggle-square" | "toolbar-bottom" | "toolbar-left" | "toolbar-right" | "toolbar-top" | "toolbox" | "touchpad" | "track" | "transcript" | "trash-empty" | "trash" | "trending-down" | "trending" | "tv" | "ui-kit" | "umbrella" | "undo" | "usb" | "usb-c" | "view-cols" | "view-comfortable" | "view-day" | "view-grid" | "view-list" | "view-month" | "view-split" | "voicemail-o" | "voicemail-r" | "voicemail" | "work-alt" | "yinyang" | "zoom-in" | "zoom-out" | "accessibility" | "accessibility-circle" | "accessibility-o" | "airplane" | "airpods" | "alarm" | "album" | "anchor" | "angular" | "apple" | "approximately-equal" | "archive" | "arrow-bottom-left-o" | "arrow-bottom-left-r" | "arrow-bottom-left" | "arrow-bottom-right-o" | "arrow-bottom-right-r" | "arrow-bottom-right" | "arrow-down-o" | "arrow-down-r" | "arrow-down" | "arrows-exchange-alt-v" | "arrows-exchange-alt" | "arrows-exchange-v" | "arrows-exchange" | "arrows-expand-down-left" | "arrows-expand-down-right" | "arrows-expand-left" | "arrows-expand-right" | "arrows-expand-up-left" | "arrows-expand-up-right" | "arrows-h" | "arrows-h-alt" | "arrow-left-o" | "arrow-left-r" | "arrow-left" | "arrow-right-o" | "arrow-right-r" | "arrow-right" | "arrows-scroll-h" | "arrows-scroll-v" | "arrow-switch" | "arrow-switch-o" | "arrow-switch-r" | "arrow-top-left-o" | "arrow-top-left-r" | "arrow-top-left" | "arrow-top-right-o" | "arrow-top-right-r" | "arrow-top-right" | "arrow-up-o" | "arrow-up-r" | "arrow-up" | "arrows-v" | "arrows-v-alt" | "asterisk" | "asterisk-o" | "asterisk-r" | "atlassian" | "attribution" | "award" | "badge" | "bamboo" | "bell" | "bell-o" | "bell-slash" | "bitbucket" | "block-o" | "blocked" | "bluetooth" | "book" | "bookmark" | "bookmark-slash" | "bug" | "bullseye" | "bullseye-arrow" | "c-plus-plus" | "cache" | "camera" | "camera-alt" | "categories" | "check" | "check-circle" | "check-o" | "check-r" | "checklist" | "chevron-double-down-o" | "chevron-double-down-r" | "chevron-double-left-o" | "chevron-double-left-r" | "chevron-double-right-o" | "chevron-double-right-r" | "chevron-double-up-o" | "chevron-double-up-r" | "chevron-down-o" | "chevron-down-r" | "chevron-down" | "chevron-left-o" | "chevron-left-r" | "chevron-left" | "chevron-right-o" | "chevron-right-r" | "chevron-right" | "chevron-up-o" | "chevron-up-r" | "chevron-up" | "chevron-double-down" | "chevron-double-left" | "chevron-double-right" | "chevron-double-up" | "chip" | "circle-ci" | "circle-half" | "clock" | "close" | "close-circle" | "close-o" | "close-r" | "cloud" | "cloud-slash" | "code-climate" | "code-review" | "codepen" | "codesandbox" | "codescan" | "coffee" | "cog" | "command-key" | "command-palette" | "comment" | "comment-external" | "container" | "control-key" | "copyright" | "cross" | "crown" | "danger-circle" | "danger-o" | "database" | "diamond" | "digital-ocean" | "disc" | "discord" | "discussion" | "discussion-closed" | "discussion-duplicated" | "discussion-outdated" | "divide" | "download" | "draft" | "dribble" | "dropbox" | "eject" | "ellipsis" | "equal" | "expand" | "eye" | "eye-slash" | "facebook" | "figma" | "filter" | "flag" | "flame" | "flash" | "flash-circle" | "flash-o" | "focus" | "fold" | "fold-down" | "fold-up" | "format-bold" | "format-strikethrough" | "framer" | "ghost" | "gift" | "git" | "git-branch" | "git-commit" | "git-compare" | "git-fork" | "git-merge" | "git-pull-request" | "github" | "github-actions" | "github-copilot" | "gitlab" | "gitter" | "glass" | "glasses" | "globe" | "google" | "google-calendar" | "google-drive" | "google-meet" | "grabber" | "graph" | "greater-than" | "greater-than-or-equal" | "hash" | "headphone" | "heart" | "heart-o" | "help" | "hexagon" | "history" | "home" | "hourglass" | "inbox" | "infinity" | "info-circle" | "info-o" | "instagram" | "invision" | "iterations" | "javascript" | "jenkins" | "jest" | "jsfiddle" | "key" | "key-alt" | "keyboard" | "keyhole-circle" | "keyhole-o" | "kotlin" | "law" | "layout-grid" | "layout-grid-small" | "layout-list" | "layout-pin" | "leaf" | "less-than" | "less-than-or-equal" | "lightbulb" | "link" | "linkedin" | "live" | "live-photo" | "loadbar" | "loadbar-alt" | "loadbar-doc" | "loadbar-sound" | "location" | "log" | "loom" | "mail" | "mail-read" | "markdown" | "megaphone" | "mention" | "menu-close" | "menu-open" | "menu-round-circle" | "menu-round-o" | "message" | "message-circle" | "message-o" | "messenger" | "meta" | "meter" | "mic" | "mic-slash" | "microsoft" | "microsoft-teams" | "microsoft-windows" | "milestone" | "minus" | "minus-circle" | "minus-o" | "minus-r" | "money-sign" | "more" | "more-circle" | "more-o" | "more-r" | "more-vertical" | "more-vertical-circle" | "more-vertical-o" | "more-vertical-r" | "multi-select" | "music-note" | "music-note-alt" | "next" | "next-o" | "next-r" | "next.js" | "node.js" | "not-equal" | "note" | "notebook" | "npm" | "numbers" | "option-key" | "options" | "organization" | "package" | "paintbrush" | "paperclip" | "password" | "patreon" | "pause" | "pause-o" | "pause-r" | "paypal" | "pencil" | "percent" | "phone" | "phone-o" | "pi" | "pin" | "pin-slash" | "play" | "play-backwards" | "play-forwards" | "play-o" | "play-r" | "playlist" | "playlist-add" | "playlist-check" | "playlist-remove" | "playlist-search" | "plus" | "plus-circle" | "plus-minus" | "plus-minus-slash" | "plus-o" | "plus-r" | "podcast" | "previous" | "previous-o" | "previous-r" | "product-hunt" | "project" | "pulse" | "python" | "ram" | "react" | "record-o" | "redux" | "repeat" | "repo" | "report" | "return" | "roadmap" | "rocket" | "rocket-chat" | "rust" | "safe" | "send" | "send-alt" | "server" | "serverless" | "share" | "share-mobile" | "shield" | "shield-slash" | "shift-key" | "shortcuts" | "shuffle" | "side-by-side" | "sigma" | "sign-in" | "sign-out" | "single-select" | "skype" | "slack" | "sort" | "sort-asc" | "sort-desc" | "sparkle" | "sparkle-o" | "speaker" | "spotify" | "square-payments" | "square-root" | "stack" | "stacked" | "star" | "star-o" | "stop" | "stop-o" | "stop-r" | "stop-sign" | "stopwatch" | "storybook" | "student" | "style" | "svelte" | "swift" | "sync" | "sync-alt" | "tab-key" | "tag" | "tags" | "tasklist" | "template" | "terminal" | "thumbs-down" | "thumbs-up" | "tidal" | "timelapse" | "timer" | "times" | "tools" | "tools-alt" | "touch-id" | "travis-ci" | "tree" | "trello" | "triangle" | "trophy" | "tumblr" | "twilio" | "twitch" | "twitter" | "typescript" | "unavailable-o" | "unblock-o" | "unfold" | "unlink" | "unread" | "unverified" | "upload" | "user" | "user-add" | "user-remove" | "users" | "vector" | "vercel" | "verified" | "versions" | "video" | "video-camera" | "vimeo" | "vinyl" | "volume-high" | "volume-low" | "volume-mid" | "vscode" | "vue" | "wand" | "wave" | "webcam" | "webhook" | "website" | "webstorm" | "whatsapp" | "wheelchair" | "wi-fi" | "workflow" | "workplace" | "youtube" | "zap" | "zigzag" | "zoom" | undefined;
    invert?: boolean | undefined;
    onClickAfter?: ((event: MouseEvent<HTMLButtonElement>) => void) | undefined;
    onClickBefore?: ((event: MouseEvent<HTMLButtonElement>) => void) | undefined;
    style?: CSSProperties | undefined;
    as?: react.ElementType | undefined;
    theme?: Theme | undefined;
    children: ReactNode;
    color?: VariantWithTones | undefined;
    margin?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    mb?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    ml?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mr?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mt?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mx?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    my?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    bold?: boolean | undefined;
    italic?: boolean | undefined;
    letterSpacing?: csstype.Property.LetterSpacing<0 | (string & {})> | undefined;
    lineHeight?: csstype.Property.LineHeight<0 | (string & {})> | undefined;
    textDecoration?: csstype.Property.TextDecoration<0 | (string & {})> | undefined;
    textTransform?: csstype.Property.TextTransform | undefined;
    wordSpacing?: csstype.Property.WordSpacing<0 | (string & {})> | undefined;
    size?: "sm" | "md" | "lg" | "xs" | undefined;
} & react.RefAttributes<HTMLSpanElement>>;

interface TextKnownProps extends StyledProps, WithChildren, Pick<WithColors, 'color'>, WithTextOptions {
}
type TextProps = Simplify<OmitElementProps<HTMLSpanElement, TextKnownProps>>;
declare const Text: react.ForwardRefExoticComponent<{
    as?: react.ElementType | undefined;
    theme?: Theme | undefined;
    children: react.ReactNode;
    color?: VariantWithTones | undefined;
    bold?: boolean | undefined;
    italic?: boolean | undefined;
    letterSpacing?: csstype.Property.LetterSpacing<0 | (string & {})> | undefined;
    lineHeight?: csstype.Property.LineHeight<0 | (string & {})> | undefined;
    textDecoration?: csstype.Property.TextDecoration<0 | (string & {})> | undefined;
    textTransform?: csstype.Property.TextTransform | undefined;
    wordSpacing?: csstype.Property.WordSpacing<0 | (string & {})> | undefined;
    size?: "sm" | "md" | "lg" | "xs" | undefined;
    list?: string | undefined;
    download?: any;
    key?: react.Key | null | undefined;
    style?: react.CSSProperties | undefined;
    name?: string | undefined;
    hidden?: boolean | undefined;
    start?: number | undefined;
    height?: string | number | undefined;
    width?: string | number | undefined;
    wrap?: string | undefined;
    content?: string | undefined;
    readOnly?: boolean | undefined;
    low?: number | undefined;
    high?: number | undefined;
    cite?: string | undefined;
    data?: string | undefined;
    form?: string | undefined;
    label?: string | undefined;
    slot?: string | undefined;
    span?: number | undefined;
    summary?: string | undefined;
    title?: string | undefined;
    pattern?: string | undefined;
    prefix?: string | undefined;
    type?: string | undefined;
    disabled?: boolean | undefined;
    value?: string | number | readonly string[] | undefined;
    accept?: string | undefined;
    acceptCharset?: string | undefined;
    action?: string | undefined;
    allowFullScreen?: boolean | undefined;
    allowTransparency?: boolean | undefined;
    alt?: string | undefined;
    async?: boolean | undefined;
    autoComplete?: string | undefined;
    autoPlay?: boolean | undefined;
    capture?: boolean | "user" | "environment" | undefined;
    cellPadding?: string | number | undefined;
    cellSpacing?: string | number | undefined;
    charSet?: string | undefined;
    challenge?: string | undefined;
    checked?: boolean | undefined;
    classID?: string | undefined;
    cols?: number | undefined;
    colSpan?: number | undefined;
    controls?: boolean | undefined;
    coords?: string | undefined;
    crossOrigin?: "" | "anonymous" | "use-credentials" | undefined;
    dateTime?: string | undefined;
    default?: boolean | undefined;
    defer?: boolean | undefined;
    encType?: string | undefined;
    formAction?: string | undefined;
    formEncType?: string | undefined;
    formMethod?: string | undefined;
    formNoValidate?: boolean | undefined;
    formTarget?: string | undefined;
    frameBorder?: string | number | undefined;
    headers?: string | undefined;
    href?: string | undefined;
    hrefLang?: string | undefined;
    htmlFor?: string | undefined;
    httpEquiv?: string | undefined;
    integrity?: string | undefined;
    keyParams?: string | undefined;
    keyType?: string | undefined;
    kind?: string | undefined;
    loop?: boolean | undefined;
    manifest?: string | undefined;
    marginHeight?: number | undefined;
    marginWidth?: number | undefined;
    max?: string | number | undefined;
    maxLength?: number | undefined;
    media?: string | undefined;
    mediaGroup?: string | undefined;
    method?: string | undefined;
    min?: string | number | undefined;
    minLength?: number | undefined;
    multiple?: boolean | undefined;
    muted?: boolean | undefined;
    noValidate?: boolean | undefined;
    open?: boolean | undefined;
    optimum?: number | undefined;
    placeholder?: string | undefined;
    playsInline?: boolean | undefined;
    poster?: string | undefined;
    preload?: string | undefined;
    required?: boolean | undefined;
    reversed?: boolean | undefined;
    rows?: number | undefined;
    rowSpan?: number | undefined;
    sandbox?: string | undefined;
    scope?: string | undefined;
    scoped?: boolean | undefined;
    scrolling?: string | undefined;
    seamless?: boolean | undefined;
    selected?: boolean | undefined;
    shape?: string | undefined;
    sizes?: string | undefined;
    src?: string | undefined;
    srcDoc?: string | undefined;
    srcLang?: string | undefined;
    srcSet?: string | undefined;
    step?: string | number | undefined;
    target?: string | undefined;
    useMap?: string | undefined;
    wmode?: string | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    autoFocus?: boolean | undefined;
    className?: string | undefined;
    contentEditable?: "inherit" | (boolean | "false" | "true") | "plaintext-only" | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "false" | "true") | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    nonce?: string | undefined;
    spellCheck?: (boolean | "false" | "true") | undefined;
    tabIndex?: number | undefined;
    translate?: "yes" | "no" | undefined;
    radioGroup?: string | undefined;
    role?: react.AriaRole | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    property?: string | undefined;
    rel?: string | undefined;
    resource?: string | undefined;
    rev?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "search" | "email" | "tel" | "text" | "none" | "url" | "numeric" | "decimal" | undefined;
    is?: string | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: (boolean | "false" | "true") | undefined;
    "aria-autocomplete"?: "list" | "none" | "inline" | "both" | undefined;
    "aria-braillelabel"?: string | undefined;
    "aria-brailleroledescription"?: string | undefined;
    "aria-busy"?: (boolean | "false" | "true") | undefined;
    "aria-checked"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colindextext"?: string | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "date" | "time" | "location" | "step" | "page" | "false" | "true" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-description"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: (boolean | "false" | "true") | undefined;
    "aria-dropeffect"?: "copy" | "link" | "none" | "move" | "execute" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: (boolean | "false" | "true") | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: (boolean | "false" | "true") | undefined;
    "aria-haspopup"?: boolean | "menu" | "tree" | "grid" | "dialog" | "listbox" | "false" | "true" | undefined;
    "aria-hidden"?: (boolean | "false" | "true") | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: (boolean | "false" | "true") | undefined;
    "aria-multiline"?: (boolean | "false" | "true") | undefined;
    "aria-multiselectable"?: (boolean | "false" | "true") | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-readonly"?: (boolean | "false" | "true") | undefined;
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    "aria-required"?: (boolean | "false" | "true") | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowindextext"?: string | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: (boolean | "false" | "true") | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    } | undefined;
    onCopy?: react.ClipboardEventHandler<HTMLSpanElement> | undefined;
    onCopyCapture?: react.ClipboardEventHandler<HTMLSpanElement> | undefined;
    onCut?: react.ClipboardEventHandler<HTMLSpanElement> | undefined;
    onCutCapture?: react.ClipboardEventHandler<HTMLSpanElement> | undefined;
    onPaste?: react.ClipboardEventHandler<HTMLSpanElement> | undefined;
    onPasteCapture?: react.ClipboardEventHandler<HTMLSpanElement> | undefined;
    onCompositionEnd?: react.CompositionEventHandler<HTMLSpanElement> | undefined;
    onCompositionEndCapture?: react.CompositionEventHandler<HTMLSpanElement> | undefined;
    onCompositionStart?: react.CompositionEventHandler<HTMLSpanElement> | undefined;
    onCompositionStartCapture?: react.CompositionEventHandler<HTMLSpanElement> | undefined;
    onCompositionUpdate?: react.CompositionEventHandler<HTMLSpanElement> | undefined;
    onCompositionUpdateCapture?: react.CompositionEventHandler<HTMLSpanElement> | undefined;
    onFocus?: react.FocusEventHandler<HTMLSpanElement> | undefined;
    onFocusCapture?: react.FocusEventHandler<HTMLSpanElement> | undefined;
    onBlur?: react.FocusEventHandler<HTMLSpanElement> | undefined;
    onBlurCapture?: react.FocusEventHandler<HTMLSpanElement> | undefined;
    onChange?: react.FormEventHandler<HTMLSpanElement> | undefined;
    onChangeCapture?: react.FormEventHandler<HTMLSpanElement> | undefined;
    onBeforeInput?: react.FormEventHandler<HTMLSpanElement> | undefined;
    onBeforeInputCapture?: react.FormEventHandler<HTMLSpanElement> | undefined;
    onInput?: react.FormEventHandler<HTMLSpanElement> | undefined;
    onInputCapture?: react.FormEventHandler<HTMLSpanElement> | undefined;
    onReset?: react.FormEventHandler<HTMLSpanElement> | undefined;
    onResetCapture?: react.FormEventHandler<HTMLSpanElement> | undefined;
    onSubmit?: react.FormEventHandler<HTMLSpanElement> | undefined;
    onSubmitCapture?: react.FormEventHandler<HTMLSpanElement> | undefined;
    onInvalid?: react.FormEventHandler<HTMLSpanElement> | undefined;
    onInvalidCapture?: react.FormEventHandler<HTMLSpanElement> | undefined;
    onLoad?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onLoadCapture?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onError?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onErrorCapture?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onKeyDown?: react.KeyboardEventHandler<HTMLSpanElement> | undefined;
    onKeyDownCapture?: react.KeyboardEventHandler<HTMLSpanElement> | undefined;
    onKeyPress?: react.KeyboardEventHandler<HTMLSpanElement> | undefined;
    onKeyPressCapture?: react.KeyboardEventHandler<HTMLSpanElement> | undefined;
    onKeyUp?: react.KeyboardEventHandler<HTMLSpanElement> | undefined;
    onKeyUpCapture?: react.KeyboardEventHandler<HTMLSpanElement> | undefined;
    onAbort?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onAbortCapture?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onCanPlay?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onCanPlayCapture?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onCanPlayThrough?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onCanPlayThroughCapture?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onDurationChange?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onDurationChangeCapture?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onEmptied?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onEmptiedCapture?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onEncrypted?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onEncryptedCapture?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onEnded?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onEndedCapture?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onLoadedData?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onLoadedDataCapture?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onLoadedMetadata?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onLoadedMetadataCapture?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onLoadStart?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onLoadStartCapture?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onPause?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onPauseCapture?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onPlay?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onPlayCapture?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onPlaying?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onPlayingCapture?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onProgress?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onProgressCapture?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onRateChange?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onRateChangeCapture?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onResize?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onResizeCapture?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onSeeked?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onSeekedCapture?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onSeeking?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onSeekingCapture?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onStalled?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onStalledCapture?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onSuspend?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onSuspendCapture?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onTimeUpdate?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onTimeUpdateCapture?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onVolumeChange?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onVolumeChangeCapture?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onWaiting?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onWaitingCapture?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onAuxClick?: react.MouseEventHandler<HTMLSpanElement> | undefined;
    onAuxClickCapture?: react.MouseEventHandler<HTMLSpanElement> | undefined;
    onClick?: react.MouseEventHandler<HTMLSpanElement> | undefined;
    onClickCapture?: react.MouseEventHandler<HTMLSpanElement> | undefined;
    onContextMenu?: react.MouseEventHandler<HTMLSpanElement> | undefined;
    onContextMenuCapture?: react.MouseEventHandler<HTMLSpanElement> | undefined;
    onDoubleClick?: react.MouseEventHandler<HTMLSpanElement> | undefined;
    onDoubleClickCapture?: react.MouseEventHandler<HTMLSpanElement> | undefined;
    onDrag?: react.DragEventHandler<HTMLSpanElement> | undefined;
    onDragCapture?: react.DragEventHandler<HTMLSpanElement> | undefined;
    onDragEnd?: react.DragEventHandler<HTMLSpanElement> | undefined;
    onDragEndCapture?: react.DragEventHandler<HTMLSpanElement> | undefined;
    onDragEnter?: react.DragEventHandler<HTMLSpanElement> | undefined;
    onDragEnterCapture?: react.DragEventHandler<HTMLSpanElement> | undefined;
    onDragExit?: react.DragEventHandler<HTMLSpanElement> | undefined;
    onDragExitCapture?: react.DragEventHandler<HTMLSpanElement> | undefined;
    onDragLeave?: react.DragEventHandler<HTMLSpanElement> | undefined;
    onDragLeaveCapture?: react.DragEventHandler<HTMLSpanElement> | undefined;
    onDragOver?: react.DragEventHandler<HTMLSpanElement> | undefined;
    onDragOverCapture?: react.DragEventHandler<HTMLSpanElement> | undefined;
    onDragStart?: react.DragEventHandler<HTMLSpanElement> | undefined;
    onDragStartCapture?: react.DragEventHandler<HTMLSpanElement> | undefined;
    onDrop?: react.DragEventHandler<HTMLSpanElement> | undefined;
    onDropCapture?: react.DragEventHandler<HTMLSpanElement> | undefined;
    onMouseDown?: react.MouseEventHandler<HTMLSpanElement> | undefined;
    onMouseDownCapture?: react.MouseEventHandler<HTMLSpanElement> | undefined;
    onMouseEnter?: react.MouseEventHandler<HTMLSpanElement> | undefined;
    onMouseLeave?: react.MouseEventHandler<HTMLSpanElement> | undefined;
    onMouseMove?: react.MouseEventHandler<HTMLSpanElement> | undefined;
    onMouseMoveCapture?: react.MouseEventHandler<HTMLSpanElement> | undefined;
    onMouseOut?: react.MouseEventHandler<HTMLSpanElement> | undefined;
    onMouseOutCapture?: react.MouseEventHandler<HTMLSpanElement> | undefined;
    onMouseOver?: react.MouseEventHandler<HTMLSpanElement> | undefined;
    onMouseOverCapture?: react.MouseEventHandler<HTMLSpanElement> | undefined;
    onMouseUp?: react.MouseEventHandler<HTMLSpanElement> | undefined;
    onMouseUpCapture?: react.MouseEventHandler<HTMLSpanElement> | undefined;
    onSelect?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onSelectCapture?: react.ReactEventHandler<HTMLSpanElement> | undefined;
    onTouchCancel?: react.TouchEventHandler<HTMLSpanElement> | undefined;
    onTouchCancelCapture?: react.TouchEventHandler<HTMLSpanElement> | undefined;
    onTouchEnd?: react.TouchEventHandler<HTMLSpanElement> | undefined;
    onTouchEndCapture?: react.TouchEventHandler<HTMLSpanElement> | undefined;
    onTouchMove?: react.TouchEventHandler<HTMLSpanElement> | undefined;
    onTouchMoveCapture?: react.TouchEventHandler<HTMLSpanElement> | undefined;
    onTouchStart?: react.TouchEventHandler<HTMLSpanElement> | undefined;
    onTouchStartCapture?: react.TouchEventHandler<HTMLSpanElement> | undefined;
    onPointerDown?: react.PointerEventHandler<HTMLSpanElement> | undefined;
    onPointerDownCapture?: react.PointerEventHandler<HTMLSpanElement> | undefined;
    onPointerMove?: react.PointerEventHandler<HTMLSpanElement> | undefined;
    onPointerMoveCapture?: react.PointerEventHandler<HTMLSpanElement> | undefined;
    onPointerUp?: react.PointerEventHandler<HTMLSpanElement> | undefined;
    onPointerUpCapture?: react.PointerEventHandler<HTMLSpanElement> | undefined;
    onPointerCancel?: react.PointerEventHandler<HTMLSpanElement> | undefined;
    onPointerCancelCapture?: react.PointerEventHandler<HTMLSpanElement> | undefined;
    onPointerEnter?: react.PointerEventHandler<HTMLSpanElement> | undefined;
    onPointerLeave?: react.PointerEventHandler<HTMLSpanElement> | undefined;
    onPointerOver?: react.PointerEventHandler<HTMLSpanElement> | undefined;
    onPointerOverCapture?: react.PointerEventHandler<HTMLSpanElement> | undefined;
    onPointerOut?: react.PointerEventHandler<HTMLSpanElement> | undefined;
    onPointerOutCapture?: react.PointerEventHandler<HTMLSpanElement> | undefined;
    onGotPointerCapture?: react.PointerEventHandler<HTMLSpanElement> | undefined;
    onGotPointerCaptureCapture?: react.PointerEventHandler<HTMLSpanElement> | undefined;
    onLostPointerCapture?: react.PointerEventHandler<HTMLSpanElement> | undefined;
    onLostPointerCaptureCapture?: react.PointerEventHandler<HTMLSpanElement> | undefined;
    onScroll?: react.UIEventHandler<HTMLSpanElement> | undefined;
    onScrollCapture?: react.UIEventHandler<HTMLSpanElement> | undefined;
    onWheel?: react.WheelEventHandler<HTMLSpanElement> | undefined;
    onWheelCapture?: react.WheelEventHandler<HTMLSpanElement> | undefined;
    onAnimationStart?: react.AnimationEventHandler<HTMLSpanElement> | undefined;
    onAnimationStartCapture?: react.AnimationEventHandler<HTMLSpanElement> | undefined;
    onAnimationEnd?: react.AnimationEventHandler<HTMLSpanElement> | undefined;
    onAnimationEndCapture?: react.AnimationEventHandler<HTMLSpanElement> | undefined;
    onAnimationIteration?: react.AnimationEventHandler<HTMLSpanElement> | undefined;
    onAnimationIterationCapture?: react.AnimationEventHandler<HTMLSpanElement> | undefined;
    onTransitionEnd?: react.TransitionEventHandler<HTMLSpanElement> | undefined;
    onTransitionEndCapture?: react.TransitionEventHandler<HTMLSpanElement> | undefined;
} & react.RefAttributes<HTMLSpanElement>>;

interface TextareaKnownProps extends StyledProps, WithAccent, WithBorderless, WithElementSpacing, WithFormElements {
}
type TextareaProps = Simplify<OmitElementProps<HTMLTextAreaElement, TextareaKnownProps, 'name'>>;
declare const Textarea: react.ForwardRefExoticComponent<{
    as?: react.ElementType | undefined;
    theme?: Theme | undefined;
    accent?: VariantWithTones | undefined;
    borderless?: boolean | undefined;
    prefixSpacing?: boolean | _gilbarbara_types.StringOrNumber | undefined;
    suffixSpacing?: boolean | _gilbarbara_types.StringOrNumber | undefined;
    name: string;
    readOnly?: boolean | undefined;
    width?: _gilbarbara_types.StringOrNumber | undefined;
    disabled?: boolean | undefined;
    list?: string | undefined;
    download?: any;
    key?: react.Key | null | undefined;
    style?: react.CSSProperties | undefined;
    color?: string | undefined;
    hidden?: boolean | undefined;
    start?: number | undefined;
    height?: string | number | undefined;
    wrap?: string | undefined;
    content?: string | undefined;
    low?: number | undefined;
    high?: number | undefined;
    cite?: string | undefined;
    data?: string | undefined;
    form?: string | undefined;
    label?: string | undefined;
    slot?: string | undefined;
    span?: number | undefined;
    summary?: string | undefined;
    title?: string | undefined;
    pattern?: string | undefined;
    prefix?: string | undefined;
    type?: string | undefined;
    value?: string | number | readonly string[] | undefined;
    accept?: string | undefined;
    acceptCharset?: string | undefined;
    action?: string | undefined;
    allowFullScreen?: boolean | undefined;
    allowTransparency?: boolean | undefined;
    alt?: string | undefined;
    async?: boolean | undefined;
    autoComplete?: string | undefined;
    autoPlay?: boolean | undefined;
    capture?: boolean | "user" | "environment" | undefined;
    cellPadding?: string | number | undefined;
    cellSpacing?: string | number | undefined;
    charSet?: string | undefined;
    challenge?: string | undefined;
    checked?: boolean | undefined;
    classID?: string | undefined;
    cols?: number | undefined;
    colSpan?: number | undefined;
    controls?: boolean | undefined;
    coords?: string | undefined;
    crossOrigin?: "" | "anonymous" | "use-credentials" | undefined;
    dateTime?: string | undefined;
    default?: boolean | undefined;
    defer?: boolean | undefined;
    encType?: string | undefined;
    formAction?: string | undefined;
    formEncType?: string | undefined;
    formMethod?: string | undefined;
    formNoValidate?: boolean | undefined;
    formTarget?: string | undefined;
    frameBorder?: string | number | undefined;
    headers?: string | undefined;
    href?: string | undefined;
    hrefLang?: string | undefined;
    htmlFor?: string | undefined;
    httpEquiv?: string | undefined;
    integrity?: string | undefined;
    keyParams?: string | undefined;
    keyType?: string | undefined;
    kind?: string | undefined;
    loop?: boolean | undefined;
    manifest?: string | undefined;
    marginHeight?: number | undefined;
    marginWidth?: number | undefined;
    max?: string | number | undefined;
    maxLength?: number | undefined;
    media?: string | undefined;
    mediaGroup?: string | undefined;
    method?: string | undefined;
    min?: string | number | undefined;
    minLength?: number | undefined;
    multiple?: boolean | undefined;
    muted?: boolean | undefined;
    noValidate?: boolean | undefined;
    open?: boolean | undefined;
    optimum?: number | undefined;
    placeholder?: string | undefined;
    playsInline?: boolean | undefined;
    poster?: string | undefined;
    preload?: string | undefined;
    required?: boolean | undefined;
    reversed?: boolean | undefined;
    rows?: number | undefined;
    rowSpan?: number | undefined;
    sandbox?: string | undefined;
    scope?: string | undefined;
    scoped?: boolean | undefined;
    scrolling?: string | undefined;
    seamless?: boolean | undefined;
    selected?: boolean | undefined;
    shape?: string | undefined;
    sizes?: string | undefined;
    src?: string | undefined;
    srcDoc?: string | undefined;
    srcLang?: string | undefined;
    srcSet?: string | undefined;
    step?: string | number | undefined;
    target?: string | undefined;
    useMap?: string | undefined;
    wmode?: string | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    autoFocus?: boolean | undefined;
    className?: string | undefined;
    contentEditable?: "inherit" | (boolean | "false" | "true") | "plaintext-only" | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "false" | "true") | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    nonce?: string | undefined;
    spellCheck?: (boolean | "false" | "true") | undefined;
    tabIndex?: number | undefined;
    translate?: "yes" | "no" | undefined;
    radioGroup?: string | undefined;
    role?: react.AriaRole | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    property?: string | undefined;
    rel?: string | undefined;
    resource?: string | undefined;
    rev?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "search" | "email" | "tel" | "text" | "none" | "url" | "numeric" | "decimal" | undefined;
    is?: string | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: (boolean | "false" | "true") | undefined;
    "aria-autocomplete"?: "list" | "none" | "inline" | "both" | undefined;
    "aria-braillelabel"?: string | undefined;
    "aria-brailleroledescription"?: string | undefined;
    "aria-busy"?: (boolean | "false" | "true") | undefined;
    "aria-checked"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colindextext"?: string | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "date" | "time" | "location" | "step" | "page" | "false" | "true" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-description"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: (boolean | "false" | "true") | undefined;
    "aria-dropeffect"?: "copy" | "link" | "none" | "move" | "execute" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: (boolean | "false" | "true") | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: (boolean | "false" | "true") | undefined;
    "aria-haspopup"?: boolean | "menu" | "tree" | "grid" | "dialog" | "listbox" | "false" | "true" | undefined;
    "aria-hidden"?: (boolean | "false" | "true") | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: (boolean | "false" | "true") | undefined;
    "aria-multiline"?: (boolean | "false" | "true") | undefined;
    "aria-multiselectable"?: (boolean | "false" | "true") | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-readonly"?: (boolean | "false" | "true") | undefined;
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    "aria-required"?: (boolean | "false" | "true") | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowindextext"?: string | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: (boolean | "false" | "true") | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    children?: react.ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    } | undefined;
    onCopy?: react.ClipboardEventHandler<HTMLTextAreaElement> | undefined;
    onCopyCapture?: react.ClipboardEventHandler<HTMLTextAreaElement> | undefined;
    onCut?: react.ClipboardEventHandler<HTMLTextAreaElement> | undefined;
    onCutCapture?: react.ClipboardEventHandler<HTMLTextAreaElement> | undefined;
    onPaste?: react.ClipboardEventHandler<HTMLTextAreaElement> | undefined;
    onPasteCapture?: react.ClipboardEventHandler<HTMLTextAreaElement> | undefined;
    onCompositionEnd?: react.CompositionEventHandler<HTMLTextAreaElement> | undefined;
    onCompositionEndCapture?: react.CompositionEventHandler<HTMLTextAreaElement> | undefined;
    onCompositionStart?: react.CompositionEventHandler<HTMLTextAreaElement> | undefined;
    onCompositionStartCapture?: react.CompositionEventHandler<HTMLTextAreaElement> | undefined;
    onCompositionUpdate?: react.CompositionEventHandler<HTMLTextAreaElement> | undefined;
    onCompositionUpdateCapture?: react.CompositionEventHandler<HTMLTextAreaElement> | undefined;
    onFocus?: react.FocusEventHandler<HTMLTextAreaElement> | undefined;
    onFocusCapture?: react.FocusEventHandler<HTMLTextAreaElement> | undefined;
    onBlur?: react.FocusEventHandler<HTMLTextAreaElement> | undefined;
    onBlurCapture?: react.FocusEventHandler<HTMLTextAreaElement> | undefined;
    onChange?: react.FormEventHandler<HTMLTextAreaElement> | undefined;
    onChangeCapture?: react.FormEventHandler<HTMLTextAreaElement> | undefined;
    onBeforeInput?: react.FormEventHandler<HTMLTextAreaElement> | undefined;
    onBeforeInputCapture?: react.FormEventHandler<HTMLTextAreaElement> | undefined;
    onInput?: react.FormEventHandler<HTMLTextAreaElement> | undefined;
    onInputCapture?: react.FormEventHandler<HTMLTextAreaElement> | undefined;
    onReset?: react.FormEventHandler<HTMLTextAreaElement> | undefined;
    onResetCapture?: react.FormEventHandler<HTMLTextAreaElement> | undefined;
    onSubmit?: react.FormEventHandler<HTMLTextAreaElement> | undefined;
    onSubmitCapture?: react.FormEventHandler<HTMLTextAreaElement> | undefined;
    onInvalid?: react.FormEventHandler<HTMLTextAreaElement> | undefined;
    onInvalidCapture?: react.FormEventHandler<HTMLTextAreaElement> | undefined;
    onLoad?: react.ReactEventHandler<HTMLTextAreaElement> | undefined;
    onLoadCapture?: react.ReactEventHandler<HTMLTextAreaElement> | undefined;
    onError?: react.ReactEventHandler<HTMLTextAreaElement> | undefined;
    onErrorCapture?: react.ReactEventHandler<HTMLTextAreaElement> | undefined;
    onKeyDown?: react.KeyboardEventHandler<HTMLTextAreaElement> | undefined;
    onKeyDownCapture?: react.KeyboardEventHandler<HTMLTextAreaElement> | undefined;
    onKeyPress?: react.KeyboardEventHandler<HTMLTextAreaElement> | undefined;
    onKeyPressCapture?: react.KeyboardEventHandler<HTMLTextAreaElement> | undefined;
    onKeyUp?: react.KeyboardEventHandler<HTMLTextAreaElement> | undefined;
    onKeyUpCapture?: react.KeyboardEventHandler<HTMLTextAreaElement> | undefined;
    onAbort?: react.ReactEventHandler<HTMLTextAreaElement> | undefined;
    onAbortCapture?: react.ReactEventHandler<HTMLTextAreaElement> | undefined;
    onCanPlay?: react.ReactEventHandler<HTMLTextAreaElement> | undefined;
    onCanPlayCapture?: react.ReactEventHandler<HTMLTextAreaElement> | undefined;
    onCanPlayThrough?: react.ReactEventHandler<HTMLTextAreaElement> | undefined;
    onCanPlayThroughCapture?: react.ReactEventHandler<HTMLTextAreaElement> | undefined;
    onDurationChange?: react.ReactEventHandler<HTMLTextAreaElement> | undefined;
    onDurationChangeCapture?: react.ReactEventHandler<HTMLTextAreaElement> | undefined;
    onEmptied?: react.ReactEventHandler<HTMLTextAreaElement> | undefined;
    onEmptiedCapture?: react.ReactEventHandler<HTMLTextAreaElement> | undefined;
    onEncrypted?: react.ReactEventHandler<HTMLTextAreaElement> | undefined;
    onEncryptedCapture?: react.ReactEventHandler<HTMLTextAreaElement> | undefined;
    onEnded?: react.ReactEventHandler<HTMLTextAreaElement> | undefined;
    onEndedCapture?: react.ReactEventHandler<HTMLTextAreaElement> | undefined;
    onLoadedData?: react.ReactEventHandler<HTMLTextAreaElement> | undefined;
    onLoadedDataCapture?: react.ReactEventHandler<HTMLTextAreaElement> | undefined;
    onLoadedMetadata?: react.ReactEventHandler<HTMLTextAreaElement> | undefined;
    onLoadedMetadataCapture?: react.ReactEventHandler<HTMLTextAreaElement> | undefined;
    onLoadStart?: react.ReactEventHandler<HTMLTextAreaElement> | undefined;
    onLoadStartCapture?: react.ReactEventHandler<HTMLTextAreaElement> | undefined;
    onPause?: react.ReactEventHandler<HTMLTextAreaElement> | undefined;
    onPauseCapture?: react.ReactEventHandler<HTMLTextAreaElement> | undefined;
    onPlay?: react.ReactEventHandler<HTMLTextAreaElement> | undefined;
    onPlayCapture?: react.ReactEventHandler<HTMLTextAreaElement> | undefined;
    onPlaying?: react.ReactEventHandler<HTMLTextAreaElement> | undefined;
    onPlayingCapture?: react.ReactEventHandler<HTMLTextAreaElement> | undefined;
    onProgress?: react.ReactEventHandler<HTMLTextAreaElement> | undefined;
    onProgressCapture?: react.ReactEventHandler<HTMLTextAreaElement> | undefined;
    onRateChange?: react.ReactEventHandler<HTMLTextAreaElement> | undefined;
    onRateChangeCapture?: react.ReactEventHandler<HTMLTextAreaElement> | undefined;
    onResize?: react.ReactEventHandler<HTMLTextAreaElement> | undefined;
    onResizeCapture?: react.ReactEventHandler<HTMLTextAreaElement> | undefined;
    onSeeked?: react.ReactEventHandler<HTMLTextAreaElement> | undefined;
    onSeekedCapture?: react.ReactEventHandler<HTMLTextAreaElement> | undefined;
    onSeeking?: react.ReactEventHandler<HTMLTextAreaElement> | undefined;
    onSeekingCapture?: react.ReactEventHandler<HTMLTextAreaElement> | undefined;
    onStalled?: react.ReactEventHandler<HTMLTextAreaElement> | undefined;
    onStalledCapture?: react.ReactEventHandler<HTMLTextAreaElement> | undefined;
    onSuspend?: react.ReactEventHandler<HTMLTextAreaElement> | undefined;
    onSuspendCapture?: react.ReactEventHandler<HTMLTextAreaElement> | undefined;
    onTimeUpdate?: react.ReactEventHandler<HTMLTextAreaElement> | undefined;
    onTimeUpdateCapture?: react.ReactEventHandler<HTMLTextAreaElement> | undefined;
    onVolumeChange?: react.ReactEventHandler<HTMLTextAreaElement> | undefined;
    onVolumeChangeCapture?: react.ReactEventHandler<HTMLTextAreaElement> | undefined;
    onWaiting?: react.ReactEventHandler<HTMLTextAreaElement> | undefined;
    onWaitingCapture?: react.ReactEventHandler<HTMLTextAreaElement> | undefined;
    onAuxClick?: react.MouseEventHandler<HTMLTextAreaElement> | undefined;
    onAuxClickCapture?: react.MouseEventHandler<HTMLTextAreaElement> | undefined;
    onClick?: react.MouseEventHandler<HTMLTextAreaElement> | undefined;
    onClickCapture?: react.MouseEventHandler<HTMLTextAreaElement> | undefined;
    onContextMenu?: react.MouseEventHandler<HTMLTextAreaElement> | undefined;
    onContextMenuCapture?: react.MouseEventHandler<HTMLTextAreaElement> | undefined;
    onDoubleClick?: react.MouseEventHandler<HTMLTextAreaElement> | undefined;
    onDoubleClickCapture?: react.MouseEventHandler<HTMLTextAreaElement> | undefined;
    onDrag?: react.DragEventHandler<HTMLTextAreaElement> | undefined;
    onDragCapture?: react.DragEventHandler<HTMLTextAreaElement> | undefined;
    onDragEnd?: react.DragEventHandler<HTMLTextAreaElement> | undefined;
    onDragEndCapture?: react.DragEventHandler<HTMLTextAreaElement> | undefined;
    onDragEnter?: react.DragEventHandler<HTMLTextAreaElement> | undefined;
    onDragEnterCapture?: react.DragEventHandler<HTMLTextAreaElement> | undefined;
    onDragExit?: react.DragEventHandler<HTMLTextAreaElement> | undefined;
    onDragExitCapture?: react.DragEventHandler<HTMLTextAreaElement> | undefined;
    onDragLeave?: react.DragEventHandler<HTMLTextAreaElement> | undefined;
    onDragLeaveCapture?: react.DragEventHandler<HTMLTextAreaElement> | undefined;
    onDragOver?: react.DragEventHandler<HTMLTextAreaElement> | undefined;
    onDragOverCapture?: react.DragEventHandler<HTMLTextAreaElement> | undefined;
    onDragStart?: react.DragEventHandler<HTMLTextAreaElement> | undefined;
    onDragStartCapture?: react.DragEventHandler<HTMLTextAreaElement> | undefined;
    onDrop?: react.DragEventHandler<HTMLTextAreaElement> | undefined;
    onDropCapture?: react.DragEventHandler<HTMLTextAreaElement> | undefined;
    onMouseDown?: react.MouseEventHandler<HTMLTextAreaElement> | undefined;
    onMouseDownCapture?: react.MouseEventHandler<HTMLTextAreaElement> | undefined;
    onMouseEnter?: react.MouseEventHandler<HTMLTextAreaElement> | undefined;
    onMouseLeave?: react.MouseEventHandler<HTMLTextAreaElement> | undefined;
    onMouseMove?: react.MouseEventHandler<HTMLTextAreaElement> | undefined;
    onMouseMoveCapture?: react.MouseEventHandler<HTMLTextAreaElement> | undefined;
    onMouseOut?: react.MouseEventHandler<HTMLTextAreaElement> | undefined;
    onMouseOutCapture?: react.MouseEventHandler<HTMLTextAreaElement> | undefined;
    onMouseOver?: react.MouseEventHandler<HTMLTextAreaElement> | undefined;
    onMouseOverCapture?: react.MouseEventHandler<HTMLTextAreaElement> | undefined;
    onMouseUp?: react.MouseEventHandler<HTMLTextAreaElement> | undefined;
    onMouseUpCapture?: react.MouseEventHandler<HTMLTextAreaElement> | undefined;
    onSelect?: react.ReactEventHandler<HTMLTextAreaElement> | undefined;
    onSelectCapture?: react.ReactEventHandler<HTMLTextAreaElement> | undefined;
    onTouchCancel?: react.TouchEventHandler<HTMLTextAreaElement> | undefined;
    onTouchCancelCapture?: react.TouchEventHandler<HTMLTextAreaElement> | undefined;
    onTouchEnd?: react.TouchEventHandler<HTMLTextAreaElement> | undefined;
    onTouchEndCapture?: react.TouchEventHandler<HTMLTextAreaElement> | undefined;
    onTouchMove?: react.TouchEventHandler<HTMLTextAreaElement> | undefined;
    onTouchMoveCapture?: react.TouchEventHandler<HTMLTextAreaElement> | undefined;
    onTouchStart?: react.TouchEventHandler<HTMLTextAreaElement> | undefined;
    onTouchStartCapture?: react.TouchEventHandler<HTMLTextAreaElement> | undefined;
    onPointerDown?: react.PointerEventHandler<HTMLTextAreaElement> | undefined;
    onPointerDownCapture?: react.PointerEventHandler<HTMLTextAreaElement> | undefined;
    onPointerMove?: react.PointerEventHandler<HTMLTextAreaElement> | undefined;
    onPointerMoveCapture?: react.PointerEventHandler<HTMLTextAreaElement> | undefined;
    onPointerUp?: react.PointerEventHandler<HTMLTextAreaElement> | undefined;
    onPointerUpCapture?: react.PointerEventHandler<HTMLTextAreaElement> | undefined;
    onPointerCancel?: react.PointerEventHandler<HTMLTextAreaElement> | undefined;
    onPointerCancelCapture?: react.PointerEventHandler<HTMLTextAreaElement> | undefined;
    onPointerEnter?: react.PointerEventHandler<HTMLTextAreaElement> | undefined;
    onPointerLeave?: react.PointerEventHandler<HTMLTextAreaElement> | undefined;
    onPointerOver?: react.PointerEventHandler<HTMLTextAreaElement> | undefined;
    onPointerOverCapture?: react.PointerEventHandler<HTMLTextAreaElement> | undefined;
    onPointerOut?: react.PointerEventHandler<HTMLTextAreaElement> | undefined;
    onPointerOutCapture?: react.PointerEventHandler<HTMLTextAreaElement> | undefined;
    onGotPointerCapture?: react.PointerEventHandler<HTMLTextAreaElement> | undefined;
    onGotPointerCaptureCapture?: react.PointerEventHandler<HTMLTextAreaElement> | undefined;
    onLostPointerCapture?: react.PointerEventHandler<HTMLTextAreaElement> | undefined;
    onLostPointerCaptureCapture?: react.PointerEventHandler<HTMLTextAreaElement> | undefined;
    onScroll?: react.UIEventHandler<HTMLTextAreaElement> | undefined;
    onScrollCapture?: react.UIEventHandler<HTMLTextAreaElement> | undefined;
    onWheel?: react.WheelEventHandler<HTMLTextAreaElement> | undefined;
    onWheelCapture?: react.WheelEventHandler<HTMLTextAreaElement> | undefined;
    onAnimationStart?: react.AnimationEventHandler<HTMLTextAreaElement> | undefined;
    onAnimationStartCapture?: react.AnimationEventHandler<HTMLTextAreaElement> | undefined;
    onAnimationEnd?: react.AnimationEventHandler<HTMLTextAreaElement> | undefined;
    onAnimationEndCapture?: react.AnimationEventHandler<HTMLTextAreaElement> | undefined;
    onAnimationIteration?: react.AnimationEventHandler<HTMLTextAreaElement> | undefined;
    onAnimationIterationCapture?: react.AnimationEventHandler<HTMLTextAreaElement> | undefined;
    onTransitionEnd?: react.TransitionEventHandler<HTMLTextAreaElement> | undefined;
    onTransitionEndCapture?: react.TransitionEventHandler<HTMLTextAreaElement> | undefined;
} & react.RefAttributes<HTMLTextAreaElement>>;

interface ToggleKnownProps extends StyledProps, WithAccent, WithComponentSize, WithDisabled {
    /** Status (controlled mode) */
    checked?: boolean;
    /**
     * Initial status (uncontrolled mode)
     * @default false
     */
    defaultChecked?: boolean;
    label?: ReactNode;
    labelOptions?: Simplify<WithTextOptions>;
    name?: string;
    /**
     * Callback when the status changes (uncontrolled mode)
     */
    onChange?: (value: boolean) => void;
    /**
     * Callback when clicking/key down the toggle
     */
    onToggle?: (value: boolean) => void;
}
type ToggleProps = Simplify<OmitElementProps<HTMLDivElement, ToggleKnownProps>>;
declare const Toggle: react.ForwardRefExoticComponent<{
    checked?: boolean | undefined;
    defaultChecked?: boolean | undefined;
    label?: ReactNode;
    labelOptions?: {
        bold?: boolean | undefined;
        italic?: boolean | undefined;
        letterSpacing?: csstype.Property.LetterSpacing<0 | (string & {})> | undefined;
        lineHeight?: csstype.Property.LineHeight<0 | (string & {})> | undefined;
        textDecoration?: csstype.Property.TextDecoration<0 | (string & {})> | undefined;
        textTransform?: csstype.Property.TextTransform | undefined;
        wordSpacing?: csstype.Property.WordSpacing<0 | (string & {})> | undefined;
        size?: "sm" | "md" | "lg" | "xs" | undefined;
    } | undefined;
    name?: string | undefined;
    onChange?: ((value: boolean) => void) | undefined;
    onToggle?: ((value: boolean) => void) | undefined;
    as?: react.ElementType | undefined;
    theme?: Theme | undefined;
    accent?: VariantWithTones | undefined;
    size?: "sm" | "md" | "lg" | undefined;
    disabled?: boolean | undefined;
    list?: string | undefined;
    download?: any;
    key?: react.Key | null | undefined;
    style?: react.CSSProperties | undefined;
    color?: string | undefined;
    hidden?: boolean | undefined;
    start?: number | undefined;
    height?: string | number | undefined;
    width?: string | number | undefined;
    wrap?: string | undefined;
    content?: string | undefined;
    readOnly?: boolean | undefined;
    low?: number | undefined;
    high?: number | undefined;
    cite?: string | undefined;
    data?: string | undefined;
    form?: string | undefined;
    slot?: string | undefined;
    span?: number | undefined;
    summary?: string | undefined;
    title?: string | undefined;
    pattern?: string | undefined;
    prefix?: string | undefined;
    type?: string | undefined;
    value?: string | number | readonly string[] | undefined;
    accept?: string | undefined;
    acceptCharset?: string | undefined;
    action?: string | undefined;
    allowFullScreen?: boolean | undefined;
    allowTransparency?: boolean | undefined;
    alt?: string | undefined;
    async?: boolean | undefined;
    autoComplete?: string | undefined;
    autoPlay?: boolean | undefined;
    capture?: boolean | "user" | "environment" | undefined;
    cellPadding?: string | number | undefined;
    cellSpacing?: string | number | undefined;
    charSet?: string | undefined;
    challenge?: string | undefined;
    classID?: string | undefined;
    cols?: number | undefined;
    colSpan?: number | undefined;
    controls?: boolean | undefined;
    coords?: string | undefined;
    crossOrigin?: "" | "anonymous" | "use-credentials" | undefined;
    dateTime?: string | undefined;
    default?: boolean | undefined;
    defer?: boolean | undefined;
    encType?: string | undefined;
    formAction?: string | undefined;
    formEncType?: string | undefined;
    formMethod?: string | undefined;
    formNoValidate?: boolean | undefined;
    formTarget?: string | undefined;
    frameBorder?: string | number | undefined;
    headers?: string | undefined;
    href?: string | undefined;
    hrefLang?: string | undefined;
    htmlFor?: string | undefined;
    httpEquiv?: string | undefined;
    integrity?: string | undefined;
    keyParams?: string | undefined;
    keyType?: string | undefined;
    kind?: string | undefined;
    loop?: boolean | undefined;
    manifest?: string | undefined;
    marginHeight?: number | undefined;
    marginWidth?: number | undefined;
    max?: string | number | undefined;
    maxLength?: number | undefined;
    media?: string | undefined;
    mediaGroup?: string | undefined;
    method?: string | undefined;
    min?: string | number | undefined;
    minLength?: number | undefined;
    multiple?: boolean | undefined;
    muted?: boolean | undefined;
    noValidate?: boolean | undefined;
    open?: boolean | undefined;
    optimum?: number | undefined;
    placeholder?: string | undefined;
    playsInline?: boolean | undefined;
    poster?: string | undefined;
    preload?: string | undefined;
    required?: boolean | undefined;
    reversed?: boolean | undefined;
    rows?: number | undefined;
    rowSpan?: number | undefined;
    sandbox?: string | undefined;
    scope?: string | undefined;
    scoped?: boolean | undefined;
    scrolling?: string | undefined;
    seamless?: boolean | undefined;
    selected?: boolean | undefined;
    shape?: string | undefined;
    sizes?: string | undefined;
    src?: string | undefined;
    srcDoc?: string | undefined;
    srcLang?: string | undefined;
    srcSet?: string | undefined;
    step?: string | number | undefined;
    target?: string | undefined;
    useMap?: string | undefined;
    wmode?: string | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    autoFocus?: boolean | undefined;
    className?: string | undefined;
    contentEditable?: "inherit" | (boolean | "false" | "true") | "plaintext-only" | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "false" | "true") | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    nonce?: string | undefined;
    spellCheck?: (boolean | "false" | "true") | undefined;
    tabIndex?: number | undefined;
    translate?: "yes" | "no" | undefined;
    radioGroup?: string | undefined;
    role?: react.AriaRole | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    property?: string | undefined;
    rel?: string | undefined;
    resource?: string | undefined;
    rev?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "search" | "email" | "tel" | "text" | "none" | "url" | "numeric" | "decimal" | undefined;
    is?: string | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: (boolean | "false" | "true") | undefined;
    "aria-autocomplete"?: "list" | "none" | "inline" | "both" | undefined;
    "aria-braillelabel"?: string | undefined;
    "aria-brailleroledescription"?: string | undefined;
    "aria-busy"?: (boolean | "false" | "true") | undefined;
    "aria-checked"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colindextext"?: string | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "date" | "time" | "location" | "step" | "page" | "false" | "true" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-description"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: (boolean | "false" | "true") | undefined;
    "aria-dropeffect"?: "copy" | "link" | "none" | "move" | "execute" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: (boolean | "false" | "true") | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: (boolean | "false" | "true") | undefined;
    "aria-haspopup"?: boolean | "menu" | "tree" | "grid" | "dialog" | "listbox" | "false" | "true" | undefined;
    "aria-hidden"?: (boolean | "false" | "true") | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: (boolean | "false" | "true") | undefined;
    "aria-multiline"?: (boolean | "false" | "true") | undefined;
    "aria-multiselectable"?: (boolean | "false" | "true") | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-readonly"?: (boolean | "false" | "true") | undefined;
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    "aria-required"?: (boolean | "false" | "true") | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowindextext"?: string | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: (boolean | "false" | "true") | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    children?: ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    } | undefined;
    onCopy?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCopyCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCut?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCutCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onPaste?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onPasteCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCompositionEnd?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionEndCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionStart?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionStartCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionUpdate?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionUpdateCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onFocus?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onFocusCapture?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onBlur?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onBlurCapture?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onChangeCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onBeforeInput?: react.FormEventHandler<HTMLDivElement> | undefined;
    onBeforeInputCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInput?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInputCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onReset?: react.FormEventHandler<HTMLDivElement> | undefined;
    onResetCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onSubmit?: react.FormEventHandler<HTMLDivElement> | undefined;
    onSubmitCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInvalid?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInvalidCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onLoad?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onError?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onErrorCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onKeyDown?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyDownCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyPress?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyPressCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyUp?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyUpCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onAbort?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onAbortCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlay?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayThrough?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayThroughCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onDurationChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onDurationChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEmptied?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEmptiedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEncrypted?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEncryptedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEnded?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEndedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedData?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedDataCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedMetadata?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedMetadataCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadStart?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadStartCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPause?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPauseCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlay?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlayCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlaying?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlayingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onProgress?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onProgressCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onRateChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onRateChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onResize?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onResizeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeeked?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeekedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeeking?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeekingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onStalled?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onStalledCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSuspend?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSuspendCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onTimeUpdate?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onTimeUpdateCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onVolumeChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onVolumeChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onWaiting?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onWaitingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onAuxClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onAuxClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onContextMenu?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onContextMenuCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onDoubleClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onDoubleClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onDrag?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnd?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEndCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnter?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnterCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragExit?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragExitCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragLeave?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragLeaveCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragOver?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragOverCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragStart?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragStartCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDrop?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDropCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onMouseDown?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseDownCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseEnter?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseLeave?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseMove?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseMoveCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOut?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOutCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOver?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOverCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseUp?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseUpCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onSelect?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSelectCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onTouchCancel?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchCancelCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchEnd?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchEndCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchMove?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchMoveCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchStart?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchStartCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onPointerDown?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerDownCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerMove?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerMoveCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerUp?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerUpCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerCancel?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerCancelCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerEnter?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerLeave?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOver?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOverCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOut?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOutCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onGotPointerCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onGotPointerCaptureCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onLostPointerCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onLostPointerCaptureCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onScroll?: react.UIEventHandler<HTMLDivElement> | undefined;
    onScrollCapture?: react.UIEventHandler<HTMLDivElement> | undefined;
    onWheel?: react.WheelEventHandler<HTMLDivElement> | undefined;
    onWheelCapture?: react.WheelEventHandler<HTMLDivElement> | undefined;
    onAnimationStart?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationStartCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationEnd?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationEndCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationIteration?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationIterationCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onTransitionEnd?: react.TransitionEventHandler<HTMLDivElement> | undefined;
    onTransitionEndCapture?: react.TransitionEventHandler<HTMLDivElement> | undefined;
} & react.RefAttributes<HTMLInputElement>>;

interface SharedProps {
    /**
     * The placement of the tooltip.
     * @default bottom-middle
     */
    placement: Placement;
    /**
     * Optional title for the tooltip.
     */
    title?: string;
    /** Content wrapping */
    wrap?: Sizes;
    /** @default 100 */
    zIndex?: number;
}
interface AnimationProps {
    /**
     * The delay before the tooltip is shown in milliseconds.
     * @default 180
     */
    delay: number;
    /**
     * The duration of the animation in milliseconds.
     * @default 260
     */
    duration: number;
    /**
     * The easing function.
     * @default ease-in-out
     */
    easing: string;
}
interface ArrowProps {
    /**
     * The distance between the arrow and the target.
     * @default 4
     */
    arrowDistance: number;
    /** @default 8 */
    arrowLength: number;
    /**
     * The margin for the arrow with start/end alignment.
     * @default 4 */
    arrowMargin: number;
}
interface TooltipKnownProps extends Partial<SharedProps>, Partial<AnimationProps>, Partial<ArrowProps>, WithChildren, WithColors, WithDisabled, WithOpen, WithRadius, WithShadow, WithTextOptions {
    /**
     * Optional aria label for the tooltip.
     * @default innerText of the content
     */
    ariaLabel?: string;
    content: ReactNode;
    /**
     * Trigger type.
     * @default hover
     */
    eventType?: 'click' | 'hover';
    style?: CSSProperties;
}
type TooltipProps = Simplify<TooltipKnownProps>;
declare function Tooltip(props: TooltipProps): react_jsx_runtime.JSX.Element;
declare namespace Tooltip {
    var displayName: string;
}

interface TruncateKnownProps extends StyledProps, WithChildren {
    /** @default 2 */
    lines?: number;
    maxWidth?: StringOrNumber;
}
type TruncateProps = Simplify<TruncateKnownProps>;
declare function Truncate(props: TruncateProps): react_jsx_runtime.JSX.Element;
declare namespace Truncate {
    var displayName: string;
}

type props_AlertProps = AlertProps;
type props_AnchorProps = AnchorProps;
type props_AspectRatioProps = AspectRatioProps;
type props_AvatarProps = AvatarProps;
type props_BoxProps<T = HTMLDivElement> = BoxProps<T>;
type props_ButtonGroupProps = ButtonGroupProps;
type props_ButtonProps = ButtonProps;
type props_ButtonSplitProps = ButtonSplitProps;
type props_ButtonUnstyledProps = ButtonUnstyledProps;
type props_CheckboxProps = CheckboxProps;
type props_ClickOutsideProps = ClickOutsideProps;
type props_CollapseProps = CollapseProps;
type props_ComponentWrapperProps = ComponentWrapperProps;
type props_ContainerProps = ContainerProps;
type props_CopyToClipboardProps = CopyToClipboardProps;
type props_DataTableBodyProps = DataTableBodyProps;
type props_DataTableColumn<T = string> = DataTableColumn<T>;
type props_DataTableHeadProps = DataTableHeadProps;
type props_DataTableProps<T extends string = string> = DataTableProps<T>;
type props_DataTableRow<T extends string> = DataTableRow<T>;
type props_DatePickerRangeProps = DatePickerRangeProps;
type props_DatePickerSelectorProps = DatePickerSelectorProps;
type props_DatePickerSingleProps = DatePickerSingleProps;
type props_DialogProps = DialogProps;
type props_DividerProps = DividerProps;
type props_DropdownProps = DropdownProps;
type props_EmojiProps = EmojiProps;
type props_FieldProps = FieldProps;
type props_FormGroupProps = FormGroupProps;
type props_FormProps<T extends FieldValues> = FormProps<T>;
type props_FormRenderProps<T extends FieldValues = FieldValues> = FormRenderProps<T>;
type props_GridProps = GridProps;
type props_HeadingLargeProps = HeadingLargeProps;
type props_HeadingProps = HeadingProps;
type props_IconProps = IconProps;
type props_InputColorProps = InputColorProps;
type props_InputFileProps = InputFileProps;
type props_InputProps = InputProps;
type props_LabelProps = LabelProps;
type props_ListProps = ListProps;
type props_LoaderProps = LoaderProps;
type props_MenuProps = MenuProps;
type props_ModalProps = ModalProps;
type props_NonIdealStateProps = NonIdealStateProps;
type props_PageProps = PageProps;
type props_PaginationProps = PaginationProps;
type props_ParagraphProps = ParagraphProps;
type props_PortalProps = PortalProps;
type props_ProgressBarProps = ProgressBarProps;
type props_QuoteProps = QuoteProps;
type props_RadioGroupProps = RadioGroupProps;
type props_RadioProps = RadioProps;
type props_SearchProps = SearchProps;
type props_SelectProps = SelectProps;
type props_SkeletonProps = SkeletonProps;
type props_SpacerProps = SpacerProps;
type props_StatusIndicatorProps = StatusIndicatorProps;
type props_TabProps = TabProps;
type props_TabsProps = TabsProps;
type props_TagProps = TagProps;
type props_TextProps = TextProps;
type props_TextareaProps = TextareaProps;
type props_ToggleProps = ToggleProps;
type props_TooltipProps = TooltipProps;
type props_TruncateProps = TruncateProps;
declare namespace props {
  export { type props_AlertProps as AlertProps, type props_AnchorProps as AnchorProps, type props_AspectRatioProps as AspectRatioProps, type props_AvatarProps as AvatarProps, type props_BoxProps as BoxProps, type props_ButtonGroupProps as ButtonGroupProps, type props_ButtonProps as ButtonProps, type props_ButtonSplitProps as ButtonSplitProps, type props_ButtonUnstyledProps as ButtonUnstyledProps, type props_CheckboxProps as CheckboxProps, type props_ClickOutsideProps as ClickOutsideProps, type props_CollapseProps as CollapseProps, type props_ComponentWrapperProps as ComponentWrapperProps, type props_ContainerProps as ContainerProps, type props_CopyToClipboardProps as CopyToClipboardProps, type props_DataTableBodyProps as DataTableBodyProps, type props_DataTableColumn as DataTableColumn, type props_DataTableHeadProps as DataTableHeadProps, type props_DataTableProps as DataTableProps, type props_DataTableRow as DataTableRow, type props_DatePickerRangeProps as DatePickerRangeProps, type props_DatePickerSelectorProps as DatePickerSelectorProps, type props_DatePickerSingleProps as DatePickerSingleProps, type props_DialogProps as DialogProps, type props_DividerProps as DividerProps, type props_DropdownProps as DropdownProps, type props_EmojiProps as EmojiProps, type props_FieldProps as FieldProps, type props_FormGroupProps as FormGroupProps, type props_FormProps as FormProps, type props_FormRenderProps as FormRenderProps, SubmitHandler as FormSubmitHandler, type props_GridProps as GridProps, type props_HeadingLargeProps as HeadingLargeProps, type props_HeadingProps as HeadingProps, type props_IconProps as IconProps, type props_InputColorProps as InputColorProps, type props_InputFileProps as InputFileProps, type props_InputProps as InputProps, type props_LabelProps as LabelProps, type props_ListProps as ListProps, type props_LoaderProps as LoaderProps, type props_MenuProps as MenuProps, type props_ModalProps as ModalProps, type props_NonIdealStateProps as NonIdealStateProps, type props_PageProps as PageProps, type props_PaginationProps as PaginationProps, type props_ParagraphProps as ParagraphProps, type props_PortalProps as PortalProps, type props_ProgressBarProps as ProgressBarProps, type props_QuoteProps as QuoteProps, type props_RadioGroupProps as RadioGroupProps, type props_RadioProps as RadioProps, type props_SearchProps as SearchProps, type props_SelectProps as SelectProps, type props_SkeletonProps as SkeletonProps, type props_SpacerProps as SpacerProps, type props_StatusIndicatorProps as StatusIndicatorProps, type props_TabProps as TabProps, type props_TabsProps as TabsProps, type props_TagProps as TagProps, type props_TextProps as TextProps, type props_TextareaProps as TextareaProps, type props_ToggleProps as ToggleProps, type props_TooltipProps as TooltipProps, type props_TruncateProps as TruncateProps };
}

interface DialogKnownProps extends StyledProps, WithAccent, WithBorder, WithPadding, WithRadius, WithShadow, Omit<PortalProps, 'children' | 'isActive' | 'showCloseButton'> {
    /** @default 'Cancel' */
    buttonCancelText?: string;
    /** @default 'Confirm' */
    buttonConfirmText?: string;
    /** @default ltr */
    buttonOrder?: 'ltr' | 'rtl';
    content: ReactNode;
    isActive: boolean;
    onClickCancel: () => void;
    onClickConfirmation: () => void;
    style?: CSSProperties;
    /** @default left */
    textAlign?: Alignment;
    title: ReactNode;
    /** @default 380 */
    width?: StringOrNumber;
}
type DialogProps = Simplify<DialogKnownProps>;
declare function Dialog(props: DialogProps): react_jsx_runtime.JSX.Element;
declare namespace Dialog {
    var displayName: string;
}

declare function Dropdown(props: DropdownProps): react_jsx_runtime.JSX.Element;
declare namespace Dropdown {
    var displayName: string;
}

declare const H1: react.ForwardRefExoticComponent<{
    as?: react.ElementType | undefined;
    theme?: Theme | undefined;
    align?: Alignment | undefined;
    border?: boolean | BorderItemSide | BorderItem | BorderItem[] | undefined;
    color?: VariantWithTones | undefined;
    children: react.ReactNode;
    light?: boolean | undefined;
    margin?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    mb?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    ml?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mr?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mt?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mx?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    my?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    italic?: boolean | undefined;
    letterSpacing?: csstype.Property.LetterSpacing<0 | (string & {})> | undefined;
    lineHeight?: csstype.Property.LineHeight<0 | (string & {})> | undefined;
    textDecoration?: csstype.Property.TextDecoration<0 | (string & {})> | undefined;
    textTransform?: csstype.Property.TextTransform | undefined;
    wordSpacing?: csstype.Property.WordSpacing<0 | (string & {})> | undefined;
    list?: string | undefined;
    download?: any;
    key?: react.Key | null | undefined;
    style?: react.CSSProperties | undefined;
    name?: string | undefined;
    hidden?: boolean | undefined;
    start?: number | undefined;
    height?: string | number | undefined;
    width?: string | number | undefined;
    wrap?: string | undefined;
    content?: string | undefined;
    readOnly?: boolean | undefined;
    low?: number | undefined;
    high?: number | undefined;
    cite?: string | undefined;
    data?: string | undefined;
    form?: string | undefined;
    label?: string | undefined;
    slot?: string | undefined;
    span?: number | undefined;
    summary?: string | undefined;
    title?: string | undefined;
    pattern?: string | undefined;
    prefix?: string | undefined;
    type?: string | undefined;
    disabled?: boolean | undefined;
    value?: string | number | readonly string[] | undefined;
    accept?: string | undefined;
    acceptCharset?: string | undefined;
    action?: string | undefined;
    allowFullScreen?: boolean | undefined;
    allowTransparency?: boolean | undefined;
    alt?: string | undefined;
    async?: boolean | undefined;
    autoComplete?: string | undefined;
    autoPlay?: boolean | undefined;
    capture?: boolean | "user" | "environment" | undefined;
    cellPadding?: string | number | undefined;
    cellSpacing?: string | number | undefined;
    charSet?: string | undefined;
    challenge?: string | undefined;
    checked?: boolean | undefined;
    classID?: string | undefined;
    cols?: number | undefined;
    colSpan?: number | undefined;
    controls?: boolean | undefined;
    coords?: string | undefined;
    crossOrigin?: "" | "anonymous" | "use-credentials" | undefined;
    dateTime?: string | undefined;
    default?: boolean | undefined;
    defer?: boolean | undefined;
    encType?: string | undefined;
    formAction?: string | undefined;
    formEncType?: string | undefined;
    formMethod?: string | undefined;
    formNoValidate?: boolean | undefined;
    formTarget?: string | undefined;
    frameBorder?: string | number | undefined;
    headers?: string | undefined;
    href?: string | undefined;
    hrefLang?: string | undefined;
    htmlFor?: string | undefined;
    httpEquiv?: string | undefined;
    integrity?: string | undefined;
    keyParams?: string | undefined;
    keyType?: string | undefined;
    kind?: string | undefined;
    loop?: boolean | undefined;
    manifest?: string | undefined;
    marginHeight?: number | undefined;
    marginWidth?: number | undefined;
    max?: string | number | undefined;
    maxLength?: number | undefined;
    media?: string | undefined;
    mediaGroup?: string | undefined;
    method?: string | undefined;
    min?: string | number | undefined;
    minLength?: number | undefined;
    multiple?: boolean | undefined;
    muted?: boolean | undefined;
    noValidate?: boolean | undefined;
    open?: boolean | undefined;
    optimum?: number | undefined;
    placeholder?: string | undefined;
    playsInline?: boolean | undefined;
    poster?: string | undefined;
    preload?: string | undefined;
    required?: boolean | undefined;
    reversed?: boolean | undefined;
    rows?: number | undefined;
    rowSpan?: number | undefined;
    sandbox?: string | undefined;
    scope?: string | undefined;
    scoped?: boolean | undefined;
    scrolling?: string | undefined;
    seamless?: boolean | undefined;
    selected?: boolean | undefined;
    shape?: string | undefined;
    sizes?: string | undefined;
    src?: string | undefined;
    srcDoc?: string | undefined;
    srcLang?: string | undefined;
    srcSet?: string | undefined;
    step?: string | number | undefined;
    target?: string | undefined;
    useMap?: string | undefined;
    wmode?: string | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    autoFocus?: boolean | undefined;
    className?: string | undefined;
    contentEditable?: "inherit" | (boolean | "false" | "true") | "plaintext-only" | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "false" | "true") | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    nonce?: string | undefined;
    spellCheck?: (boolean | "false" | "true") | undefined;
    tabIndex?: number | undefined;
    translate?: "yes" | "no" | undefined;
    radioGroup?: string | undefined;
    role?: react.AriaRole | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    property?: string | undefined;
    rel?: string | undefined;
    resource?: string | undefined;
    rev?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "search" | "email" | "tel" | "text" | "none" | "url" | "numeric" | "decimal" | undefined;
    is?: string | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: (boolean | "false" | "true") | undefined;
    "aria-autocomplete"?: "list" | "none" | "inline" | "both" | undefined;
    "aria-braillelabel"?: string | undefined;
    "aria-brailleroledescription"?: string | undefined;
    "aria-busy"?: (boolean | "false" | "true") | undefined;
    "aria-checked"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colindextext"?: string | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "date" | "time" | "location" | "step" | "page" | "false" | "true" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-description"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: (boolean | "false" | "true") | undefined;
    "aria-dropeffect"?: "copy" | "link" | "none" | "move" | "execute" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: (boolean | "false" | "true") | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: (boolean | "false" | "true") | undefined;
    "aria-haspopup"?: boolean | "menu" | "tree" | "grid" | "dialog" | "listbox" | "false" | "true" | undefined;
    "aria-hidden"?: (boolean | "false" | "true") | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: (boolean | "false" | "true") | undefined;
    "aria-multiline"?: (boolean | "false" | "true") | undefined;
    "aria-multiselectable"?: (boolean | "false" | "true") | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-readonly"?: (boolean | "false" | "true") | undefined;
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    "aria-required"?: (boolean | "false" | "true") | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowindextext"?: string | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: (boolean | "false" | "true") | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    } | undefined;
    onCopy?: react.ClipboardEventHandler<HTMLHeadingElement> | undefined;
    onCopyCapture?: react.ClipboardEventHandler<HTMLHeadingElement> | undefined;
    onCut?: react.ClipboardEventHandler<HTMLHeadingElement> | undefined;
    onCutCapture?: react.ClipboardEventHandler<HTMLHeadingElement> | undefined;
    onPaste?: react.ClipboardEventHandler<HTMLHeadingElement> | undefined;
    onPasteCapture?: react.ClipboardEventHandler<HTMLHeadingElement> | undefined;
    onCompositionEnd?: react.CompositionEventHandler<HTMLHeadingElement> | undefined;
    onCompositionEndCapture?: react.CompositionEventHandler<HTMLHeadingElement> | undefined;
    onCompositionStart?: react.CompositionEventHandler<HTMLHeadingElement> | undefined;
    onCompositionStartCapture?: react.CompositionEventHandler<HTMLHeadingElement> | undefined;
    onCompositionUpdate?: react.CompositionEventHandler<HTMLHeadingElement> | undefined;
    onCompositionUpdateCapture?: react.CompositionEventHandler<HTMLHeadingElement> | undefined;
    onFocus?: react.FocusEventHandler<HTMLHeadingElement> | undefined;
    onFocusCapture?: react.FocusEventHandler<HTMLHeadingElement> | undefined;
    onBlur?: react.FocusEventHandler<HTMLHeadingElement> | undefined;
    onBlurCapture?: react.FocusEventHandler<HTMLHeadingElement> | undefined;
    onChange?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onChangeCapture?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onBeforeInput?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onBeforeInputCapture?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onInput?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onInputCapture?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onReset?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onResetCapture?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onSubmit?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onSubmitCapture?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onInvalid?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onInvalidCapture?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onLoad?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onLoadCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onError?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onErrorCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onKeyDown?: react.KeyboardEventHandler<HTMLHeadingElement> | undefined;
    onKeyDownCapture?: react.KeyboardEventHandler<HTMLHeadingElement> | undefined;
    onKeyPress?: react.KeyboardEventHandler<HTMLHeadingElement> | undefined;
    onKeyPressCapture?: react.KeyboardEventHandler<HTMLHeadingElement> | undefined;
    onKeyUp?: react.KeyboardEventHandler<HTMLHeadingElement> | undefined;
    onKeyUpCapture?: react.KeyboardEventHandler<HTMLHeadingElement> | undefined;
    onAbort?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onAbortCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onCanPlay?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onCanPlayCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onCanPlayThrough?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onCanPlayThroughCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onDurationChange?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onDurationChangeCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onEmptied?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onEmptiedCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onEncrypted?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onEncryptedCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onEnded?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onEndedCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onLoadedData?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onLoadedDataCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onLoadedMetadata?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onLoadedMetadataCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onLoadStart?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onLoadStartCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onPause?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onPauseCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onPlay?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onPlayCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onPlaying?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onPlayingCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onProgress?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onProgressCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onRateChange?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onRateChangeCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onResize?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onResizeCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onSeeked?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onSeekedCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onSeeking?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onSeekingCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onStalled?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onStalledCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onSuspend?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onSuspendCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onTimeUpdate?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onTimeUpdateCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onVolumeChange?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onVolumeChangeCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onWaiting?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onWaitingCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onAuxClick?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onAuxClickCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onClick?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onClickCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onContextMenu?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onContextMenuCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onDoubleClick?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onDoubleClickCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onDrag?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragCapture?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragEnd?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragEndCapture?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragEnter?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragEnterCapture?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragExit?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragExitCapture?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragLeave?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragLeaveCapture?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragOver?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragOverCapture?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragStart?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragStartCapture?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDrop?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDropCapture?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onMouseDown?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseDownCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseEnter?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseLeave?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseMove?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseMoveCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseOut?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseOutCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseOver?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseOverCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseUp?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseUpCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onSelect?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onSelectCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onTouchCancel?: react.TouchEventHandler<HTMLHeadingElement> | undefined;
    onTouchCancelCapture?: react.TouchEventHandler<HTMLHeadingElement> | undefined;
    onTouchEnd?: react.TouchEventHandler<HTMLHeadingElement> | undefined;
    onTouchEndCapture?: react.TouchEventHandler<HTMLHeadingElement> | undefined;
    onTouchMove?: react.TouchEventHandler<HTMLHeadingElement> | undefined;
    onTouchMoveCapture?: react.TouchEventHandler<HTMLHeadingElement> | undefined;
    onTouchStart?: react.TouchEventHandler<HTMLHeadingElement> | undefined;
    onTouchStartCapture?: react.TouchEventHandler<HTMLHeadingElement> | undefined;
    onPointerDown?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerDownCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerMove?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerMoveCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerUp?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerUpCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerCancel?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerCancelCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerEnter?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerLeave?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerOver?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerOverCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerOut?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerOutCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onGotPointerCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onGotPointerCaptureCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onLostPointerCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onLostPointerCaptureCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onScroll?: react.UIEventHandler<HTMLHeadingElement> | undefined;
    onScrollCapture?: react.UIEventHandler<HTMLHeadingElement> | undefined;
    onWheel?: react.WheelEventHandler<HTMLHeadingElement> | undefined;
    onWheelCapture?: react.WheelEventHandler<HTMLHeadingElement> | undefined;
    onAnimationStart?: react.AnimationEventHandler<HTMLHeadingElement> | undefined;
    onAnimationStartCapture?: react.AnimationEventHandler<HTMLHeadingElement> | undefined;
    onAnimationEnd?: react.AnimationEventHandler<HTMLHeadingElement> | undefined;
    onAnimationEndCapture?: react.AnimationEventHandler<HTMLHeadingElement> | undefined;
    onAnimationIteration?: react.AnimationEventHandler<HTMLHeadingElement> | undefined;
    onAnimationIterationCapture?: react.AnimationEventHandler<HTMLHeadingElement> | undefined;
    onTransitionEnd?: react.TransitionEventHandler<HTMLHeadingElement> | undefined;
    onTransitionEndCapture?: react.TransitionEventHandler<HTMLHeadingElement> | undefined;
} & react.RefAttributes<HTMLHeadingElement>>;

declare const H2: react.ForwardRefExoticComponent<{
    as?: react.ElementType | undefined;
    theme?: Theme | undefined;
    align?: Alignment | undefined;
    border?: boolean | BorderItemSide | BorderItem | BorderItem[] | undefined;
    color?: VariantWithTones | undefined;
    children: react.ReactNode;
    light?: boolean | undefined;
    margin?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    mb?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    ml?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mr?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mt?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mx?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    my?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    italic?: boolean | undefined;
    letterSpacing?: csstype.Property.LetterSpacing<0 | (string & {})> | undefined;
    lineHeight?: csstype.Property.LineHeight<0 | (string & {})> | undefined;
    textDecoration?: csstype.Property.TextDecoration<0 | (string & {})> | undefined;
    textTransform?: csstype.Property.TextTransform | undefined;
    wordSpacing?: csstype.Property.WordSpacing<0 | (string & {})> | undefined;
    list?: string | undefined;
    download?: any;
    key?: react.Key | null | undefined;
    style?: react.CSSProperties | undefined;
    name?: string | undefined;
    hidden?: boolean | undefined;
    start?: number | undefined;
    height?: string | number | undefined;
    width?: string | number | undefined;
    wrap?: string | undefined;
    content?: string | undefined;
    readOnly?: boolean | undefined;
    low?: number | undefined;
    high?: number | undefined;
    cite?: string | undefined;
    data?: string | undefined;
    form?: string | undefined;
    label?: string | undefined;
    slot?: string | undefined;
    span?: number | undefined;
    summary?: string | undefined;
    title?: string | undefined;
    pattern?: string | undefined;
    prefix?: string | undefined;
    type?: string | undefined;
    disabled?: boolean | undefined;
    value?: string | number | readonly string[] | undefined;
    accept?: string | undefined;
    acceptCharset?: string | undefined;
    action?: string | undefined;
    allowFullScreen?: boolean | undefined;
    allowTransparency?: boolean | undefined;
    alt?: string | undefined;
    async?: boolean | undefined;
    autoComplete?: string | undefined;
    autoPlay?: boolean | undefined;
    capture?: boolean | "user" | "environment" | undefined;
    cellPadding?: string | number | undefined;
    cellSpacing?: string | number | undefined;
    charSet?: string | undefined;
    challenge?: string | undefined;
    checked?: boolean | undefined;
    classID?: string | undefined;
    cols?: number | undefined;
    colSpan?: number | undefined;
    controls?: boolean | undefined;
    coords?: string | undefined;
    crossOrigin?: "" | "anonymous" | "use-credentials" | undefined;
    dateTime?: string | undefined;
    default?: boolean | undefined;
    defer?: boolean | undefined;
    encType?: string | undefined;
    formAction?: string | undefined;
    formEncType?: string | undefined;
    formMethod?: string | undefined;
    formNoValidate?: boolean | undefined;
    formTarget?: string | undefined;
    frameBorder?: string | number | undefined;
    headers?: string | undefined;
    href?: string | undefined;
    hrefLang?: string | undefined;
    htmlFor?: string | undefined;
    httpEquiv?: string | undefined;
    integrity?: string | undefined;
    keyParams?: string | undefined;
    keyType?: string | undefined;
    kind?: string | undefined;
    loop?: boolean | undefined;
    manifest?: string | undefined;
    marginHeight?: number | undefined;
    marginWidth?: number | undefined;
    max?: string | number | undefined;
    maxLength?: number | undefined;
    media?: string | undefined;
    mediaGroup?: string | undefined;
    method?: string | undefined;
    min?: string | number | undefined;
    minLength?: number | undefined;
    multiple?: boolean | undefined;
    muted?: boolean | undefined;
    noValidate?: boolean | undefined;
    open?: boolean | undefined;
    optimum?: number | undefined;
    placeholder?: string | undefined;
    playsInline?: boolean | undefined;
    poster?: string | undefined;
    preload?: string | undefined;
    required?: boolean | undefined;
    reversed?: boolean | undefined;
    rows?: number | undefined;
    rowSpan?: number | undefined;
    sandbox?: string | undefined;
    scope?: string | undefined;
    scoped?: boolean | undefined;
    scrolling?: string | undefined;
    seamless?: boolean | undefined;
    selected?: boolean | undefined;
    shape?: string | undefined;
    sizes?: string | undefined;
    src?: string | undefined;
    srcDoc?: string | undefined;
    srcLang?: string | undefined;
    srcSet?: string | undefined;
    step?: string | number | undefined;
    target?: string | undefined;
    useMap?: string | undefined;
    wmode?: string | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    autoFocus?: boolean | undefined;
    className?: string | undefined;
    contentEditable?: "inherit" | (boolean | "false" | "true") | "plaintext-only" | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "false" | "true") | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    nonce?: string | undefined;
    spellCheck?: (boolean | "false" | "true") | undefined;
    tabIndex?: number | undefined;
    translate?: "yes" | "no" | undefined;
    radioGroup?: string | undefined;
    role?: react.AriaRole | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    property?: string | undefined;
    rel?: string | undefined;
    resource?: string | undefined;
    rev?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "search" | "email" | "tel" | "text" | "none" | "url" | "numeric" | "decimal" | undefined;
    is?: string | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: (boolean | "false" | "true") | undefined;
    "aria-autocomplete"?: "list" | "none" | "inline" | "both" | undefined;
    "aria-braillelabel"?: string | undefined;
    "aria-brailleroledescription"?: string | undefined;
    "aria-busy"?: (boolean | "false" | "true") | undefined;
    "aria-checked"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colindextext"?: string | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "date" | "time" | "location" | "step" | "page" | "false" | "true" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-description"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: (boolean | "false" | "true") | undefined;
    "aria-dropeffect"?: "copy" | "link" | "none" | "move" | "execute" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: (boolean | "false" | "true") | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: (boolean | "false" | "true") | undefined;
    "aria-haspopup"?: boolean | "menu" | "tree" | "grid" | "dialog" | "listbox" | "false" | "true" | undefined;
    "aria-hidden"?: (boolean | "false" | "true") | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: (boolean | "false" | "true") | undefined;
    "aria-multiline"?: (boolean | "false" | "true") | undefined;
    "aria-multiselectable"?: (boolean | "false" | "true") | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-readonly"?: (boolean | "false" | "true") | undefined;
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    "aria-required"?: (boolean | "false" | "true") | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowindextext"?: string | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: (boolean | "false" | "true") | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    } | undefined;
    onCopy?: react.ClipboardEventHandler<HTMLHeadingElement> | undefined;
    onCopyCapture?: react.ClipboardEventHandler<HTMLHeadingElement> | undefined;
    onCut?: react.ClipboardEventHandler<HTMLHeadingElement> | undefined;
    onCutCapture?: react.ClipboardEventHandler<HTMLHeadingElement> | undefined;
    onPaste?: react.ClipboardEventHandler<HTMLHeadingElement> | undefined;
    onPasteCapture?: react.ClipboardEventHandler<HTMLHeadingElement> | undefined;
    onCompositionEnd?: react.CompositionEventHandler<HTMLHeadingElement> | undefined;
    onCompositionEndCapture?: react.CompositionEventHandler<HTMLHeadingElement> | undefined;
    onCompositionStart?: react.CompositionEventHandler<HTMLHeadingElement> | undefined;
    onCompositionStartCapture?: react.CompositionEventHandler<HTMLHeadingElement> | undefined;
    onCompositionUpdate?: react.CompositionEventHandler<HTMLHeadingElement> | undefined;
    onCompositionUpdateCapture?: react.CompositionEventHandler<HTMLHeadingElement> | undefined;
    onFocus?: react.FocusEventHandler<HTMLHeadingElement> | undefined;
    onFocusCapture?: react.FocusEventHandler<HTMLHeadingElement> | undefined;
    onBlur?: react.FocusEventHandler<HTMLHeadingElement> | undefined;
    onBlurCapture?: react.FocusEventHandler<HTMLHeadingElement> | undefined;
    onChange?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onChangeCapture?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onBeforeInput?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onBeforeInputCapture?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onInput?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onInputCapture?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onReset?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onResetCapture?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onSubmit?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onSubmitCapture?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onInvalid?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onInvalidCapture?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onLoad?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onLoadCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onError?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onErrorCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onKeyDown?: react.KeyboardEventHandler<HTMLHeadingElement> | undefined;
    onKeyDownCapture?: react.KeyboardEventHandler<HTMLHeadingElement> | undefined;
    onKeyPress?: react.KeyboardEventHandler<HTMLHeadingElement> | undefined;
    onKeyPressCapture?: react.KeyboardEventHandler<HTMLHeadingElement> | undefined;
    onKeyUp?: react.KeyboardEventHandler<HTMLHeadingElement> | undefined;
    onKeyUpCapture?: react.KeyboardEventHandler<HTMLHeadingElement> | undefined;
    onAbort?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onAbortCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onCanPlay?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onCanPlayCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onCanPlayThrough?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onCanPlayThroughCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onDurationChange?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onDurationChangeCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onEmptied?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onEmptiedCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onEncrypted?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onEncryptedCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onEnded?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onEndedCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onLoadedData?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onLoadedDataCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onLoadedMetadata?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onLoadedMetadataCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onLoadStart?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onLoadStartCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onPause?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onPauseCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onPlay?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onPlayCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onPlaying?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onPlayingCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onProgress?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onProgressCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onRateChange?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onRateChangeCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onResize?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onResizeCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onSeeked?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onSeekedCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onSeeking?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onSeekingCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onStalled?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onStalledCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onSuspend?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onSuspendCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onTimeUpdate?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onTimeUpdateCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onVolumeChange?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onVolumeChangeCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onWaiting?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onWaitingCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onAuxClick?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onAuxClickCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onClick?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onClickCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onContextMenu?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onContextMenuCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onDoubleClick?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onDoubleClickCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onDrag?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragCapture?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragEnd?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragEndCapture?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragEnter?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragEnterCapture?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragExit?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragExitCapture?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragLeave?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragLeaveCapture?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragOver?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragOverCapture?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragStart?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragStartCapture?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDrop?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDropCapture?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onMouseDown?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseDownCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseEnter?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseLeave?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseMove?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseMoveCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseOut?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseOutCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseOver?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseOverCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseUp?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseUpCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onSelect?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onSelectCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onTouchCancel?: react.TouchEventHandler<HTMLHeadingElement> | undefined;
    onTouchCancelCapture?: react.TouchEventHandler<HTMLHeadingElement> | undefined;
    onTouchEnd?: react.TouchEventHandler<HTMLHeadingElement> | undefined;
    onTouchEndCapture?: react.TouchEventHandler<HTMLHeadingElement> | undefined;
    onTouchMove?: react.TouchEventHandler<HTMLHeadingElement> | undefined;
    onTouchMoveCapture?: react.TouchEventHandler<HTMLHeadingElement> | undefined;
    onTouchStart?: react.TouchEventHandler<HTMLHeadingElement> | undefined;
    onTouchStartCapture?: react.TouchEventHandler<HTMLHeadingElement> | undefined;
    onPointerDown?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerDownCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerMove?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerMoveCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerUp?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerUpCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerCancel?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerCancelCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerEnter?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerLeave?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerOver?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerOverCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerOut?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerOutCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onGotPointerCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onGotPointerCaptureCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onLostPointerCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onLostPointerCaptureCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onScroll?: react.UIEventHandler<HTMLHeadingElement> | undefined;
    onScrollCapture?: react.UIEventHandler<HTMLHeadingElement> | undefined;
    onWheel?: react.WheelEventHandler<HTMLHeadingElement> | undefined;
    onWheelCapture?: react.WheelEventHandler<HTMLHeadingElement> | undefined;
    onAnimationStart?: react.AnimationEventHandler<HTMLHeadingElement> | undefined;
    onAnimationStartCapture?: react.AnimationEventHandler<HTMLHeadingElement> | undefined;
    onAnimationEnd?: react.AnimationEventHandler<HTMLHeadingElement> | undefined;
    onAnimationEndCapture?: react.AnimationEventHandler<HTMLHeadingElement> | undefined;
    onAnimationIteration?: react.AnimationEventHandler<HTMLHeadingElement> | undefined;
    onAnimationIterationCapture?: react.AnimationEventHandler<HTMLHeadingElement> | undefined;
    onTransitionEnd?: react.TransitionEventHandler<HTMLHeadingElement> | undefined;
    onTransitionEndCapture?: react.TransitionEventHandler<HTMLHeadingElement> | undefined;
} & react.RefAttributes<HTMLHeadingElement>>;

declare const H3: react.ForwardRefExoticComponent<{
    as?: react.ElementType | undefined;
    theme?: Theme | undefined;
    align?: Alignment | undefined;
    border?: boolean | BorderItemSide | BorderItem | BorderItem[] | undefined;
    color?: VariantWithTones | undefined;
    children: react.ReactNode;
    light?: boolean | undefined;
    margin?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    mb?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    ml?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mr?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mt?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mx?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    my?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    italic?: boolean | undefined;
    letterSpacing?: csstype.Property.LetterSpacing<0 | (string & {})> | undefined;
    lineHeight?: csstype.Property.LineHeight<0 | (string & {})> | undefined;
    textDecoration?: csstype.Property.TextDecoration<0 | (string & {})> | undefined;
    textTransform?: csstype.Property.TextTransform | undefined;
    wordSpacing?: csstype.Property.WordSpacing<0 | (string & {})> | undefined;
    list?: string | undefined;
    download?: any;
    key?: react.Key | null | undefined;
    style?: react.CSSProperties | undefined;
    name?: string | undefined;
    hidden?: boolean | undefined;
    start?: number | undefined;
    height?: string | number | undefined;
    width?: string | number | undefined;
    wrap?: string | undefined;
    content?: string | undefined;
    readOnly?: boolean | undefined;
    low?: number | undefined;
    high?: number | undefined;
    cite?: string | undefined;
    data?: string | undefined;
    form?: string | undefined;
    label?: string | undefined;
    slot?: string | undefined;
    span?: number | undefined;
    summary?: string | undefined;
    title?: string | undefined;
    pattern?: string | undefined;
    prefix?: string | undefined;
    type?: string | undefined;
    disabled?: boolean | undefined;
    value?: string | number | readonly string[] | undefined;
    accept?: string | undefined;
    acceptCharset?: string | undefined;
    action?: string | undefined;
    allowFullScreen?: boolean | undefined;
    allowTransparency?: boolean | undefined;
    alt?: string | undefined;
    async?: boolean | undefined;
    autoComplete?: string | undefined;
    autoPlay?: boolean | undefined;
    capture?: boolean | "user" | "environment" | undefined;
    cellPadding?: string | number | undefined;
    cellSpacing?: string | number | undefined;
    charSet?: string | undefined;
    challenge?: string | undefined;
    checked?: boolean | undefined;
    classID?: string | undefined;
    cols?: number | undefined;
    colSpan?: number | undefined;
    controls?: boolean | undefined;
    coords?: string | undefined;
    crossOrigin?: "" | "anonymous" | "use-credentials" | undefined;
    dateTime?: string | undefined;
    default?: boolean | undefined;
    defer?: boolean | undefined;
    encType?: string | undefined;
    formAction?: string | undefined;
    formEncType?: string | undefined;
    formMethod?: string | undefined;
    formNoValidate?: boolean | undefined;
    formTarget?: string | undefined;
    frameBorder?: string | number | undefined;
    headers?: string | undefined;
    href?: string | undefined;
    hrefLang?: string | undefined;
    htmlFor?: string | undefined;
    httpEquiv?: string | undefined;
    integrity?: string | undefined;
    keyParams?: string | undefined;
    keyType?: string | undefined;
    kind?: string | undefined;
    loop?: boolean | undefined;
    manifest?: string | undefined;
    marginHeight?: number | undefined;
    marginWidth?: number | undefined;
    max?: string | number | undefined;
    maxLength?: number | undefined;
    media?: string | undefined;
    mediaGroup?: string | undefined;
    method?: string | undefined;
    min?: string | number | undefined;
    minLength?: number | undefined;
    multiple?: boolean | undefined;
    muted?: boolean | undefined;
    noValidate?: boolean | undefined;
    open?: boolean | undefined;
    optimum?: number | undefined;
    placeholder?: string | undefined;
    playsInline?: boolean | undefined;
    poster?: string | undefined;
    preload?: string | undefined;
    required?: boolean | undefined;
    reversed?: boolean | undefined;
    rows?: number | undefined;
    rowSpan?: number | undefined;
    sandbox?: string | undefined;
    scope?: string | undefined;
    scoped?: boolean | undefined;
    scrolling?: string | undefined;
    seamless?: boolean | undefined;
    selected?: boolean | undefined;
    shape?: string | undefined;
    sizes?: string | undefined;
    src?: string | undefined;
    srcDoc?: string | undefined;
    srcLang?: string | undefined;
    srcSet?: string | undefined;
    step?: string | number | undefined;
    target?: string | undefined;
    useMap?: string | undefined;
    wmode?: string | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    autoFocus?: boolean | undefined;
    className?: string | undefined;
    contentEditable?: "inherit" | (boolean | "false" | "true") | "plaintext-only" | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "false" | "true") | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    nonce?: string | undefined;
    spellCheck?: (boolean | "false" | "true") | undefined;
    tabIndex?: number | undefined;
    translate?: "yes" | "no" | undefined;
    radioGroup?: string | undefined;
    role?: react.AriaRole | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    property?: string | undefined;
    rel?: string | undefined;
    resource?: string | undefined;
    rev?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "search" | "email" | "tel" | "text" | "none" | "url" | "numeric" | "decimal" | undefined;
    is?: string | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: (boolean | "false" | "true") | undefined;
    "aria-autocomplete"?: "list" | "none" | "inline" | "both" | undefined;
    "aria-braillelabel"?: string | undefined;
    "aria-brailleroledescription"?: string | undefined;
    "aria-busy"?: (boolean | "false" | "true") | undefined;
    "aria-checked"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colindextext"?: string | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "date" | "time" | "location" | "step" | "page" | "false" | "true" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-description"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: (boolean | "false" | "true") | undefined;
    "aria-dropeffect"?: "copy" | "link" | "none" | "move" | "execute" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: (boolean | "false" | "true") | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: (boolean | "false" | "true") | undefined;
    "aria-haspopup"?: boolean | "menu" | "tree" | "grid" | "dialog" | "listbox" | "false" | "true" | undefined;
    "aria-hidden"?: (boolean | "false" | "true") | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: (boolean | "false" | "true") | undefined;
    "aria-multiline"?: (boolean | "false" | "true") | undefined;
    "aria-multiselectable"?: (boolean | "false" | "true") | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-readonly"?: (boolean | "false" | "true") | undefined;
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    "aria-required"?: (boolean | "false" | "true") | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowindextext"?: string | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: (boolean | "false" | "true") | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    } | undefined;
    onCopy?: react.ClipboardEventHandler<HTMLHeadingElement> | undefined;
    onCopyCapture?: react.ClipboardEventHandler<HTMLHeadingElement> | undefined;
    onCut?: react.ClipboardEventHandler<HTMLHeadingElement> | undefined;
    onCutCapture?: react.ClipboardEventHandler<HTMLHeadingElement> | undefined;
    onPaste?: react.ClipboardEventHandler<HTMLHeadingElement> | undefined;
    onPasteCapture?: react.ClipboardEventHandler<HTMLHeadingElement> | undefined;
    onCompositionEnd?: react.CompositionEventHandler<HTMLHeadingElement> | undefined;
    onCompositionEndCapture?: react.CompositionEventHandler<HTMLHeadingElement> | undefined;
    onCompositionStart?: react.CompositionEventHandler<HTMLHeadingElement> | undefined;
    onCompositionStartCapture?: react.CompositionEventHandler<HTMLHeadingElement> | undefined;
    onCompositionUpdate?: react.CompositionEventHandler<HTMLHeadingElement> | undefined;
    onCompositionUpdateCapture?: react.CompositionEventHandler<HTMLHeadingElement> | undefined;
    onFocus?: react.FocusEventHandler<HTMLHeadingElement> | undefined;
    onFocusCapture?: react.FocusEventHandler<HTMLHeadingElement> | undefined;
    onBlur?: react.FocusEventHandler<HTMLHeadingElement> | undefined;
    onBlurCapture?: react.FocusEventHandler<HTMLHeadingElement> | undefined;
    onChange?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onChangeCapture?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onBeforeInput?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onBeforeInputCapture?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onInput?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onInputCapture?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onReset?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onResetCapture?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onSubmit?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onSubmitCapture?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onInvalid?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onInvalidCapture?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onLoad?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onLoadCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onError?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onErrorCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onKeyDown?: react.KeyboardEventHandler<HTMLHeadingElement> | undefined;
    onKeyDownCapture?: react.KeyboardEventHandler<HTMLHeadingElement> | undefined;
    onKeyPress?: react.KeyboardEventHandler<HTMLHeadingElement> | undefined;
    onKeyPressCapture?: react.KeyboardEventHandler<HTMLHeadingElement> | undefined;
    onKeyUp?: react.KeyboardEventHandler<HTMLHeadingElement> | undefined;
    onKeyUpCapture?: react.KeyboardEventHandler<HTMLHeadingElement> | undefined;
    onAbort?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onAbortCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onCanPlay?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onCanPlayCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onCanPlayThrough?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onCanPlayThroughCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onDurationChange?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onDurationChangeCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onEmptied?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onEmptiedCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onEncrypted?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onEncryptedCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onEnded?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onEndedCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onLoadedData?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onLoadedDataCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onLoadedMetadata?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onLoadedMetadataCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onLoadStart?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onLoadStartCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onPause?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onPauseCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onPlay?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onPlayCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onPlaying?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onPlayingCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onProgress?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onProgressCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onRateChange?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onRateChangeCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onResize?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onResizeCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onSeeked?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onSeekedCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onSeeking?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onSeekingCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onStalled?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onStalledCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onSuspend?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onSuspendCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onTimeUpdate?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onTimeUpdateCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onVolumeChange?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onVolumeChangeCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onWaiting?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onWaitingCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onAuxClick?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onAuxClickCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onClick?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onClickCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onContextMenu?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onContextMenuCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onDoubleClick?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onDoubleClickCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onDrag?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragCapture?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragEnd?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragEndCapture?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragEnter?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragEnterCapture?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragExit?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragExitCapture?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragLeave?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragLeaveCapture?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragOver?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragOverCapture?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragStart?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragStartCapture?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDrop?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDropCapture?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onMouseDown?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseDownCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseEnter?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseLeave?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseMove?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseMoveCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseOut?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseOutCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseOver?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseOverCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseUp?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseUpCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onSelect?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onSelectCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onTouchCancel?: react.TouchEventHandler<HTMLHeadingElement> | undefined;
    onTouchCancelCapture?: react.TouchEventHandler<HTMLHeadingElement> | undefined;
    onTouchEnd?: react.TouchEventHandler<HTMLHeadingElement> | undefined;
    onTouchEndCapture?: react.TouchEventHandler<HTMLHeadingElement> | undefined;
    onTouchMove?: react.TouchEventHandler<HTMLHeadingElement> | undefined;
    onTouchMoveCapture?: react.TouchEventHandler<HTMLHeadingElement> | undefined;
    onTouchStart?: react.TouchEventHandler<HTMLHeadingElement> | undefined;
    onTouchStartCapture?: react.TouchEventHandler<HTMLHeadingElement> | undefined;
    onPointerDown?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerDownCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerMove?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerMoveCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerUp?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerUpCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerCancel?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerCancelCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerEnter?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerLeave?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerOver?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerOverCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerOut?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerOutCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onGotPointerCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onGotPointerCaptureCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onLostPointerCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onLostPointerCaptureCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onScroll?: react.UIEventHandler<HTMLHeadingElement> | undefined;
    onScrollCapture?: react.UIEventHandler<HTMLHeadingElement> | undefined;
    onWheel?: react.WheelEventHandler<HTMLHeadingElement> | undefined;
    onWheelCapture?: react.WheelEventHandler<HTMLHeadingElement> | undefined;
    onAnimationStart?: react.AnimationEventHandler<HTMLHeadingElement> | undefined;
    onAnimationStartCapture?: react.AnimationEventHandler<HTMLHeadingElement> | undefined;
    onAnimationEnd?: react.AnimationEventHandler<HTMLHeadingElement> | undefined;
    onAnimationEndCapture?: react.AnimationEventHandler<HTMLHeadingElement> | undefined;
    onAnimationIteration?: react.AnimationEventHandler<HTMLHeadingElement> | undefined;
    onAnimationIterationCapture?: react.AnimationEventHandler<HTMLHeadingElement> | undefined;
    onTransitionEnd?: react.TransitionEventHandler<HTMLHeadingElement> | undefined;
    onTransitionEndCapture?: react.TransitionEventHandler<HTMLHeadingElement> | undefined;
} & react.RefAttributes<HTMLHeadingElement>>;

declare const H4: react.ForwardRefExoticComponent<{
    as?: react.ElementType | undefined;
    theme?: Theme | undefined;
    align?: Alignment | undefined;
    border?: boolean | BorderItemSide | BorderItem | BorderItem[] | undefined;
    color?: VariantWithTones | undefined;
    children: react.ReactNode;
    light?: boolean | undefined;
    margin?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    mb?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    ml?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mr?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mt?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mx?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    my?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    italic?: boolean | undefined;
    letterSpacing?: csstype.Property.LetterSpacing<0 | (string & {})> | undefined;
    lineHeight?: csstype.Property.LineHeight<0 | (string & {})> | undefined;
    textDecoration?: csstype.Property.TextDecoration<0 | (string & {})> | undefined;
    textTransform?: csstype.Property.TextTransform | undefined;
    wordSpacing?: csstype.Property.WordSpacing<0 | (string & {})> | undefined;
    list?: string | undefined;
    download?: any;
    key?: react.Key | null | undefined;
    style?: react.CSSProperties | undefined;
    name?: string | undefined;
    hidden?: boolean | undefined;
    start?: number | undefined;
    height?: string | number | undefined;
    width?: string | number | undefined;
    wrap?: string | undefined;
    content?: string | undefined;
    readOnly?: boolean | undefined;
    low?: number | undefined;
    high?: number | undefined;
    cite?: string | undefined;
    data?: string | undefined;
    form?: string | undefined;
    label?: string | undefined;
    slot?: string | undefined;
    span?: number | undefined;
    summary?: string | undefined;
    title?: string | undefined;
    pattern?: string | undefined;
    prefix?: string | undefined;
    type?: string | undefined;
    disabled?: boolean | undefined;
    value?: string | number | readonly string[] | undefined;
    accept?: string | undefined;
    acceptCharset?: string | undefined;
    action?: string | undefined;
    allowFullScreen?: boolean | undefined;
    allowTransparency?: boolean | undefined;
    alt?: string | undefined;
    async?: boolean | undefined;
    autoComplete?: string | undefined;
    autoPlay?: boolean | undefined;
    capture?: boolean | "user" | "environment" | undefined;
    cellPadding?: string | number | undefined;
    cellSpacing?: string | number | undefined;
    charSet?: string | undefined;
    challenge?: string | undefined;
    checked?: boolean | undefined;
    classID?: string | undefined;
    cols?: number | undefined;
    colSpan?: number | undefined;
    controls?: boolean | undefined;
    coords?: string | undefined;
    crossOrigin?: "" | "anonymous" | "use-credentials" | undefined;
    dateTime?: string | undefined;
    default?: boolean | undefined;
    defer?: boolean | undefined;
    encType?: string | undefined;
    formAction?: string | undefined;
    formEncType?: string | undefined;
    formMethod?: string | undefined;
    formNoValidate?: boolean | undefined;
    formTarget?: string | undefined;
    frameBorder?: string | number | undefined;
    headers?: string | undefined;
    href?: string | undefined;
    hrefLang?: string | undefined;
    htmlFor?: string | undefined;
    httpEquiv?: string | undefined;
    integrity?: string | undefined;
    keyParams?: string | undefined;
    keyType?: string | undefined;
    kind?: string | undefined;
    loop?: boolean | undefined;
    manifest?: string | undefined;
    marginHeight?: number | undefined;
    marginWidth?: number | undefined;
    max?: string | number | undefined;
    maxLength?: number | undefined;
    media?: string | undefined;
    mediaGroup?: string | undefined;
    method?: string | undefined;
    min?: string | number | undefined;
    minLength?: number | undefined;
    multiple?: boolean | undefined;
    muted?: boolean | undefined;
    noValidate?: boolean | undefined;
    open?: boolean | undefined;
    optimum?: number | undefined;
    placeholder?: string | undefined;
    playsInline?: boolean | undefined;
    poster?: string | undefined;
    preload?: string | undefined;
    required?: boolean | undefined;
    reversed?: boolean | undefined;
    rows?: number | undefined;
    rowSpan?: number | undefined;
    sandbox?: string | undefined;
    scope?: string | undefined;
    scoped?: boolean | undefined;
    scrolling?: string | undefined;
    seamless?: boolean | undefined;
    selected?: boolean | undefined;
    shape?: string | undefined;
    sizes?: string | undefined;
    src?: string | undefined;
    srcDoc?: string | undefined;
    srcLang?: string | undefined;
    srcSet?: string | undefined;
    step?: string | number | undefined;
    target?: string | undefined;
    useMap?: string | undefined;
    wmode?: string | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    autoFocus?: boolean | undefined;
    className?: string | undefined;
    contentEditable?: "inherit" | (boolean | "false" | "true") | "plaintext-only" | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "false" | "true") | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    nonce?: string | undefined;
    spellCheck?: (boolean | "false" | "true") | undefined;
    tabIndex?: number | undefined;
    translate?: "yes" | "no" | undefined;
    radioGroup?: string | undefined;
    role?: react.AriaRole | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    property?: string | undefined;
    rel?: string | undefined;
    resource?: string | undefined;
    rev?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "search" | "email" | "tel" | "text" | "none" | "url" | "numeric" | "decimal" | undefined;
    is?: string | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: (boolean | "false" | "true") | undefined;
    "aria-autocomplete"?: "list" | "none" | "inline" | "both" | undefined;
    "aria-braillelabel"?: string | undefined;
    "aria-brailleroledescription"?: string | undefined;
    "aria-busy"?: (boolean | "false" | "true") | undefined;
    "aria-checked"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colindextext"?: string | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "date" | "time" | "location" | "step" | "page" | "false" | "true" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-description"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: (boolean | "false" | "true") | undefined;
    "aria-dropeffect"?: "copy" | "link" | "none" | "move" | "execute" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: (boolean | "false" | "true") | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: (boolean | "false" | "true") | undefined;
    "aria-haspopup"?: boolean | "menu" | "tree" | "grid" | "dialog" | "listbox" | "false" | "true" | undefined;
    "aria-hidden"?: (boolean | "false" | "true") | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: (boolean | "false" | "true") | undefined;
    "aria-multiline"?: (boolean | "false" | "true") | undefined;
    "aria-multiselectable"?: (boolean | "false" | "true") | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-readonly"?: (boolean | "false" | "true") | undefined;
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    "aria-required"?: (boolean | "false" | "true") | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowindextext"?: string | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: (boolean | "false" | "true") | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    } | undefined;
    onCopy?: react.ClipboardEventHandler<HTMLHeadingElement> | undefined;
    onCopyCapture?: react.ClipboardEventHandler<HTMLHeadingElement> | undefined;
    onCut?: react.ClipboardEventHandler<HTMLHeadingElement> | undefined;
    onCutCapture?: react.ClipboardEventHandler<HTMLHeadingElement> | undefined;
    onPaste?: react.ClipboardEventHandler<HTMLHeadingElement> | undefined;
    onPasteCapture?: react.ClipboardEventHandler<HTMLHeadingElement> | undefined;
    onCompositionEnd?: react.CompositionEventHandler<HTMLHeadingElement> | undefined;
    onCompositionEndCapture?: react.CompositionEventHandler<HTMLHeadingElement> | undefined;
    onCompositionStart?: react.CompositionEventHandler<HTMLHeadingElement> | undefined;
    onCompositionStartCapture?: react.CompositionEventHandler<HTMLHeadingElement> | undefined;
    onCompositionUpdate?: react.CompositionEventHandler<HTMLHeadingElement> | undefined;
    onCompositionUpdateCapture?: react.CompositionEventHandler<HTMLHeadingElement> | undefined;
    onFocus?: react.FocusEventHandler<HTMLHeadingElement> | undefined;
    onFocusCapture?: react.FocusEventHandler<HTMLHeadingElement> | undefined;
    onBlur?: react.FocusEventHandler<HTMLHeadingElement> | undefined;
    onBlurCapture?: react.FocusEventHandler<HTMLHeadingElement> | undefined;
    onChange?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onChangeCapture?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onBeforeInput?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onBeforeInputCapture?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onInput?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onInputCapture?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onReset?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onResetCapture?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onSubmit?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onSubmitCapture?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onInvalid?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onInvalidCapture?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onLoad?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onLoadCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onError?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onErrorCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onKeyDown?: react.KeyboardEventHandler<HTMLHeadingElement> | undefined;
    onKeyDownCapture?: react.KeyboardEventHandler<HTMLHeadingElement> | undefined;
    onKeyPress?: react.KeyboardEventHandler<HTMLHeadingElement> | undefined;
    onKeyPressCapture?: react.KeyboardEventHandler<HTMLHeadingElement> | undefined;
    onKeyUp?: react.KeyboardEventHandler<HTMLHeadingElement> | undefined;
    onKeyUpCapture?: react.KeyboardEventHandler<HTMLHeadingElement> | undefined;
    onAbort?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onAbortCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onCanPlay?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onCanPlayCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onCanPlayThrough?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onCanPlayThroughCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onDurationChange?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onDurationChangeCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onEmptied?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onEmptiedCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onEncrypted?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onEncryptedCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onEnded?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onEndedCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onLoadedData?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onLoadedDataCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onLoadedMetadata?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onLoadedMetadataCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onLoadStart?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onLoadStartCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onPause?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onPauseCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onPlay?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onPlayCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onPlaying?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onPlayingCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onProgress?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onProgressCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onRateChange?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onRateChangeCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onResize?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onResizeCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onSeeked?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onSeekedCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onSeeking?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onSeekingCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onStalled?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onStalledCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onSuspend?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onSuspendCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onTimeUpdate?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onTimeUpdateCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onVolumeChange?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onVolumeChangeCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onWaiting?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onWaitingCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onAuxClick?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onAuxClickCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onClick?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onClickCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onContextMenu?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onContextMenuCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onDoubleClick?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onDoubleClickCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onDrag?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragCapture?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragEnd?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragEndCapture?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragEnter?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragEnterCapture?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragExit?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragExitCapture?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragLeave?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragLeaveCapture?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragOver?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragOverCapture?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragStart?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragStartCapture?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDrop?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDropCapture?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onMouseDown?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseDownCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseEnter?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseLeave?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseMove?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseMoveCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseOut?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseOutCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseOver?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseOverCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseUp?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseUpCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onSelect?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onSelectCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onTouchCancel?: react.TouchEventHandler<HTMLHeadingElement> | undefined;
    onTouchCancelCapture?: react.TouchEventHandler<HTMLHeadingElement> | undefined;
    onTouchEnd?: react.TouchEventHandler<HTMLHeadingElement> | undefined;
    onTouchEndCapture?: react.TouchEventHandler<HTMLHeadingElement> | undefined;
    onTouchMove?: react.TouchEventHandler<HTMLHeadingElement> | undefined;
    onTouchMoveCapture?: react.TouchEventHandler<HTMLHeadingElement> | undefined;
    onTouchStart?: react.TouchEventHandler<HTMLHeadingElement> | undefined;
    onTouchStartCapture?: react.TouchEventHandler<HTMLHeadingElement> | undefined;
    onPointerDown?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerDownCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerMove?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerMoveCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerUp?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerUpCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerCancel?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerCancelCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerEnter?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerLeave?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerOver?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerOverCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerOut?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerOutCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onGotPointerCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onGotPointerCaptureCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onLostPointerCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onLostPointerCaptureCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onScroll?: react.UIEventHandler<HTMLHeadingElement> | undefined;
    onScrollCapture?: react.UIEventHandler<HTMLHeadingElement> | undefined;
    onWheel?: react.WheelEventHandler<HTMLHeadingElement> | undefined;
    onWheelCapture?: react.WheelEventHandler<HTMLHeadingElement> | undefined;
    onAnimationStart?: react.AnimationEventHandler<HTMLHeadingElement> | undefined;
    onAnimationStartCapture?: react.AnimationEventHandler<HTMLHeadingElement> | undefined;
    onAnimationEnd?: react.AnimationEventHandler<HTMLHeadingElement> | undefined;
    onAnimationEndCapture?: react.AnimationEventHandler<HTMLHeadingElement> | undefined;
    onAnimationIteration?: react.AnimationEventHandler<HTMLHeadingElement> | undefined;
    onAnimationIterationCapture?: react.AnimationEventHandler<HTMLHeadingElement> | undefined;
    onTransitionEnd?: react.TransitionEventHandler<HTMLHeadingElement> | undefined;
    onTransitionEndCapture?: react.TransitionEventHandler<HTMLHeadingElement> | undefined;
} & react.RefAttributes<HTMLHeadingElement>>;

declare const H5: react.ForwardRefExoticComponent<{
    as?: react.ElementType | undefined;
    theme?: Theme | undefined;
    align?: Alignment | undefined;
    border?: boolean | BorderItemSide | BorderItem | BorderItem[] | undefined;
    color?: VariantWithTones | undefined;
    children: react.ReactNode;
    light?: boolean | undefined;
    margin?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    mb?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    ml?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mr?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mt?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mx?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    my?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    italic?: boolean | undefined;
    letterSpacing?: csstype.Property.LetterSpacing<0 | (string & {})> | undefined;
    lineHeight?: csstype.Property.LineHeight<0 | (string & {})> | undefined;
    textDecoration?: csstype.Property.TextDecoration<0 | (string & {})> | undefined;
    textTransform?: csstype.Property.TextTransform | undefined;
    wordSpacing?: csstype.Property.WordSpacing<0 | (string & {})> | undefined;
    list?: string | undefined;
    download?: any;
    key?: react.Key | null | undefined;
    style?: react.CSSProperties | undefined;
    name?: string | undefined;
    hidden?: boolean | undefined;
    start?: number | undefined;
    height?: string | number | undefined;
    width?: string | number | undefined;
    wrap?: string | undefined;
    content?: string | undefined;
    readOnly?: boolean | undefined;
    low?: number | undefined;
    high?: number | undefined;
    cite?: string | undefined;
    data?: string | undefined;
    form?: string | undefined;
    label?: string | undefined;
    slot?: string | undefined;
    span?: number | undefined;
    summary?: string | undefined;
    title?: string | undefined;
    pattern?: string | undefined;
    prefix?: string | undefined;
    type?: string | undefined;
    disabled?: boolean | undefined;
    value?: string | number | readonly string[] | undefined;
    accept?: string | undefined;
    acceptCharset?: string | undefined;
    action?: string | undefined;
    allowFullScreen?: boolean | undefined;
    allowTransparency?: boolean | undefined;
    alt?: string | undefined;
    async?: boolean | undefined;
    autoComplete?: string | undefined;
    autoPlay?: boolean | undefined;
    capture?: boolean | "user" | "environment" | undefined;
    cellPadding?: string | number | undefined;
    cellSpacing?: string | number | undefined;
    charSet?: string | undefined;
    challenge?: string | undefined;
    checked?: boolean | undefined;
    classID?: string | undefined;
    cols?: number | undefined;
    colSpan?: number | undefined;
    controls?: boolean | undefined;
    coords?: string | undefined;
    crossOrigin?: "" | "anonymous" | "use-credentials" | undefined;
    dateTime?: string | undefined;
    default?: boolean | undefined;
    defer?: boolean | undefined;
    encType?: string | undefined;
    formAction?: string | undefined;
    formEncType?: string | undefined;
    formMethod?: string | undefined;
    formNoValidate?: boolean | undefined;
    formTarget?: string | undefined;
    frameBorder?: string | number | undefined;
    headers?: string | undefined;
    href?: string | undefined;
    hrefLang?: string | undefined;
    htmlFor?: string | undefined;
    httpEquiv?: string | undefined;
    integrity?: string | undefined;
    keyParams?: string | undefined;
    keyType?: string | undefined;
    kind?: string | undefined;
    loop?: boolean | undefined;
    manifest?: string | undefined;
    marginHeight?: number | undefined;
    marginWidth?: number | undefined;
    max?: string | number | undefined;
    maxLength?: number | undefined;
    media?: string | undefined;
    mediaGroup?: string | undefined;
    method?: string | undefined;
    min?: string | number | undefined;
    minLength?: number | undefined;
    multiple?: boolean | undefined;
    muted?: boolean | undefined;
    noValidate?: boolean | undefined;
    open?: boolean | undefined;
    optimum?: number | undefined;
    placeholder?: string | undefined;
    playsInline?: boolean | undefined;
    poster?: string | undefined;
    preload?: string | undefined;
    required?: boolean | undefined;
    reversed?: boolean | undefined;
    rows?: number | undefined;
    rowSpan?: number | undefined;
    sandbox?: string | undefined;
    scope?: string | undefined;
    scoped?: boolean | undefined;
    scrolling?: string | undefined;
    seamless?: boolean | undefined;
    selected?: boolean | undefined;
    shape?: string | undefined;
    sizes?: string | undefined;
    src?: string | undefined;
    srcDoc?: string | undefined;
    srcLang?: string | undefined;
    srcSet?: string | undefined;
    step?: string | number | undefined;
    target?: string | undefined;
    useMap?: string | undefined;
    wmode?: string | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    autoFocus?: boolean | undefined;
    className?: string | undefined;
    contentEditable?: "inherit" | (boolean | "false" | "true") | "plaintext-only" | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "false" | "true") | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    nonce?: string | undefined;
    spellCheck?: (boolean | "false" | "true") | undefined;
    tabIndex?: number | undefined;
    translate?: "yes" | "no" | undefined;
    radioGroup?: string | undefined;
    role?: react.AriaRole | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    property?: string | undefined;
    rel?: string | undefined;
    resource?: string | undefined;
    rev?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "search" | "email" | "tel" | "text" | "none" | "url" | "numeric" | "decimal" | undefined;
    is?: string | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: (boolean | "false" | "true") | undefined;
    "aria-autocomplete"?: "list" | "none" | "inline" | "both" | undefined;
    "aria-braillelabel"?: string | undefined;
    "aria-brailleroledescription"?: string | undefined;
    "aria-busy"?: (boolean | "false" | "true") | undefined;
    "aria-checked"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colindextext"?: string | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "date" | "time" | "location" | "step" | "page" | "false" | "true" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-description"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: (boolean | "false" | "true") | undefined;
    "aria-dropeffect"?: "copy" | "link" | "none" | "move" | "execute" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: (boolean | "false" | "true") | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: (boolean | "false" | "true") | undefined;
    "aria-haspopup"?: boolean | "menu" | "tree" | "grid" | "dialog" | "listbox" | "false" | "true" | undefined;
    "aria-hidden"?: (boolean | "false" | "true") | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: (boolean | "false" | "true") | undefined;
    "aria-multiline"?: (boolean | "false" | "true") | undefined;
    "aria-multiselectable"?: (boolean | "false" | "true") | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-readonly"?: (boolean | "false" | "true") | undefined;
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    "aria-required"?: (boolean | "false" | "true") | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowindextext"?: string | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: (boolean | "false" | "true") | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    } | undefined;
    onCopy?: react.ClipboardEventHandler<HTMLHeadingElement> | undefined;
    onCopyCapture?: react.ClipboardEventHandler<HTMLHeadingElement> | undefined;
    onCut?: react.ClipboardEventHandler<HTMLHeadingElement> | undefined;
    onCutCapture?: react.ClipboardEventHandler<HTMLHeadingElement> | undefined;
    onPaste?: react.ClipboardEventHandler<HTMLHeadingElement> | undefined;
    onPasteCapture?: react.ClipboardEventHandler<HTMLHeadingElement> | undefined;
    onCompositionEnd?: react.CompositionEventHandler<HTMLHeadingElement> | undefined;
    onCompositionEndCapture?: react.CompositionEventHandler<HTMLHeadingElement> | undefined;
    onCompositionStart?: react.CompositionEventHandler<HTMLHeadingElement> | undefined;
    onCompositionStartCapture?: react.CompositionEventHandler<HTMLHeadingElement> | undefined;
    onCompositionUpdate?: react.CompositionEventHandler<HTMLHeadingElement> | undefined;
    onCompositionUpdateCapture?: react.CompositionEventHandler<HTMLHeadingElement> | undefined;
    onFocus?: react.FocusEventHandler<HTMLHeadingElement> | undefined;
    onFocusCapture?: react.FocusEventHandler<HTMLHeadingElement> | undefined;
    onBlur?: react.FocusEventHandler<HTMLHeadingElement> | undefined;
    onBlurCapture?: react.FocusEventHandler<HTMLHeadingElement> | undefined;
    onChange?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onChangeCapture?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onBeforeInput?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onBeforeInputCapture?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onInput?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onInputCapture?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onReset?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onResetCapture?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onSubmit?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onSubmitCapture?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onInvalid?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onInvalidCapture?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onLoad?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onLoadCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onError?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onErrorCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onKeyDown?: react.KeyboardEventHandler<HTMLHeadingElement> | undefined;
    onKeyDownCapture?: react.KeyboardEventHandler<HTMLHeadingElement> | undefined;
    onKeyPress?: react.KeyboardEventHandler<HTMLHeadingElement> | undefined;
    onKeyPressCapture?: react.KeyboardEventHandler<HTMLHeadingElement> | undefined;
    onKeyUp?: react.KeyboardEventHandler<HTMLHeadingElement> | undefined;
    onKeyUpCapture?: react.KeyboardEventHandler<HTMLHeadingElement> | undefined;
    onAbort?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onAbortCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onCanPlay?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onCanPlayCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onCanPlayThrough?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onCanPlayThroughCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onDurationChange?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onDurationChangeCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onEmptied?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onEmptiedCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onEncrypted?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onEncryptedCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onEnded?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onEndedCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onLoadedData?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onLoadedDataCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onLoadedMetadata?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onLoadedMetadataCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onLoadStart?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onLoadStartCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onPause?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onPauseCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onPlay?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onPlayCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onPlaying?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onPlayingCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onProgress?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onProgressCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onRateChange?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onRateChangeCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onResize?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onResizeCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onSeeked?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onSeekedCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onSeeking?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onSeekingCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onStalled?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onStalledCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onSuspend?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onSuspendCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onTimeUpdate?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onTimeUpdateCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onVolumeChange?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onVolumeChangeCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onWaiting?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onWaitingCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onAuxClick?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onAuxClickCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onClick?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onClickCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onContextMenu?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onContextMenuCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onDoubleClick?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onDoubleClickCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onDrag?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragCapture?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragEnd?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragEndCapture?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragEnter?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragEnterCapture?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragExit?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragExitCapture?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragLeave?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragLeaveCapture?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragOver?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragOverCapture?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragStart?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragStartCapture?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDrop?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDropCapture?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onMouseDown?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseDownCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseEnter?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseLeave?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseMove?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseMoveCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseOut?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseOutCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseOver?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseOverCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseUp?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseUpCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onSelect?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onSelectCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onTouchCancel?: react.TouchEventHandler<HTMLHeadingElement> | undefined;
    onTouchCancelCapture?: react.TouchEventHandler<HTMLHeadingElement> | undefined;
    onTouchEnd?: react.TouchEventHandler<HTMLHeadingElement> | undefined;
    onTouchEndCapture?: react.TouchEventHandler<HTMLHeadingElement> | undefined;
    onTouchMove?: react.TouchEventHandler<HTMLHeadingElement> | undefined;
    onTouchMoveCapture?: react.TouchEventHandler<HTMLHeadingElement> | undefined;
    onTouchStart?: react.TouchEventHandler<HTMLHeadingElement> | undefined;
    onTouchStartCapture?: react.TouchEventHandler<HTMLHeadingElement> | undefined;
    onPointerDown?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerDownCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerMove?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerMoveCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerUp?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerUpCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerCancel?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerCancelCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerEnter?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerLeave?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerOver?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerOverCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerOut?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerOutCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onGotPointerCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onGotPointerCaptureCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onLostPointerCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onLostPointerCaptureCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onScroll?: react.UIEventHandler<HTMLHeadingElement> | undefined;
    onScrollCapture?: react.UIEventHandler<HTMLHeadingElement> | undefined;
    onWheel?: react.WheelEventHandler<HTMLHeadingElement> | undefined;
    onWheelCapture?: react.WheelEventHandler<HTMLHeadingElement> | undefined;
    onAnimationStart?: react.AnimationEventHandler<HTMLHeadingElement> | undefined;
    onAnimationStartCapture?: react.AnimationEventHandler<HTMLHeadingElement> | undefined;
    onAnimationEnd?: react.AnimationEventHandler<HTMLHeadingElement> | undefined;
    onAnimationEndCapture?: react.AnimationEventHandler<HTMLHeadingElement> | undefined;
    onAnimationIteration?: react.AnimationEventHandler<HTMLHeadingElement> | undefined;
    onAnimationIterationCapture?: react.AnimationEventHandler<HTMLHeadingElement> | undefined;
    onTransitionEnd?: react.TransitionEventHandler<HTMLHeadingElement> | undefined;
    onTransitionEndCapture?: react.TransitionEventHandler<HTMLHeadingElement> | undefined;
} & react.RefAttributes<HTMLHeadingElement>>;

declare const H6: react.ForwardRefExoticComponent<{
    as?: react.ElementType | undefined;
    theme?: Theme | undefined;
    align?: Alignment | undefined;
    border?: boolean | BorderItemSide | BorderItem | BorderItem[] | undefined;
    color?: VariantWithTones | undefined;
    children: react.ReactNode;
    light?: boolean | undefined;
    margin?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    mb?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    ml?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mr?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mt?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mx?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    my?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    italic?: boolean | undefined;
    letterSpacing?: csstype.Property.LetterSpacing<0 | (string & {})> | undefined;
    lineHeight?: csstype.Property.LineHeight<0 | (string & {})> | undefined;
    textDecoration?: csstype.Property.TextDecoration<0 | (string & {})> | undefined;
    textTransform?: csstype.Property.TextTransform | undefined;
    wordSpacing?: csstype.Property.WordSpacing<0 | (string & {})> | undefined;
    list?: string | undefined;
    download?: any;
    key?: react.Key | null | undefined;
    style?: react.CSSProperties | undefined;
    name?: string | undefined;
    hidden?: boolean | undefined;
    start?: number | undefined;
    height?: string | number | undefined;
    width?: string | number | undefined;
    wrap?: string | undefined;
    content?: string | undefined;
    readOnly?: boolean | undefined;
    low?: number | undefined;
    high?: number | undefined;
    cite?: string | undefined;
    data?: string | undefined;
    form?: string | undefined;
    label?: string | undefined;
    slot?: string | undefined;
    span?: number | undefined;
    summary?: string | undefined;
    title?: string | undefined;
    pattern?: string | undefined;
    prefix?: string | undefined;
    type?: string | undefined;
    disabled?: boolean | undefined;
    value?: string | number | readonly string[] | undefined;
    accept?: string | undefined;
    acceptCharset?: string | undefined;
    action?: string | undefined;
    allowFullScreen?: boolean | undefined;
    allowTransparency?: boolean | undefined;
    alt?: string | undefined;
    async?: boolean | undefined;
    autoComplete?: string | undefined;
    autoPlay?: boolean | undefined;
    capture?: boolean | "user" | "environment" | undefined;
    cellPadding?: string | number | undefined;
    cellSpacing?: string | number | undefined;
    charSet?: string | undefined;
    challenge?: string | undefined;
    checked?: boolean | undefined;
    classID?: string | undefined;
    cols?: number | undefined;
    colSpan?: number | undefined;
    controls?: boolean | undefined;
    coords?: string | undefined;
    crossOrigin?: "" | "anonymous" | "use-credentials" | undefined;
    dateTime?: string | undefined;
    default?: boolean | undefined;
    defer?: boolean | undefined;
    encType?: string | undefined;
    formAction?: string | undefined;
    formEncType?: string | undefined;
    formMethod?: string | undefined;
    formNoValidate?: boolean | undefined;
    formTarget?: string | undefined;
    frameBorder?: string | number | undefined;
    headers?: string | undefined;
    href?: string | undefined;
    hrefLang?: string | undefined;
    htmlFor?: string | undefined;
    httpEquiv?: string | undefined;
    integrity?: string | undefined;
    keyParams?: string | undefined;
    keyType?: string | undefined;
    kind?: string | undefined;
    loop?: boolean | undefined;
    manifest?: string | undefined;
    marginHeight?: number | undefined;
    marginWidth?: number | undefined;
    max?: string | number | undefined;
    maxLength?: number | undefined;
    media?: string | undefined;
    mediaGroup?: string | undefined;
    method?: string | undefined;
    min?: string | number | undefined;
    minLength?: number | undefined;
    multiple?: boolean | undefined;
    muted?: boolean | undefined;
    noValidate?: boolean | undefined;
    open?: boolean | undefined;
    optimum?: number | undefined;
    placeholder?: string | undefined;
    playsInline?: boolean | undefined;
    poster?: string | undefined;
    preload?: string | undefined;
    required?: boolean | undefined;
    reversed?: boolean | undefined;
    rows?: number | undefined;
    rowSpan?: number | undefined;
    sandbox?: string | undefined;
    scope?: string | undefined;
    scoped?: boolean | undefined;
    scrolling?: string | undefined;
    seamless?: boolean | undefined;
    selected?: boolean | undefined;
    shape?: string | undefined;
    sizes?: string | undefined;
    src?: string | undefined;
    srcDoc?: string | undefined;
    srcLang?: string | undefined;
    srcSet?: string | undefined;
    step?: string | number | undefined;
    target?: string | undefined;
    useMap?: string | undefined;
    wmode?: string | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    autoFocus?: boolean | undefined;
    className?: string | undefined;
    contentEditable?: "inherit" | (boolean | "false" | "true") | "plaintext-only" | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "false" | "true") | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    nonce?: string | undefined;
    spellCheck?: (boolean | "false" | "true") | undefined;
    tabIndex?: number | undefined;
    translate?: "yes" | "no" | undefined;
    radioGroup?: string | undefined;
    role?: react.AriaRole | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    property?: string | undefined;
    rel?: string | undefined;
    resource?: string | undefined;
    rev?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "search" | "email" | "tel" | "text" | "none" | "url" | "numeric" | "decimal" | undefined;
    is?: string | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: (boolean | "false" | "true") | undefined;
    "aria-autocomplete"?: "list" | "none" | "inline" | "both" | undefined;
    "aria-braillelabel"?: string | undefined;
    "aria-brailleroledescription"?: string | undefined;
    "aria-busy"?: (boolean | "false" | "true") | undefined;
    "aria-checked"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colindextext"?: string | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "date" | "time" | "location" | "step" | "page" | "false" | "true" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-description"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: (boolean | "false" | "true") | undefined;
    "aria-dropeffect"?: "copy" | "link" | "none" | "move" | "execute" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: (boolean | "false" | "true") | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: (boolean | "false" | "true") | undefined;
    "aria-haspopup"?: boolean | "menu" | "tree" | "grid" | "dialog" | "listbox" | "false" | "true" | undefined;
    "aria-hidden"?: (boolean | "false" | "true") | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: (boolean | "false" | "true") | undefined;
    "aria-multiline"?: (boolean | "false" | "true") | undefined;
    "aria-multiselectable"?: (boolean | "false" | "true") | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-readonly"?: (boolean | "false" | "true") | undefined;
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    "aria-required"?: (boolean | "false" | "true") | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowindextext"?: string | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: (boolean | "false" | "true") | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    } | undefined;
    onCopy?: react.ClipboardEventHandler<HTMLHeadingElement> | undefined;
    onCopyCapture?: react.ClipboardEventHandler<HTMLHeadingElement> | undefined;
    onCut?: react.ClipboardEventHandler<HTMLHeadingElement> | undefined;
    onCutCapture?: react.ClipboardEventHandler<HTMLHeadingElement> | undefined;
    onPaste?: react.ClipboardEventHandler<HTMLHeadingElement> | undefined;
    onPasteCapture?: react.ClipboardEventHandler<HTMLHeadingElement> | undefined;
    onCompositionEnd?: react.CompositionEventHandler<HTMLHeadingElement> | undefined;
    onCompositionEndCapture?: react.CompositionEventHandler<HTMLHeadingElement> | undefined;
    onCompositionStart?: react.CompositionEventHandler<HTMLHeadingElement> | undefined;
    onCompositionStartCapture?: react.CompositionEventHandler<HTMLHeadingElement> | undefined;
    onCompositionUpdate?: react.CompositionEventHandler<HTMLHeadingElement> | undefined;
    onCompositionUpdateCapture?: react.CompositionEventHandler<HTMLHeadingElement> | undefined;
    onFocus?: react.FocusEventHandler<HTMLHeadingElement> | undefined;
    onFocusCapture?: react.FocusEventHandler<HTMLHeadingElement> | undefined;
    onBlur?: react.FocusEventHandler<HTMLHeadingElement> | undefined;
    onBlurCapture?: react.FocusEventHandler<HTMLHeadingElement> | undefined;
    onChange?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onChangeCapture?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onBeforeInput?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onBeforeInputCapture?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onInput?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onInputCapture?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onReset?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onResetCapture?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onSubmit?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onSubmitCapture?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onInvalid?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onInvalidCapture?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onLoad?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onLoadCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onError?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onErrorCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onKeyDown?: react.KeyboardEventHandler<HTMLHeadingElement> | undefined;
    onKeyDownCapture?: react.KeyboardEventHandler<HTMLHeadingElement> | undefined;
    onKeyPress?: react.KeyboardEventHandler<HTMLHeadingElement> | undefined;
    onKeyPressCapture?: react.KeyboardEventHandler<HTMLHeadingElement> | undefined;
    onKeyUp?: react.KeyboardEventHandler<HTMLHeadingElement> | undefined;
    onKeyUpCapture?: react.KeyboardEventHandler<HTMLHeadingElement> | undefined;
    onAbort?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onAbortCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onCanPlay?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onCanPlayCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onCanPlayThrough?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onCanPlayThroughCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onDurationChange?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onDurationChangeCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onEmptied?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onEmptiedCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onEncrypted?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onEncryptedCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onEnded?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onEndedCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onLoadedData?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onLoadedDataCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onLoadedMetadata?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onLoadedMetadataCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onLoadStart?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onLoadStartCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onPause?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onPauseCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onPlay?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onPlayCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onPlaying?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onPlayingCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onProgress?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onProgressCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onRateChange?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onRateChangeCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onResize?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onResizeCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onSeeked?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onSeekedCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onSeeking?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onSeekingCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onStalled?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onStalledCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onSuspend?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onSuspendCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onTimeUpdate?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onTimeUpdateCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onVolumeChange?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onVolumeChangeCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onWaiting?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onWaitingCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onAuxClick?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onAuxClickCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onClick?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onClickCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onContextMenu?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onContextMenuCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onDoubleClick?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onDoubleClickCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onDrag?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragCapture?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragEnd?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragEndCapture?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragEnter?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragEnterCapture?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragExit?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragExitCapture?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragLeave?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragLeaveCapture?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragOver?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragOverCapture?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragStart?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragStartCapture?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDrop?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDropCapture?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onMouseDown?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseDownCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseEnter?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseLeave?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseMove?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseMoveCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseOut?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseOutCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseOver?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseOverCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseUp?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseUpCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onSelect?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onSelectCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onTouchCancel?: react.TouchEventHandler<HTMLHeadingElement> | undefined;
    onTouchCancelCapture?: react.TouchEventHandler<HTMLHeadingElement> | undefined;
    onTouchEnd?: react.TouchEventHandler<HTMLHeadingElement> | undefined;
    onTouchEndCapture?: react.TouchEventHandler<HTMLHeadingElement> | undefined;
    onTouchMove?: react.TouchEventHandler<HTMLHeadingElement> | undefined;
    onTouchMoveCapture?: react.TouchEventHandler<HTMLHeadingElement> | undefined;
    onTouchStart?: react.TouchEventHandler<HTMLHeadingElement> | undefined;
    onTouchStartCapture?: react.TouchEventHandler<HTMLHeadingElement> | undefined;
    onPointerDown?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerDownCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerMove?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerMoveCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerUp?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerUpCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerCancel?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerCancelCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerEnter?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerLeave?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerOver?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerOverCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerOut?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerOutCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onGotPointerCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onGotPointerCaptureCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onLostPointerCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onLostPointerCaptureCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onScroll?: react.UIEventHandler<HTMLHeadingElement> | undefined;
    onScrollCapture?: react.UIEventHandler<HTMLHeadingElement> | undefined;
    onWheel?: react.WheelEventHandler<HTMLHeadingElement> | undefined;
    onWheelCapture?: react.WheelEventHandler<HTMLHeadingElement> | undefined;
    onAnimationStart?: react.AnimationEventHandler<HTMLHeadingElement> | undefined;
    onAnimationStartCapture?: react.AnimationEventHandler<HTMLHeadingElement> | undefined;
    onAnimationEnd?: react.AnimationEventHandler<HTMLHeadingElement> | undefined;
    onAnimationEndCapture?: react.AnimationEventHandler<HTMLHeadingElement> | undefined;
    onAnimationIteration?: react.AnimationEventHandler<HTMLHeadingElement> | undefined;
    onAnimationIterationCapture?: react.AnimationEventHandler<HTMLHeadingElement> | undefined;
    onTransitionEnd?: react.TransitionEventHandler<HTMLHeadingElement> | undefined;
    onTransitionEndCapture?: react.TransitionEventHandler<HTMLHeadingElement> | undefined;
} & react.RefAttributes<HTMLHeadingElement>>;

declare const Jumbo: react.ForwardRefExoticComponent<{
    as?: react.ElementType | undefined;
    theme?: Theme | undefined;
    align?: Alignment | undefined;
    border?: boolean | BorderItemSide | BorderItem | BorderItem[] | undefined;
    color?: VariantWithTones | undefined;
    children: react.ReactNode;
    light?: boolean | undefined;
    margin?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    mb?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    ml?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mr?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mt?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mx?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    my?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    italic?: boolean | undefined;
    letterSpacing?: csstype.Property.LetterSpacing<0 | (string & {})> | undefined;
    lineHeight?: csstype.Property.LineHeight<0 | (string & {})> | undefined;
    textDecoration?: csstype.Property.TextDecoration<0 | (string & {})> | undefined;
    textTransform?: csstype.Property.TextTransform | undefined;
    wordSpacing?: csstype.Property.WordSpacing<0 | (string & {})> | undefined;
    large?: boolean | undefined;
    list?: string | undefined;
    download?: any;
    key?: react.Key | null | undefined;
    style?: react.CSSProperties | undefined;
    name?: string | undefined;
    hidden?: boolean | undefined;
    start?: number | undefined;
    height?: string | number | undefined;
    width?: string | number | undefined;
    wrap?: string | undefined;
    content?: string | undefined;
    readOnly?: boolean | undefined;
    low?: number | undefined;
    high?: number | undefined;
    cite?: string | undefined;
    data?: string | undefined;
    form?: string | undefined;
    label?: string | undefined;
    slot?: string | undefined;
    span?: number | undefined;
    summary?: string | undefined;
    title?: string | undefined;
    pattern?: string | undefined;
    prefix?: string | undefined;
    type?: string | undefined;
    disabled?: boolean | undefined;
    value?: string | number | readonly string[] | undefined;
    accept?: string | undefined;
    acceptCharset?: string | undefined;
    action?: string | undefined;
    allowFullScreen?: boolean | undefined;
    allowTransparency?: boolean | undefined;
    alt?: string | undefined;
    async?: boolean | undefined;
    autoComplete?: string | undefined;
    autoPlay?: boolean | undefined;
    capture?: boolean | "user" | "environment" | undefined;
    cellPadding?: string | number | undefined;
    cellSpacing?: string | number | undefined;
    charSet?: string | undefined;
    challenge?: string | undefined;
    checked?: boolean | undefined;
    classID?: string | undefined;
    cols?: number | undefined;
    colSpan?: number | undefined;
    controls?: boolean | undefined;
    coords?: string | undefined;
    crossOrigin?: "" | "anonymous" | "use-credentials" | undefined;
    dateTime?: string | undefined;
    default?: boolean | undefined;
    defer?: boolean | undefined;
    encType?: string | undefined;
    formAction?: string | undefined;
    formEncType?: string | undefined;
    formMethod?: string | undefined;
    formNoValidate?: boolean | undefined;
    formTarget?: string | undefined;
    frameBorder?: string | number | undefined;
    headers?: string | undefined;
    href?: string | undefined;
    hrefLang?: string | undefined;
    htmlFor?: string | undefined;
    httpEquiv?: string | undefined;
    integrity?: string | undefined;
    keyParams?: string | undefined;
    keyType?: string | undefined;
    kind?: string | undefined;
    loop?: boolean | undefined;
    manifest?: string | undefined;
    marginHeight?: number | undefined;
    marginWidth?: number | undefined;
    max?: string | number | undefined;
    maxLength?: number | undefined;
    media?: string | undefined;
    mediaGroup?: string | undefined;
    method?: string | undefined;
    min?: string | number | undefined;
    minLength?: number | undefined;
    multiple?: boolean | undefined;
    muted?: boolean | undefined;
    noValidate?: boolean | undefined;
    open?: boolean | undefined;
    optimum?: number | undefined;
    placeholder?: string | undefined;
    playsInline?: boolean | undefined;
    poster?: string | undefined;
    preload?: string | undefined;
    required?: boolean | undefined;
    reversed?: boolean | undefined;
    rows?: number | undefined;
    rowSpan?: number | undefined;
    sandbox?: string | undefined;
    scope?: string | undefined;
    scoped?: boolean | undefined;
    scrolling?: string | undefined;
    seamless?: boolean | undefined;
    selected?: boolean | undefined;
    shape?: string | undefined;
    sizes?: string | undefined;
    src?: string | undefined;
    srcDoc?: string | undefined;
    srcLang?: string | undefined;
    srcSet?: string | undefined;
    step?: string | number | undefined;
    target?: string | undefined;
    useMap?: string | undefined;
    wmode?: string | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    autoFocus?: boolean | undefined;
    className?: string | undefined;
    contentEditable?: "inherit" | (boolean | "false" | "true") | "plaintext-only" | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "false" | "true") | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    nonce?: string | undefined;
    spellCheck?: (boolean | "false" | "true") | undefined;
    tabIndex?: number | undefined;
    translate?: "yes" | "no" | undefined;
    radioGroup?: string | undefined;
    role?: react.AriaRole | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    property?: string | undefined;
    rel?: string | undefined;
    resource?: string | undefined;
    rev?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "search" | "email" | "tel" | "text" | "none" | "url" | "numeric" | "decimal" | undefined;
    is?: string | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: (boolean | "false" | "true") | undefined;
    "aria-autocomplete"?: "list" | "none" | "inline" | "both" | undefined;
    "aria-braillelabel"?: string | undefined;
    "aria-brailleroledescription"?: string | undefined;
    "aria-busy"?: (boolean | "false" | "true") | undefined;
    "aria-checked"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colindextext"?: string | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "date" | "time" | "location" | "step" | "page" | "false" | "true" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-description"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: (boolean | "false" | "true") | undefined;
    "aria-dropeffect"?: "copy" | "link" | "none" | "move" | "execute" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: (boolean | "false" | "true") | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: (boolean | "false" | "true") | undefined;
    "aria-haspopup"?: boolean | "menu" | "tree" | "grid" | "dialog" | "listbox" | "false" | "true" | undefined;
    "aria-hidden"?: (boolean | "false" | "true") | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: (boolean | "false" | "true") | undefined;
    "aria-multiline"?: (boolean | "false" | "true") | undefined;
    "aria-multiselectable"?: (boolean | "false" | "true") | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-readonly"?: (boolean | "false" | "true") | undefined;
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    "aria-required"?: (boolean | "false" | "true") | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowindextext"?: string | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: (boolean | "false" | "true") | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    } | undefined;
    onCopy?: react.ClipboardEventHandler<HTMLHeadingElement> | undefined;
    onCopyCapture?: react.ClipboardEventHandler<HTMLHeadingElement> | undefined;
    onCut?: react.ClipboardEventHandler<HTMLHeadingElement> | undefined;
    onCutCapture?: react.ClipboardEventHandler<HTMLHeadingElement> | undefined;
    onPaste?: react.ClipboardEventHandler<HTMLHeadingElement> | undefined;
    onPasteCapture?: react.ClipboardEventHandler<HTMLHeadingElement> | undefined;
    onCompositionEnd?: react.CompositionEventHandler<HTMLHeadingElement> | undefined;
    onCompositionEndCapture?: react.CompositionEventHandler<HTMLHeadingElement> | undefined;
    onCompositionStart?: react.CompositionEventHandler<HTMLHeadingElement> | undefined;
    onCompositionStartCapture?: react.CompositionEventHandler<HTMLHeadingElement> | undefined;
    onCompositionUpdate?: react.CompositionEventHandler<HTMLHeadingElement> | undefined;
    onCompositionUpdateCapture?: react.CompositionEventHandler<HTMLHeadingElement> | undefined;
    onFocus?: react.FocusEventHandler<HTMLHeadingElement> | undefined;
    onFocusCapture?: react.FocusEventHandler<HTMLHeadingElement> | undefined;
    onBlur?: react.FocusEventHandler<HTMLHeadingElement> | undefined;
    onBlurCapture?: react.FocusEventHandler<HTMLHeadingElement> | undefined;
    onChange?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onChangeCapture?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onBeforeInput?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onBeforeInputCapture?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onInput?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onInputCapture?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onReset?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onResetCapture?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onSubmit?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onSubmitCapture?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onInvalid?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onInvalidCapture?: react.FormEventHandler<HTMLHeadingElement> | undefined;
    onLoad?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onLoadCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onError?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onErrorCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onKeyDown?: react.KeyboardEventHandler<HTMLHeadingElement> | undefined;
    onKeyDownCapture?: react.KeyboardEventHandler<HTMLHeadingElement> | undefined;
    onKeyPress?: react.KeyboardEventHandler<HTMLHeadingElement> | undefined;
    onKeyPressCapture?: react.KeyboardEventHandler<HTMLHeadingElement> | undefined;
    onKeyUp?: react.KeyboardEventHandler<HTMLHeadingElement> | undefined;
    onKeyUpCapture?: react.KeyboardEventHandler<HTMLHeadingElement> | undefined;
    onAbort?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onAbortCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onCanPlay?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onCanPlayCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onCanPlayThrough?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onCanPlayThroughCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onDurationChange?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onDurationChangeCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onEmptied?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onEmptiedCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onEncrypted?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onEncryptedCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onEnded?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onEndedCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onLoadedData?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onLoadedDataCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onLoadedMetadata?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onLoadedMetadataCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onLoadStart?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onLoadStartCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onPause?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onPauseCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onPlay?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onPlayCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onPlaying?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onPlayingCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onProgress?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onProgressCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onRateChange?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onRateChangeCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onResize?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onResizeCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onSeeked?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onSeekedCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onSeeking?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onSeekingCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onStalled?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onStalledCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onSuspend?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onSuspendCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onTimeUpdate?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onTimeUpdateCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onVolumeChange?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onVolumeChangeCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onWaiting?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onWaitingCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onAuxClick?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onAuxClickCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onClick?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onClickCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onContextMenu?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onContextMenuCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onDoubleClick?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onDoubleClickCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onDrag?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragCapture?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragEnd?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragEndCapture?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragEnter?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragEnterCapture?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragExit?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragExitCapture?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragLeave?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragLeaveCapture?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragOver?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragOverCapture?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragStart?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDragStartCapture?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDrop?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onDropCapture?: react.DragEventHandler<HTMLHeadingElement> | undefined;
    onMouseDown?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseDownCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseEnter?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseLeave?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseMove?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseMoveCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseOut?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseOutCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseOver?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseOverCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseUp?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onMouseUpCapture?: react.MouseEventHandler<HTMLHeadingElement> | undefined;
    onSelect?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onSelectCapture?: react.ReactEventHandler<HTMLHeadingElement> | undefined;
    onTouchCancel?: react.TouchEventHandler<HTMLHeadingElement> | undefined;
    onTouchCancelCapture?: react.TouchEventHandler<HTMLHeadingElement> | undefined;
    onTouchEnd?: react.TouchEventHandler<HTMLHeadingElement> | undefined;
    onTouchEndCapture?: react.TouchEventHandler<HTMLHeadingElement> | undefined;
    onTouchMove?: react.TouchEventHandler<HTMLHeadingElement> | undefined;
    onTouchMoveCapture?: react.TouchEventHandler<HTMLHeadingElement> | undefined;
    onTouchStart?: react.TouchEventHandler<HTMLHeadingElement> | undefined;
    onTouchStartCapture?: react.TouchEventHandler<HTMLHeadingElement> | undefined;
    onPointerDown?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerDownCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerMove?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerMoveCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerUp?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerUpCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerCancel?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerCancelCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerEnter?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerLeave?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerOver?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerOverCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerOut?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onPointerOutCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onGotPointerCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onGotPointerCaptureCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onLostPointerCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onLostPointerCaptureCapture?: react.PointerEventHandler<HTMLHeadingElement> | undefined;
    onScroll?: react.UIEventHandler<HTMLHeadingElement> | undefined;
    onScrollCapture?: react.UIEventHandler<HTMLHeadingElement> | undefined;
    onWheel?: react.WheelEventHandler<HTMLHeadingElement> | undefined;
    onWheelCapture?: react.WheelEventHandler<HTMLHeadingElement> | undefined;
    onAnimationStart?: react.AnimationEventHandler<HTMLHeadingElement> | undefined;
    onAnimationStartCapture?: react.AnimationEventHandler<HTMLHeadingElement> | undefined;
    onAnimationEnd?: react.AnimationEventHandler<HTMLHeadingElement> | undefined;
    onAnimationEndCapture?: react.AnimationEventHandler<HTMLHeadingElement> | undefined;
    onAnimationIteration?: react.AnimationEventHandler<HTMLHeadingElement> | undefined;
    onAnimationIterationCapture?: react.AnimationEventHandler<HTMLHeadingElement> | undefined;
    onTransitionEnd?: react.TransitionEventHandler<HTMLHeadingElement> | undefined;
    onTransitionEndCapture?: react.TransitionEventHandler<HTMLHeadingElement> | undefined;
} & react.RefAttributes<HTMLHeadingElement>>;

declare const List: react.ForwardRefExoticComponent<{
    borderColor?: VariantWithTones | undefined;
    direction?: Direction | undefined;
    hideBorder?: boolean | undefined;
    hideDivider?: boolean | undefined;
    size?: "sm" | "md" | "lg" | undefined;
    as?: react.ElementType | undefined;
    theme?: Theme | undefined;
    children: react.ReactNode;
    opacity?: number | csstype.Property.Opacity | undefined;
    overflow?: csstype.Property.Overflow | undefined;
    pointerEvents?: csstype.Property.PointerEvents | undefined;
    textAlign?: csstype.Property.TextAlign | undefined;
    transform?: csstype.Property.Transform | undefined;
    transformOrigin?: csstype.Property.TransformOrigin<0 | (string & {})> | undefined;
    transition?: csstype.Property.Transition<string & {}> | undefined;
    display?: csstype.Property.Display | undefined;
    height?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | undefined;
    maxHeight?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "none" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "-webkit-min-content" | "intrinsic" | undefined;
    maxWidth?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "none" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "-webkit-min-content" | "intrinsic" | undefined;
    minHeight?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "-webkit-min-content" | "intrinsic" | undefined;
    minWidth?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "-webkit-min-content" | "intrinsic" | "-webkit-fill-available" | "min-intrinsic" | undefined;
    width?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "intrinsic" | "min-intrinsic" | undefined;
    margin?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    mb?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    ml?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mr?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mt?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mx?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    my?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    radius?: false | "sm" | "md" | "lg" | "xs" | "xl" | "xxs" | "round" | {
        bottom?: "sm" | "md" | "lg" | "xs" | "xl" | "xxs" | "round" | undefined;
        left?: "sm" | "md" | "lg" | "xs" | "xl" | "xxs" | "round" | undefined;
        right?: "sm" | "md" | "lg" | "xs" | "xl" | "xxs" | "round" | undefined;
        top?: "sm" | "md" | "lg" | "xs" | "xl" | "xxs" | "round" | undefined;
    } | undefined;
    shadow?: false | "low" | "mid" | "high" | undefined;
    list?: string | undefined;
    download?: any;
    key?: react.Key | null | undefined;
    style?: react.CSSProperties | undefined;
    name?: string | undefined;
    color?: string | undefined;
    hidden?: boolean | undefined;
    start?: number | undefined;
    wrap?: string | undefined;
    content?: string | undefined;
    readOnly?: boolean | undefined;
    low?: number | undefined;
    high?: number | undefined;
    cite?: string | undefined;
    data?: string | undefined;
    form?: string | undefined;
    label?: string | undefined;
    slot?: string | undefined;
    span?: number | undefined;
    summary?: string | undefined;
    title?: string | undefined;
    pattern?: string | undefined;
    prefix?: string | undefined;
    type?: string | undefined;
    disabled?: boolean | undefined;
    value?: string | number | readonly string[] | undefined;
    accept?: string | undefined;
    acceptCharset?: string | undefined;
    action?: string | undefined;
    allowFullScreen?: boolean | undefined;
    allowTransparency?: boolean | undefined;
    alt?: string | undefined;
    async?: boolean | undefined;
    autoComplete?: string | undefined;
    autoPlay?: boolean | undefined;
    capture?: boolean | "user" | "environment" | undefined;
    cellPadding?: string | number | undefined;
    cellSpacing?: string | number | undefined;
    charSet?: string | undefined;
    challenge?: string | undefined;
    checked?: boolean | undefined;
    classID?: string | undefined;
    cols?: number | undefined;
    colSpan?: number | undefined;
    controls?: boolean | undefined;
    coords?: string | undefined;
    crossOrigin?: "" | "anonymous" | "use-credentials" | undefined;
    dateTime?: string | undefined;
    default?: boolean | undefined;
    defer?: boolean | undefined;
    encType?: string | undefined;
    formAction?: string | undefined;
    formEncType?: string | undefined;
    formMethod?: string | undefined;
    formNoValidate?: boolean | undefined;
    formTarget?: string | undefined;
    frameBorder?: string | number | undefined;
    headers?: string | undefined;
    href?: string | undefined;
    hrefLang?: string | undefined;
    htmlFor?: string | undefined;
    httpEquiv?: string | undefined;
    integrity?: string | undefined;
    keyParams?: string | undefined;
    keyType?: string | undefined;
    kind?: string | undefined;
    loop?: boolean | undefined;
    manifest?: string | undefined;
    marginHeight?: number | undefined;
    marginWidth?: number | undefined;
    max?: string | number | undefined;
    maxLength?: number | undefined;
    media?: string | undefined;
    mediaGroup?: string | undefined;
    method?: string | undefined;
    min?: string | number | undefined;
    minLength?: number | undefined;
    multiple?: boolean | undefined;
    muted?: boolean | undefined;
    noValidate?: boolean | undefined;
    open?: boolean | undefined;
    optimum?: number | undefined;
    placeholder?: string | undefined;
    playsInline?: boolean | undefined;
    poster?: string | undefined;
    preload?: string | undefined;
    required?: boolean | undefined;
    reversed?: boolean | undefined;
    rows?: number | undefined;
    rowSpan?: number | undefined;
    sandbox?: string | undefined;
    scope?: string | undefined;
    scoped?: boolean | undefined;
    scrolling?: string | undefined;
    seamless?: boolean | undefined;
    selected?: boolean | undefined;
    shape?: string | undefined;
    sizes?: string | undefined;
    src?: string | undefined;
    srcDoc?: string | undefined;
    srcLang?: string | undefined;
    srcSet?: string | undefined;
    step?: string | number | undefined;
    target?: string | undefined;
    useMap?: string | undefined;
    wmode?: string | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    autoFocus?: boolean | undefined;
    className?: string | undefined;
    contentEditable?: "inherit" | (boolean | "false" | "true") | "plaintext-only" | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "false" | "true") | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    nonce?: string | undefined;
    spellCheck?: (boolean | "false" | "true") | undefined;
    tabIndex?: number | undefined;
    translate?: "yes" | "no" | undefined;
    radioGroup?: string | undefined;
    role?: react.AriaRole | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    property?: string | undefined;
    rel?: string | undefined;
    resource?: string | undefined;
    rev?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "search" | "email" | "tel" | "text" | "none" | "url" | "numeric" | "decimal" | undefined;
    is?: string | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: (boolean | "false" | "true") | undefined;
    "aria-autocomplete"?: "list" | "none" | "inline" | "both" | undefined;
    "aria-braillelabel"?: string | undefined;
    "aria-brailleroledescription"?: string | undefined;
    "aria-busy"?: (boolean | "false" | "true") | undefined;
    "aria-checked"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colindextext"?: string | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "date" | "time" | "location" | "step" | "page" | "false" | "true" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-description"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: (boolean | "false" | "true") | undefined;
    "aria-dropeffect"?: "copy" | "link" | "none" | "move" | "execute" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: (boolean | "false" | "true") | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: (boolean | "false" | "true") | undefined;
    "aria-haspopup"?: boolean | "menu" | "tree" | "grid" | "dialog" | "listbox" | "false" | "true" | undefined;
    "aria-hidden"?: (boolean | "false" | "true") | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: (boolean | "false" | "true") | undefined;
    "aria-multiline"?: (boolean | "false" | "true") | undefined;
    "aria-multiselectable"?: (boolean | "false" | "true") | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-readonly"?: (boolean | "false" | "true") | undefined;
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    "aria-required"?: (boolean | "false" | "true") | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowindextext"?: string | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: (boolean | "false" | "true") | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    } | undefined;
    onCopy?: react.ClipboardEventHandler<HTMLUListElement> | undefined;
    onCopyCapture?: react.ClipboardEventHandler<HTMLUListElement> | undefined;
    onCut?: react.ClipboardEventHandler<HTMLUListElement> | undefined;
    onCutCapture?: react.ClipboardEventHandler<HTMLUListElement> | undefined;
    onPaste?: react.ClipboardEventHandler<HTMLUListElement> | undefined;
    onPasteCapture?: react.ClipboardEventHandler<HTMLUListElement> | undefined;
    onCompositionEnd?: react.CompositionEventHandler<HTMLUListElement> | undefined;
    onCompositionEndCapture?: react.CompositionEventHandler<HTMLUListElement> | undefined;
    onCompositionStart?: react.CompositionEventHandler<HTMLUListElement> | undefined;
    onCompositionStartCapture?: react.CompositionEventHandler<HTMLUListElement> | undefined;
    onCompositionUpdate?: react.CompositionEventHandler<HTMLUListElement> | undefined;
    onCompositionUpdateCapture?: react.CompositionEventHandler<HTMLUListElement> | undefined;
    onFocus?: react.FocusEventHandler<HTMLUListElement> | undefined;
    onFocusCapture?: react.FocusEventHandler<HTMLUListElement> | undefined;
    onBlur?: react.FocusEventHandler<HTMLUListElement> | undefined;
    onBlurCapture?: react.FocusEventHandler<HTMLUListElement> | undefined;
    onChange?: react.FormEventHandler<HTMLUListElement> | undefined;
    onChangeCapture?: react.FormEventHandler<HTMLUListElement> | undefined;
    onBeforeInput?: react.FormEventHandler<HTMLUListElement> | undefined;
    onBeforeInputCapture?: react.FormEventHandler<HTMLUListElement> | undefined;
    onInput?: react.FormEventHandler<HTMLUListElement> | undefined;
    onInputCapture?: react.FormEventHandler<HTMLUListElement> | undefined;
    onReset?: react.FormEventHandler<HTMLUListElement> | undefined;
    onResetCapture?: react.FormEventHandler<HTMLUListElement> | undefined;
    onSubmit?: react.FormEventHandler<HTMLUListElement> | undefined;
    onSubmitCapture?: react.FormEventHandler<HTMLUListElement> | undefined;
    onInvalid?: react.FormEventHandler<HTMLUListElement> | undefined;
    onInvalidCapture?: react.FormEventHandler<HTMLUListElement> | undefined;
    onLoad?: react.ReactEventHandler<HTMLUListElement> | undefined;
    onLoadCapture?: react.ReactEventHandler<HTMLUListElement> | undefined;
    onError?: react.ReactEventHandler<HTMLUListElement> | undefined;
    onErrorCapture?: react.ReactEventHandler<HTMLUListElement> | undefined;
    onKeyDown?: react.KeyboardEventHandler<HTMLUListElement> | undefined;
    onKeyDownCapture?: react.KeyboardEventHandler<HTMLUListElement> | undefined;
    onKeyPress?: react.KeyboardEventHandler<HTMLUListElement> | undefined;
    onKeyPressCapture?: react.KeyboardEventHandler<HTMLUListElement> | undefined;
    onKeyUp?: react.KeyboardEventHandler<HTMLUListElement> | undefined;
    onKeyUpCapture?: react.KeyboardEventHandler<HTMLUListElement> | undefined;
    onAbort?: react.ReactEventHandler<HTMLUListElement> | undefined;
    onAbortCapture?: react.ReactEventHandler<HTMLUListElement> | undefined;
    onCanPlay?: react.ReactEventHandler<HTMLUListElement> | undefined;
    onCanPlayCapture?: react.ReactEventHandler<HTMLUListElement> | undefined;
    onCanPlayThrough?: react.ReactEventHandler<HTMLUListElement> | undefined;
    onCanPlayThroughCapture?: react.ReactEventHandler<HTMLUListElement> | undefined;
    onDurationChange?: react.ReactEventHandler<HTMLUListElement> | undefined;
    onDurationChangeCapture?: react.ReactEventHandler<HTMLUListElement> | undefined;
    onEmptied?: react.ReactEventHandler<HTMLUListElement> | undefined;
    onEmptiedCapture?: react.ReactEventHandler<HTMLUListElement> | undefined;
    onEncrypted?: react.ReactEventHandler<HTMLUListElement> | undefined;
    onEncryptedCapture?: react.ReactEventHandler<HTMLUListElement> | undefined;
    onEnded?: react.ReactEventHandler<HTMLUListElement> | undefined;
    onEndedCapture?: react.ReactEventHandler<HTMLUListElement> | undefined;
    onLoadedData?: react.ReactEventHandler<HTMLUListElement> | undefined;
    onLoadedDataCapture?: react.ReactEventHandler<HTMLUListElement> | undefined;
    onLoadedMetadata?: react.ReactEventHandler<HTMLUListElement> | undefined;
    onLoadedMetadataCapture?: react.ReactEventHandler<HTMLUListElement> | undefined;
    onLoadStart?: react.ReactEventHandler<HTMLUListElement> | undefined;
    onLoadStartCapture?: react.ReactEventHandler<HTMLUListElement> | undefined;
    onPause?: react.ReactEventHandler<HTMLUListElement> | undefined;
    onPauseCapture?: react.ReactEventHandler<HTMLUListElement> | undefined;
    onPlay?: react.ReactEventHandler<HTMLUListElement> | undefined;
    onPlayCapture?: react.ReactEventHandler<HTMLUListElement> | undefined;
    onPlaying?: react.ReactEventHandler<HTMLUListElement> | undefined;
    onPlayingCapture?: react.ReactEventHandler<HTMLUListElement> | undefined;
    onProgress?: react.ReactEventHandler<HTMLUListElement> | undefined;
    onProgressCapture?: react.ReactEventHandler<HTMLUListElement> | undefined;
    onRateChange?: react.ReactEventHandler<HTMLUListElement> | undefined;
    onRateChangeCapture?: react.ReactEventHandler<HTMLUListElement> | undefined;
    onResize?: react.ReactEventHandler<HTMLUListElement> | undefined;
    onResizeCapture?: react.ReactEventHandler<HTMLUListElement> | undefined;
    onSeeked?: react.ReactEventHandler<HTMLUListElement> | undefined;
    onSeekedCapture?: react.ReactEventHandler<HTMLUListElement> | undefined;
    onSeeking?: react.ReactEventHandler<HTMLUListElement> | undefined;
    onSeekingCapture?: react.ReactEventHandler<HTMLUListElement> | undefined;
    onStalled?: react.ReactEventHandler<HTMLUListElement> | undefined;
    onStalledCapture?: react.ReactEventHandler<HTMLUListElement> | undefined;
    onSuspend?: react.ReactEventHandler<HTMLUListElement> | undefined;
    onSuspendCapture?: react.ReactEventHandler<HTMLUListElement> | undefined;
    onTimeUpdate?: react.ReactEventHandler<HTMLUListElement> | undefined;
    onTimeUpdateCapture?: react.ReactEventHandler<HTMLUListElement> | undefined;
    onVolumeChange?: react.ReactEventHandler<HTMLUListElement> | undefined;
    onVolumeChangeCapture?: react.ReactEventHandler<HTMLUListElement> | undefined;
    onWaiting?: react.ReactEventHandler<HTMLUListElement> | undefined;
    onWaitingCapture?: react.ReactEventHandler<HTMLUListElement> | undefined;
    onAuxClick?: react.MouseEventHandler<HTMLUListElement> | undefined;
    onAuxClickCapture?: react.MouseEventHandler<HTMLUListElement> | undefined;
    onClick?: react.MouseEventHandler<HTMLUListElement> | undefined;
    onClickCapture?: react.MouseEventHandler<HTMLUListElement> | undefined;
    onContextMenu?: react.MouseEventHandler<HTMLUListElement> | undefined;
    onContextMenuCapture?: react.MouseEventHandler<HTMLUListElement> | undefined;
    onDoubleClick?: react.MouseEventHandler<HTMLUListElement> | undefined;
    onDoubleClickCapture?: react.MouseEventHandler<HTMLUListElement> | undefined;
    onDrag?: react.DragEventHandler<HTMLUListElement> | undefined;
    onDragCapture?: react.DragEventHandler<HTMLUListElement> | undefined;
    onDragEnd?: react.DragEventHandler<HTMLUListElement> | undefined;
    onDragEndCapture?: react.DragEventHandler<HTMLUListElement> | undefined;
    onDragEnter?: react.DragEventHandler<HTMLUListElement> | undefined;
    onDragEnterCapture?: react.DragEventHandler<HTMLUListElement> | undefined;
    onDragExit?: react.DragEventHandler<HTMLUListElement> | undefined;
    onDragExitCapture?: react.DragEventHandler<HTMLUListElement> | undefined;
    onDragLeave?: react.DragEventHandler<HTMLUListElement> | undefined;
    onDragLeaveCapture?: react.DragEventHandler<HTMLUListElement> | undefined;
    onDragOver?: react.DragEventHandler<HTMLUListElement> | undefined;
    onDragOverCapture?: react.DragEventHandler<HTMLUListElement> | undefined;
    onDragStart?: react.DragEventHandler<HTMLUListElement> | undefined;
    onDragStartCapture?: react.DragEventHandler<HTMLUListElement> | undefined;
    onDrop?: react.DragEventHandler<HTMLUListElement> | undefined;
    onDropCapture?: react.DragEventHandler<HTMLUListElement> | undefined;
    onMouseDown?: react.MouseEventHandler<HTMLUListElement> | undefined;
    onMouseDownCapture?: react.MouseEventHandler<HTMLUListElement> | undefined;
    onMouseEnter?: react.MouseEventHandler<HTMLUListElement> | undefined;
    onMouseLeave?: react.MouseEventHandler<HTMLUListElement> | undefined;
    onMouseMove?: react.MouseEventHandler<HTMLUListElement> | undefined;
    onMouseMoveCapture?: react.MouseEventHandler<HTMLUListElement> | undefined;
    onMouseOut?: react.MouseEventHandler<HTMLUListElement> | undefined;
    onMouseOutCapture?: react.MouseEventHandler<HTMLUListElement> | undefined;
    onMouseOver?: react.MouseEventHandler<HTMLUListElement> | undefined;
    onMouseOverCapture?: react.MouseEventHandler<HTMLUListElement> | undefined;
    onMouseUp?: react.MouseEventHandler<HTMLUListElement> | undefined;
    onMouseUpCapture?: react.MouseEventHandler<HTMLUListElement> | undefined;
    onSelect?: react.ReactEventHandler<HTMLUListElement> | undefined;
    onSelectCapture?: react.ReactEventHandler<HTMLUListElement> | undefined;
    onTouchCancel?: react.TouchEventHandler<HTMLUListElement> | undefined;
    onTouchCancelCapture?: react.TouchEventHandler<HTMLUListElement> | undefined;
    onTouchEnd?: react.TouchEventHandler<HTMLUListElement> | undefined;
    onTouchEndCapture?: react.TouchEventHandler<HTMLUListElement> | undefined;
    onTouchMove?: react.TouchEventHandler<HTMLUListElement> | undefined;
    onTouchMoveCapture?: react.TouchEventHandler<HTMLUListElement> | undefined;
    onTouchStart?: react.TouchEventHandler<HTMLUListElement> | undefined;
    onTouchStartCapture?: react.TouchEventHandler<HTMLUListElement> | undefined;
    onPointerDown?: react.PointerEventHandler<HTMLUListElement> | undefined;
    onPointerDownCapture?: react.PointerEventHandler<HTMLUListElement> | undefined;
    onPointerMove?: react.PointerEventHandler<HTMLUListElement> | undefined;
    onPointerMoveCapture?: react.PointerEventHandler<HTMLUListElement> | undefined;
    onPointerUp?: react.PointerEventHandler<HTMLUListElement> | undefined;
    onPointerUpCapture?: react.PointerEventHandler<HTMLUListElement> | undefined;
    onPointerCancel?: react.PointerEventHandler<HTMLUListElement> | undefined;
    onPointerCancelCapture?: react.PointerEventHandler<HTMLUListElement> | undefined;
    onPointerEnter?: react.PointerEventHandler<HTMLUListElement> | undefined;
    onPointerLeave?: react.PointerEventHandler<HTMLUListElement> | undefined;
    onPointerOver?: react.PointerEventHandler<HTMLUListElement> | undefined;
    onPointerOverCapture?: react.PointerEventHandler<HTMLUListElement> | undefined;
    onPointerOut?: react.PointerEventHandler<HTMLUListElement> | undefined;
    onPointerOutCapture?: react.PointerEventHandler<HTMLUListElement> | undefined;
    onGotPointerCapture?: react.PointerEventHandler<HTMLUListElement> | undefined;
    onGotPointerCaptureCapture?: react.PointerEventHandler<HTMLUListElement> | undefined;
    onLostPointerCapture?: react.PointerEventHandler<HTMLUListElement> | undefined;
    onLostPointerCaptureCapture?: react.PointerEventHandler<HTMLUListElement> | undefined;
    onScroll?: react.UIEventHandler<HTMLUListElement> | undefined;
    onScrollCapture?: react.UIEventHandler<HTMLUListElement> | undefined;
    onWheel?: react.WheelEventHandler<HTMLUListElement> | undefined;
    onWheelCapture?: react.WheelEventHandler<HTMLUListElement> | undefined;
    onAnimationStart?: react.AnimationEventHandler<HTMLUListElement> | undefined;
    onAnimationStartCapture?: react.AnimationEventHandler<HTMLUListElement> | undefined;
    onAnimationEnd?: react.AnimationEventHandler<HTMLUListElement> | undefined;
    onAnimationEndCapture?: react.AnimationEventHandler<HTMLUListElement> | undefined;
    onAnimationIteration?: react.AnimationEventHandler<HTMLUListElement> | undefined;
    onAnimationIterationCapture?: react.AnimationEventHandler<HTMLUListElement> | undefined;
    onTransitionEnd?: react.TransitionEventHandler<HTMLUListElement> | undefined;
    onTransitionEndCapture?: react.TransitionEventHandler<HTMLUListElement> | undefined;
} & react.RefAttributes<HTMLUListElement>>;

interface ListItemProps extends Omit<BoxProps, 'direction'>, Pick<ListProps, 'borderColor' | 'direction' | 'hideBorder' | 'hideDivider' | 'size'> {
}
declare function ListItem(props: ListItemProps): react_jsx_runtime.JSX.Element;

declare function Loader(props: LoaderProps): react_jsx_runtime.JSX.Element;
declare namespace Loader {
    var displayName: string;
}

declare function SearchComponent(props: SearchProps): react_jsx_runtime.JSX.Element;
declare const Search: react.MemoExoticComponent<typeof SearchComponent>;

declare const Skeleton: react.ForwardRefExoticComponent<{
    accent?: VariantWithTones | undefined;
    animationDelay?: number | undefined;
    animationDuration?: number | undefined;
    appearDuration?: number | undefined;
    bg?: VariantWithTones | undefined;
    fitContent?: boolean | undefined;
    isLoaded?: boolean | undefined;
    as?: react.ElementType | undefined;
    theme?: Theme | undefined;
    children?: react.ReactNode;
    opacity?: number | csstype.Property.Opacity | undefined;
    overflow?: csstype.Property.Overflow | undefined;
    pointerEvents?: csstype.Property.PointerEvents | undefined;
    textAlign?: csstype.Property.TextAlign | undefined;
    transform?: csstype.Property.Transform | undefined;
    transformOrigin?: csstype.Property.TransformOrigin<0 | (string & {})> | undefined;
    transition?: csstype.Property.Transition<string & {}> | undefined;
    display?: csstype.Property.Display | undefined;
    height?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | undefined;
    maxHeight?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "none" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "-webkit-min-content" | "intrinsic" | undefined;
    maxWidth?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "none" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "-webkit-min-content" | "intrinsic" | undefined;
    minHeight?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "-webkit-min-content" | "intrinsic" | undefined;
    minWidth?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "-webkit-min-content" | "intrinsic" | "-webkit-fill-available" | "min-intrinsic" | undefined;
    width?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "intrinsic" | "min-intrinsic" | undefined;
    margin?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    mb?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    ml?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mr?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mt?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mx?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    my?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    radius?: false | "sm" | "md" | "lg" | "xs" | "xl" | "xxs" | "round" | {
        bottom?: "sm" | "md" | "lg" | "xs" | "xl" | "xxs" | "round" | undefined;
        left?: "sm" | "md" | "lg" | "xs" | "xl" | "xxs" | "round" | undefined;
        right?: "sm" | "md" | "lg" | "xs" | "xl" | "xxs" | "round" | undefined;
        top?: "sm" | "md" | "lg" | "xs" | "xl" | "xxs" | "round" | undefined;
    } | undefined;
    list?: string | undefined;
    download?: any;
    key?: react.Key | null | undefined;
    style?: react.CSSProperties | undefined;
    name?: string | undefined;
    color?: string | undefined;
    hidden?: boolean | undefined;
    start?: number | undefined;
    wrap?: string | undefined;
    content?: string | undefined;
    readOnly?: boolean | undefined;
    low?: number | undefined;
    high?: number | undefined;
    cite?: string | undefined;
    data?: string | undefined;
    form?: string | undefined;
    label?: string | undefined;
    slot?: string | undefined;
    span?: number | undefined;
    summary?: string | undefined;
    title?: string | undefined;
    pattern?: string | undefined;
    prefix?: string | undefined;
    type?: string | undefined;
    disabled?: boolean | undefined;
    value?: string | number | readonly string[] | undefined;
    accept?: string | undefined;
    acceptCharset?: string | undefined;
    action?: string | undefined;
    allowFullScreen?: boolean | undefined;
    allowTransparency?: boolean | undefined;
    alt?: string | undefined;
    async?: boolean | undefined;
    autoComplete?: string | undefined;
    autoPlay?: boolean | undefined;
    capture?: boolean | "user" | "environment" | undefined;
    cellPadding?: string | number | undefined;
    cellSpacing?: string | number | undefined;
    charSet?: string | undefined;
    challenge?: string | undefined;
    checked?: boolean | undefined;
    classID?: string | undefined;
    cols?: number | undefined;
    colSpan?: number | undefined;
    controls?: boolean | undefined;
    coords?: string | undefined;
    crossOrigin?: "" | "anonymous" | "use-credentials" | undefined;
    dateTime?: string | undefined;
    default?: boolean | undefined;
    defer?: boolean | undefined;
    encType?: string | undefined;
    formAction?: string | undefined;
    formEncType?: string | undefined;
    formMethod?: string | undefined;
    formNoValidate?: boolean | undefined;
    formTarget?: string | undefined;
    frameBorder?: string | number | undefined;
    headers?: string | undefined;
    href?: string | undefined;
    hrefLang?: string | undefined;
    htmlFor?: string | undefined;
    httpEquiv?: string | undefined;
    integrity?: string | undefined;
    keyParams?: string | undefined;
    keyType?: string | undefined;
    kind?: string | undefined;
    loop?: boolean | undefined;
    manifest?: string | undefined;
    marginHeight?: number | undefined;
    marginWidth?: number | undefined;
    max?: string | number | undefined;
    maxLength?: number | undefined;
    media?: string | undefined;
    mediaGroup?: string | undefined;
    method?: string | undefined;
    min?: string | number | undefined;
    minLength?: number | undefined;
    multiple?: boolean | undefined;
    muted?: boolean | undefined;
    noValidate?: boolean | undefined;
    open?: boolean | undefined;
    optimum?: number | undefined;
    placeholder?: string | undefined;
    playsInline?: boolean | undefined;
    poster?: string | undefined;
    preload?: string | undefined;
    required?: boolean | undefined;
    reversed?: boolean | undefined;
    rows?: number | undefined;
    rowSpan?: number | undefined;
    sandbox?: string | undefined;
    scope?: string | undefined;
    scoped?: boolean | undefined;
    scrolling?: string | undefined;
    seamless?: boolean | undefined;
    selected?: boolean | undefined;
    shape?: string | undefined;
    sizes?: string | undefined;
    src?: string | undefined;
    srcDoc?: string | undefined;
    srcLang?: string | undefined;
    srcSet?: string | undefined;
    step?: string | number | undefined;
    target?: string | undefined;
    useMap?: string | undefined;
    wmode?: string | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    autoFocus?: boolean | undefined;
    className?: string | undefined;
    contentEditable?: "inherit" | (boolean | "false" | "true") | "plaintext-only" | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "false" | "true") | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    nonce?: string | undefined;
    spellCheck?: (boolean | "false" | "true") | undefined;
    tabIndex?: number | undefined;
    translate?: "yes" | "no" | undefined;
    radioGroup?: string | undefined;
    role?: react.AriaRole | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    property?: string | undefined;
    rel?: string | undefined;
    resource?: string | undefined;
    rev?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "search" | "email" | "tel" | "text" | "none" | "url" | "numeric" | "decimal" | undefined;
    is?: string | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: (boolean | "false" | "true") | undefined;
    "aria-autocomplete"?: "list" | "none" | "inline" | "both" | undefined;
    "aria-braillelabel"?: string | undefined;
    "aria-brailleroledescription"?: string | undefined;
    "aria-busy"?: (boolean | "false" | "true") | undefined;
    "aria-checked"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colindextext"?: string | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "date" | "time" | "location" | "step" | "page" | "false" | "true" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-description"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: (boolean | "false" | "true") | undefined;
    "aria-dropeffect"?: "copy" | "link" | "none" | "move" | "execute" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: (boolean | "false" | "true") | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: (boolean | "false" | "true") | undefined;
    "aria-haspopup"?: boolean | "menu" | "tree" | "grid" | "dialog" | "listbox" | "false" | "true" | undefined;
    "aria-hidden"?: (boolean | "false" | "true") | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: (boolean | "false" | "true") | undefined;
    "aria-multiline"?: (boolean | "false" | "true") | undefined;
    "aria-multiselectable"?: (boolean | "false" | "true") | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-readonly"?: (boolean | "false" | "true") | undefined;
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    "aria-required"?: (boolean | "false" | "true") | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowindextext"?: string | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: (boolean | "false" | "true") | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    } | undefined;
    onCopy?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCopyCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCut?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCutCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onPaste?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onPasteCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCompositionEnd?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionEndCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionStart?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionStartCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionUpdate?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionUpdateCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onFocus?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onFocusCapture?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onBlur?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onBlurCapture?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onChange?: react.FormEventHandler<HTMLDivElement> | undefined;
    onChangeCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onBeforeInput?: react.FormEventHandler<HTMLDivElement> | undefined;
    onBeforeInputCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInput?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInputCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onReset?: react.FormEventHandler<HTMLDivElement> | undefined;
    onResetCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onSubmit?: react.FormEventHandler<HTMLDivElement> | undefined;
    onSubmitCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInvalid?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInvalidCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onLoad?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onError?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onErrorCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onKeyDown?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyDownCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyPress?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyPressCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyUp?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyUpCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onAbort?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onAbortCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlay?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayThrough?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayThroughCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onDurationChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onDurationChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEmptied?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEmptiedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEncrypted?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEncryptedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEnded?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEndedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedData?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedDataCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedMetadata?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedMetadataCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadStart?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadStartCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPause?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPauseCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlay?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlayCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlaying?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlayingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onProgress?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onProgressCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onRateChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onRateChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onResize?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onResizeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeeked?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeekedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeeking?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeekingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onStalled?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onStalledCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSuspend?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSuspendCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onTimeUpdate?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onTimeUpdateCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onVolumeChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onVolumeChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onWaiting?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onWaitingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onAuxClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onAuxClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onContextMenu?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onContextMenuCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onDoubleClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onDoubleClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onDrag?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnd?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEndCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnter?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnterCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragExit?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragExitCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragLeave?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragLeaveCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragOver?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragOverCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragStart?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragStartCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDrop?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDropCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onMouseDown?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseDownCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseEnter?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseLeave?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseMove?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseMoveCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOut?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOutCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOver?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOverCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseUp?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseUpCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onSelect?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSelectCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onTouchCancel?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchCancelCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchEnd?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchEndCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchMove?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchMoveCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchStart?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchStartCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onPointerDown?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerDownCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerMove?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerMoveCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerUp?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerUpCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerCancel?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerCancelCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerEnter?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerLeave?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOver?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOverCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOut?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOutCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onGotPointerCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onGotPointerCaptureCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onLostPointerCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onLostPointerCaptureCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onScroll?: react.UIEventHandler<HTMLDivElement> | undefined;
    onScrollCapture?: react.UIEventHandler<HTMLDivElement> | undefined;
    onWheel?: react.WheelEventHandler<HTMLDivElement> | undefined;
    onWheelCapture?: react.WheelEventHandler<HTMLDivElement> | undefined;
    onAnimationStart?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationStartCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationEnd?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationEndCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationIteration?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationIterationCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onTransitionEnd?: react.TransitionEventHandler<HTMLDivElement> | undefined;
    onTransitionEndCapture?: react.TransitionEventHandler<HTMLDivElement> | undefined;
} & react.RefAttributes<HTMLDivElement>>;

declare const SkeletonCircle: react.ForwardRefExoticComponent<{
    list?: string | undefined;
    download?: any;
    key?: react.Key | null | undefined;
    style?: react.CSSProperties | undefined;
    name?: string | undefined;
    color?: string | undefined;
    hidden?: boolean | undefined;
    opacity?: number | csstype.Property.Opacity | undefined;
    radius?: false | "sm" | "md" | "lg" | "xs" | "xl" | "xxs" | "round" | {
        bottom?: "sm" | "md" | "lg" | "xs" | "xl" | "xxs" | "round" | undefined;
        left?: "sm" | "md" | "lg" | "xs" | "xl" | "xxs" | "round" | undefined;
        right?: "sm" | "md" | "lg" | "xs" | "xl" | "xxs" | "round" | undefined;
        top?: "sm" | "md" | "lg" | "xs" | "xl" | "xxs" | "round" | undefined;
    } | undefined;
    start?: number | undefined;
    height?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | undefined;
    maxHeight?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "none" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "-webkit-min-content" | "intrinsic" | undefined;
    maxWidth?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "none" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "-webkit-min-content" | "intrinsic" | undefined;
    minHeight?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "-webkit-min-content" | "intrinsic" | undefined;
    minWidth?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "-webkit-min-content" | "intrinsic" | "-webkit-fill-available" | "min-intrinsic" | undefined;
    width?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "intrinsic" | "min-intrinsic" | undefined;
    display?: csstype.Property.Display | undefined;
    wrap?: string | undefined;
    content?: string | undefined;
    readOnly?: boolean | undefined;
    overflow?: csstype.Property.Overflow | undefined;
    pointerEvents?: csstype.Property.PointerEvents | undefined;
    textAlign?: csstype.Property.TextAlign | undefined;
    transform?: csstype.Property.Transform | undefined;
    transformOrigin?: csstype.Property.TransformOrigin<0 | (string & {})> | undefined;
    transition?: csstype.Property.Transition<string & {}> | undefined;
    low?: number | undefined;
    high?: number | undefined;
    theme?: Theme | undefined;
    cite?: string | undefined;
    data?: string | undefined;
    form?: string | undefined;
    label?: string | undefined;
    slot?: string | undefined;
    span?: number | undefined;
    summary?: string | undefined;
    title?: string | undefined;
    pattern?: string | undefined;
    prefix?: string | undefined;
    type?: string | undefined;
    disabled?: boolean | undefined;
    value?: string | number | readonly string[] | undefined;
    accept?: string | undefined;
    acceptCharset?: string | undefined;
    action?: string | undefined;
    allowFullScreen?: boolean | undefined;
    allowTransparency?: boolean | undefined;
    alt?: string | undefined;
    as?: react.ElementType | undefined;
    async?: boolean | undefined;
    autoComplete?: string | undefined;
    autoPlay?: boolean | undefined;
    capture?: boolean | "user" | "environment" | undefined;
    cellPadding?: string | number | undefined;
    cellSpacing?: string | number | undefined;
    charSet?: string | undefined;
    challenge?: string | undefined;
    checked?: boolean | undefined;
    classID?: string | undefined;
    cols?: number | undefined;
    colSpan?: number | undefined;
    controls?: boolean | undefined;
    coords?: string | undefined;
    crossOrigin?: "" | "anonymous" | "use-credentials" | undefined;
    dateTime?: string | undefined;
    default?: boolean | undefined;
    defer?: boolean | undefined;
    encType?: string | undefined;
    formAction?: string | undefined;
    formEncType?: string | undefined;
    formMethod?: string | undefined;
    formNoValidate?: boolean | undefined;
    formTarget?: string | undefined;
    frameBorder?: string | number | undefined;
    headers?: string | undefined;
    href?: string | undefined;
    hrefLang?: string | undefined;
    htmlFor?: string | undefined;
    httpEquiv?: string | undefined;
    integrity?: string | undefined;
    keyParams?: string | undefined;
    keyType?: string | undefined;
    kind?: string | undefined;
    loop?: boolean | undefined;
    manifest?: string | undefined;
    marginHeight?: number | undefined;
    marginWidth?: number | undefined;
    max?: string | number | undefined;
    maxLength?: number | undefined;
    media?: string | undefined;
    mediaGroup?: string | undefined;
    method?: string | undefined;
    min?: string | number | undefined;
    minLength?: number | undefined;
    multiple?: boolean | undefined;
    muted?: boolean | undefined;
    noValidate?: boolean | undefined;
    open?: boolean | undefined;
    optimum?: number | undefined;
    placeholder?: string | undefined;
    playsInline?: boolean | undefined;
    poster?: string | undefined;
    preload?: string | undefined;
    required?: boolean | undefined;
    reversed?: boolean | undefined;
    rows?: number | undefined;
    rowSpan?: number | undefined;
    sandbox?: string | undefined;
    scope?: string | undefined;
    scoped?: boolean | undefined;
    scrolling?: string | undefined;
    seamless?: boolean | undefined;
    selected?: boolean | undefined;
    shape?: string | undefined;
    sizes?: string | undefined;
    src?: string | undefined;
    srcDoc?: string | undefined;
    srcLang?: string | undefined;
    srcSet?: string | undefined;
    step?: string | number | undefined;
    target?: string | undefined;
    useMap?: string | undefined;
    wmode?: string | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    autoFocus?: boolean | undefined;
    className?: string | undefined;
    contentEditable?: "inherit" | (boolean | "false" | "true") | "plaintext-only" | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "false" | "true") | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    nonce?: string | undefined;
    spellCheck?: (boolean | "false" | "true") | undefined;
    tabIndex?: number | undefined;
    translate?: "yes" | "no" | undefined;
    radioGroup?: string | undefined;
    role?: react.AriaRole | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    property?: string | undefined;
    rel?: string | undefined;
    resource?: string | undefined;
    rev?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "search" | "email" | "tel" | "text" | "none" | "url" | "numeric" | "decimal" | undefined;
    is?: string | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: (boolean | "false" | "true") | undefined;
    "aria-autocomplete"?: "list" | "none" | "inline" | "both" | undefined;
    "aria-braillelabel"?: string | undefined;
    "aria-brailleroledescription"?: string | undefined;
    "aria-busy"?: (boolean | "false" | "true") | undefined;
    "aria-checked"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colindextext"?: string | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "date" | "time" | "location" | "step" | "page" | "false" | "true" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-description"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: (boolean | "false" | "true") | undefined;
    "aria-dropeffect"?: "copy" | "link" | "none" | "move" | "execute" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: (boolean | "false" | "true") | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: (boolean | "false" | "true") | undefined;
    "aria-haspopup"?: boolean | "menu" | "tree" | "grid" | "dialog" | "listbox" | "false" | "true" | undefined;
    "aria-hidden"?: (boolean | "false" | "true") | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: (boolean | "false" | "true") | undefined;
    "aria-multiline"?: (boolean | "false" | "true") | undefined;
    "aria-multiselectable"?: (boolean | "false" | "true") | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-readonly"?: (boolean | "false" | "true") | undefined;
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    "aria-required"?: (boolean | "false" | "true") | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowindextext"?: string | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: (boolean | "false" | "true") | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    children?: react.ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    } | undefined;
    onCopy?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCopyCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCut?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCutCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onPaste?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onPasteCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCompositionEnd?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionEndCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionStart?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionStartCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionUpdate?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionUpdateCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onFocus?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onFocusCapture?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onBlur?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onBlurCapture?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onChange?: react.FormEventHandler<HTMLDivElement> | undefined;
    onChangeCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onBeforeInput?: react.FormEventHandler<HTMLDivElement> | undefined;
    onBeforeInputCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInput?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInputCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onReset?: react.FormEventHandler<HTMLDivElement> | undefined;
    onResetCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onSubmit?: react.FormEventHandler<HTMLDivElement> | undefined;
    onSubmitCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInvalid?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInvalidCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onLoad?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onError?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onErrorCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onKeyDown?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyDownCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyPress?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyPressCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyUp?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyUpCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onAbort?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onAbortCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlay?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayThrough?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayThroughCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onDurationChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onDurationChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEmptied?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEmptiedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEncrypted?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEncryptedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEnded?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEndedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedData?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedDataCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedMetadata?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedMetadataCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadStart?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadStartCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPause?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPauseCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlay?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlayCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlaying?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlayingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onProgress?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onProgressCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onRateChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onRateChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onResize?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onResizeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeeked?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeekedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeeking?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeekingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onStalled?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onStalledCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSuspend?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSuspendCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onTimeUpdate?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onTimeUpdateCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onVolumeChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onVolumeChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onWaiting?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onWaitingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onAuxClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onAuxClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onContextMenu?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onContextMenuCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onDoubleClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onDoubleClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onDrag?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnd?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEndCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnter?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnterCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragExit?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragExitCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragLeave?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragLeaveCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragOver?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragOverCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragStart?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragStartCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDrop?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDropCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onMouseDown?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseDownCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseEnter?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseLeave?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseMove?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseMoveCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOut?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOutCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOver?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOverCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseUp?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseUpCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onSelect?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSelectCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onTouchCancel?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchCancelCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchEnd?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchEndCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchMove?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchMoveCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchStart?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchStartCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onPointerDown?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerDownCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerMove?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerMoveCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerUp?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerUpCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerCancel?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerCancelCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerEnter?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerLeave?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOver?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOverCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOut?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOutCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onGotPointerCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onGotPointerCaptureCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onLostPointerCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onLostPointerCaptureCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onScroll?: react.UIEventHandler<HTMLDivElement> | undefined;
    onScrollCapture?: react.UIEventHandler<HTMLDivElement> | undefined;
    onWheel?: react.WheelEventHandler<HTMLDivElement> | undefined;
    onWheelCapture?: react.WheelEventHandler<HTMLDivElement> | undefined;
    onAnimationStart?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationStartCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationEnd?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationEndCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationIteration?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationIterationCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onTransitionEnd?: react.TransitionEventHandler<HTMLDivElement> | undefined;
    onTransitionEndCapture?: react.TransitionEventHandler<HTMLDivElement> | undefined;
    accent?: VariantWithTones | undefined;
    animationDelay?: number | undefined;
    animationDuration?: number | undefined;
    margin?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    bg?: VariantWithTones | undefined;
    mb?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    ml?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mr?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mt?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mx?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    my?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    appearDuration?: number | undefined;
    isLoaded?: boolean | undefined;
    size: _gilbarbara_types.StringOrNumber;
} & react.RefAttributes<HTMLDivElement>>;

declare const SkeletonText: react.ForwardRefExoticComponent<{
    list?: string | undefined;
    download?: any;
    key?: react.Key | null | undefined;
    style?: react.CSSProperties | undefined;
    name?: string | undefined;
    color?: string | undefined;
    hidden?: boolean | undefined;
    opacity?: number | csstype.Property.Opacity | undefined;
    radius?: false | "sm" | "md" | "lg" | "xs" | "xl" | "xxs" | "round" | {
        bottom?: "sm" | "md" | "lg" | "xs" | "xl" | "xxs" | "round" | undefined;
        left?: "sm" | "md" | "lg" | "xs" | "xl" | "xxs" | "round" | undefined;
        right?: "sm" | "md" | "lg" | "xs" | "xl" | "xxs" | "round" | undefined;
        top?: "sm" | "md" | "lg" | "xs" | "xl" | "xxs" | "round" | undefined;
    } | undefined;
    start?: number | undefined;
    height?: string | number | undefined;
    maxHeight?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "none" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "-webkit-min-content" | "intrinsic" | undefined;
    maxWidth?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "none" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "-webkit-min-content" | "intrinsic" | undefined;
    minHeight?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "-webkit-min-content" | "intrinsic" | undefined;
    minWidth?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "-webkit-min-content" | "intrinsic" | "-webkit-fill-available" | "min-intrinsic" | undefined;
    width?: number | "inherit" | (string & {}) | "-moz-initial" | "initial" | "revert" | "revert-layer" | "unset" | "auto" | "-moz-max-content" | "-moz-min-content" | "-webkit-fit-content" | "fit-content" | "max-content" | "min-content" | "-moz-fit-content" | "-webkit-max-content" | "intrinsic" | "min-intrinsic" | undefined;
    display?: csstype.Property.Display | undefined;
    wrap?: string | undefined;
    content?: string | undefined;
    readOnly?: boolean | undefined;
    overflow?: csstype.Property.Overflow | undefined;
    pointerEvents?: csstype.Property.PointerEvents | undefined;
    textAlign?: csstype.Property.TextAlign | undefined;
    transform?: csstype.Property.Transform | undefined;
    transformOrigin?: csstype.Property.TransformOrigin<0 | (string & {})> | undefined;
    transition?: csstype.Property.Transition<string & {}> | undefined;
    low?: number | undefined;
    high?: number | undefined;
    theme?: Theme | undefined;
    cite?: string | undefined;
    data?: string | undefined;
    form?: string | undefined;
    label?: string | undefined;
    slot?: string | undefined;
    span?: number | undefined;
    summary?: string | undefined;
    title?: string | undefined;
    pattern?: string | undefined;
    prefix?: string | undefined;
    type?: string | undefined;
    disabled?: boolean | undefined;
    value?: string | number | readonly string[] | undefined;
    accept?: string | undefined;
    acceptCharset?: string | undefined;
    action?: string | undefined;
    allowFullScreen?: boolean | undefined;
    allowTransparency?: boolean | undefined;
    alt?: string | undefined;
    as?: react.ElementType | undefined;
    async?: boolean | undefined;
    autoComplete?: string | undefined;
    autoPlay?: boolean | undefined;
    capture?: boolean | "user" | "environment" | undefined;
    cellPadding?: string | number | undefined;
    cellSpacing?: string | number | undefined;
    charSet?: string | undefined;
    challenge?: string | undefined;
    checked?: boolean | undefined;
    classID?: string | undefined;
    cols?: number | undefined;
    colSpan?: number | undefined;
    controls?: boolean | undefined;
    coords?: string | undefined;
    crossOrigin?: "" | "anonymous" | "use-credentials" | undefined;
    dateTime?: string | undefined;
    default?: boolean | undefined;
    defer?: boolean | undefined;
    encType?: string | undefined;
    formAction?: string | undefined;
    formEncType?: string | undefined;
    formMethod?: string | undefined;
    formNoValidate?: boolean | undefined;
    formTarget?: string | undefined;
    frameBorder?: string | number | undefined;
    headers?: string | undefined;
    href?: string | undefined;
    hrefLang?: string | undefined;
    htmlFor?: string | undefined;
    httpEquiv?: string | undefined;
    integrity?: string | undefined;
    keyParams?: string | undefined;
    keyType?: string | undefined;
    kind?: string | undefined;
    loop?: boolean | undefined;
    manifest?: string | undefined;
    marginHeight?: number | undefined;
    marginWidth?: number | undefined;
    max?: string | number | undefined;
    maxLength?: number | undefined;
    media?: string | undefined;
    mediaGroup?: string | undefined;
    method?: string | undefined;
    min?: string | number | undefined;
    minLength?: number | undefined;
    multiple?: boolean | undefined;
    muted?: boolean | undefined;
    noValidate?: boolean | undefined;
    open?: boolean | undefined;
    optimum?: number | undefined;
    placeholder?: string | undefined;
    playsInline?: boolean | undefined;
    poster?: string | undefined;
    preload?: string | undefined;
    required?: boolean | undefined;
    reversed?: boolean | undefined;
    rows?: number | undefined;
    rowSpan?: number | undefined;
    sandbox?: string | undefined;
    scope?: string | undefined;
    scoped?: boolean | undefined;
    scrolling?: string | undefined;
    seamless?: boolean | undefined;
    selected?: boolean | undefined;
    shape?: string | undefined;
    sizes?: string | undefined;
    src?: string | undefined;
    srcDoc?: string | undefined;
    srcLang?: string | undefined;
    srcSet?: string | undefined;
    step?: string | number | undefined;
    target?: string | undefined;
    useMap?: string | undefined;
    wmode?: string | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    autoFocus?: boolean | undefined;
    className?: string | undefined;
    contentEditable?: "inherit" | (boolean | "false" | "true") | "plaintext-only" | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "false" | "true") | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    nonce?: string | undefined;
    spellCheck?: (boolean | "false" | "true") | undefined;
    tabIndex?: number | undefined;
    translate?: "yes" | "no" | undefined;
    radioGroup?: string | undefined;
    role?: react.AriaRole | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    property?: string | undefined;
    rel?: string | undefined;
    resource?: string | undefined;
    rev?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "search" | "email" | "tel" | "text" | "none" | "url" | "numeric" | "decimal" | undefined;
    is?: string | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: (boolean | "false" | "true") | undefined;
    "aria-autocomplete"?: "list" | "none" | "inline" | "both" | undefined;
    "aria-braillelabel"?: string | undefined;
    "aria-brailleroledescription"?: string | undefined;
    "aria-busy"?: (boolean | "false" | "true") | undefined;
    "aria-checked"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colindextext"?: string | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "date" | "time" | "location" | "step" | "page" | "false" | "true" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-description"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: (boolean | "false" | "true") | undefined;
    "aria-dropeffect"?: "copy" | "link" | "none" | "move" | "execute" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: (boolean | "false" | "true") | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: (boolean | "false" | "true") | undefined;
    "aria-haspopup"?: boolean | "menu" | "tree" | "grid" | "dialog" | "listbox" | "false" | "true" | undefined;
    "aria-hidden"?: (boolean | "false" | "true") | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: (boolean | "false" | "true") | undefined;
    "aria-multiline"?: (boolean | "false" | "true") | undefined;
    "aria-multiselectable"?: (boolean | "false" | "true") | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-readonly"?: (boolean | "false" | "true") | undefined;
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    "aria-required"?: (boolean | "false" | "true") | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowindextext"?: string | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: (boolean | "false" | "true") | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    children?: react.ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    } | undefined;
    onCopy?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCopyCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCut?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCutCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onPaste?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onPasteCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCompositionEnd?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionEndCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionStart?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionStartCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionUpdate?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionUpdateCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onFocus?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onFocusCapture?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onBlur?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onBlurCapture?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onChange?: react.FormEventHandler<HTMLDivElement> | undefined;
    onChangeCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onBeforeInput?: react.FormEventHandler<HTMLDivElement> | undefined;
    onBeforeInputCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInput?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInputCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onReset?: react.FormEventHandler<HTMLDivElement> | undefined;
    onResetCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onSubmit?: react.FormEventHandler<HTMLDivElement> | undefined;
    onSubmitCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInvalid?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInvalidCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onLoad?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onError?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onErrorCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onKeyDown?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyDownCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyPress?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyPressCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyUp?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyUpCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onAbort?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onAbortCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlay?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayThrough?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayThroughCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onDurationChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onDurationChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEmptied?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEmptiedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEncrypted?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEncryptedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEnded?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEndedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedData?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedDataCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedMetadata?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedMetadataCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadStart?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadStartCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPause?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPauseCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlay?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlayCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlaying?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlayingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onProgress?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onProgressCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onRateChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onRateChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onResize?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onResizeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeeked?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeekedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeeking?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeekingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onStalled?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onStalledCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSuspend?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSuspendCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onTimeUpdate?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onTimeUpdateCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onVolumeChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onVolumeChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onWaiting?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onWaitingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onAuxClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onAuxClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onContextMenu?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onContextMenuCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onDoubleClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onDoubleClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onDrag?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnd?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEndCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnter?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnterCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragExit?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragExitCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragLeave?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragLeaveCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragOver?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragOverCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragStart?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragStartCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDrop?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDropCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onMouseDown?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseDownCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseEnter?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseLeave?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseMove?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseMoveCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOut?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOutCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOver?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOverCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseUp?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseUpCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onSelect?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSelectCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onTouchCancel?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchCancelCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchEnd?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchEndCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchMove?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchMoveCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchStart?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchStartCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onPointerDown?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerDownCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerMove?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerMoveCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerUp?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerUpCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerCancel?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerCancelCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerEnter?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerLeave?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOver?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOverCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOut?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOutCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onGotPointerCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onGotPointerCaptureCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onLostPointerCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onLostPointerCaptureCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onScroll?: react.UIEventHandler<HTMLDivElement> | undefined;
    onScrollCapture?: react.UIEventHandler<HTMLDivElement> | undefined;
    onWheel?: react.WheelEventHandler<HTMLDivElement> | undefined;
    onWheelCapture?: react.WheelEventHandler<HTMLDivElement> | undefined;
    onAnimationStart?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationStartCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationEnd?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationEndCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationIteration?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationIterationCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onTransitionEnd?: react.TransitionEventHandler<HTMLDivElement> | undefined;
    onTransitionEndCapture?: react.TransitionEventHandler<HTMLDivElement> | undefined;
    accent?: VariantWithTones | undefined;
    animationDelay?: number | undefined;
    animationDuration?: number | undefined;
    margin?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    bg?: VariantWithTones | undefined;
    mb?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    ml?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mr?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mt?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    mx?: ((0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | "auto") | undefined;
    my?: (0 | "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl") | undefined;
    appearDuration?: number | undefined;
    isLoaded?: boolean | undefined;
    gap?: "sm" | "md" | "lg" | "xs" | "jumbo" | "xl" | "xxs" | "xxl" | "xxxl" | undefined;
    lines?: number | undefined;
} & react.RefAttributes<HTMLDivElement>>;

declare function animateIcon(target: HTMLElement | null, color: VariantWithTones, theme?: Theme): void;
declare const fadeIn: _emotion_react.Keyframes;
declare const fadeOut: _emotion_react.Keyframes;
declare const fadeInOut: _emotion_react.Keyframes;
declare const rotate: _emotion_react.Keyframes;

declare function mergeTheme(customTheme?: PartialDeep<Theme>): Theme;
/**
 * Helper to generate responsive media queries
 */
declare function responsive(rules: ResponsiveInput): _emotion_react.SerializedStyles;

declare function generatePalette(baseColor: string, monochromatic?: boolean): Record<ColorTone, string>;

interface GetContainerStylesOptions {
    responsive?: boolean;
    verticalPadding?: boolean;
}
declare function getContainerStyles(props: WithTheme, options?: GetContainerStylesOptions): _emotion_react.SerializedStyles;

export { Alert, Anchor, AspectRatio, Avatar, Box, BoxCenter, BoxInline, Button, ButtonGroup, ButtonSplit, MenuItem as ButtonSplitItem, MenuSeparator as ButtonSplitSeparator, ButtonUnstyled, Checkbox, ClickOutside, Collapse, ComponentWrapper, Container, CopyToClipboard, DataTable, DatePicker, DatePickerRange, DatePickerSelector, Dialog, Divider, Dropdown, Emoji, Field, Form, FormGroup, Grid, H1, H2, H3, H4, H5, H6, Icon, Input, InputColor, InputFile, Jumbo, Label, List, ListItem, Loader, Menu, MenuItem, MenuSeparator, MenuTitle, Modal, NonIdealState, Page, Pagination, Paragraph, Portal, ProgressBar, props as Props, Quote, Radio, RadioGroup, Search, Select, Skeleton, SkeletonCircle, SkeletonText, Spacer, StatusIndicator, Tab, Tabs, Tag, Text, Textarea, type Theme, Toggle, Tooltip, Truncate, index as Types, animateIcon, fadeIn, fadeInOut, fadeOut, generatePalette, getContainerStyles, icons, mergeTheme, responsive, rotate, theme };
