"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  Alert: () => Alert,
  Anchor: () => Anchor,
  AspectRatio: () => AspectRatio,
  Avatar: () => Avatar,
  Box: () => Box,
  BoxCenter: () => BoxCenter,
  BoxInline: () => BoxInline,
  Button: () => Button,
  ButtonGroup: () => ButtonGroup,
  ButtonSplit: () => ButtonSplit,
  ButtonSplitItem: () => MenuItem,
  ButtonSplitSeparator: () => MenuSeparator,
  ButtonUnstyled: () => ButtonUnstyled,
  Checkbox: () => Checkbox,
  ClickOutside: () => ClickOutside,
  Collapse: () => Collapse,
  ComponentWrapper: () => ComponentWrapper,
  Container: () => Container,
  CopyToClipboard: () => CopyToClipboard,
  DataTable: () => DataTable,
  DatePicker: () => DatePicker,
  DatePickerRange: () => DatePickerRange,
  DatePickerSelector: () => DatePickerSelector,
  Dialog: () => Dialog,
  Divider: () => Divider,
  Dropdown: () => Dropdown,
  Emoji: () => Emoji,
  Field: () => Field,
  Form: () => Form,
  FormGroup: () => FormGroup,
  Grid: () => Grid,
  H1: () => H1,
  H2: () => H2,
  H3: () => H3,
  H4: () => H4,
  H5: () => H5,
  H6: () => H6,
  Icon: () => Icon,
  Input: () => Input2,
  InputColor: () => InputColor,
  InputFile: () => InputFile,
  Jumbo: () => Jumbo,
  Label: () => Label,
  List: () => List2,
  ListItem: () => ListItem,
  Loader: () => Loader,
  Menu: () => Menu,
  MenuItem: () => MenuItem,
  MenuSeparator: () => MenuSeparator,
  MenuTitle: () => MenuTitle,
  Modal: () => Modal,
  NonIdealState: () => NonIdealState,
  Page: () => Page,
  Pagination: () => Pagination,
  Paragraph: () => Paragraph,
  Portal: () => Portal,
  ProgressBar: () => ProgressBar,
  Props: () => props_exports,
  Quote: () => Quote,
  Radio: () => Radio,
  RadioGroup: () => RadioGroup,
  Search: () => Search2,
  Select: () => Select,
  Skeleton: () => Skeleton,
  SkeletonCircle: () => SkeletonCircle,
  SkeletonText: () => SkeletonText,
  Spacer: () => Spacer,
  StatusIndicator: () => StatusIndicator,
  Tab: () => Tab,
  Tabs: () => Tabs,
  Tag: () => Tag,
  Text: () => Text,
  Textarea: () => Textarea,
  Toggle: () => Toggle,
  Tooltip: () => Tooltip,
  Truncate: () => Truncate,
  Types: () => types_exports,
  animateIcon: () => animateIcon,
  fadeIn: () => fadeIn,
  fadeInOut: () => fadeInOut,
  fadeOut: () => fadeOut,
  generatePalette: () => generatePalette,
  getContainerStyles: () => getContainerStyles,
  icons: () => icons,
  mergeTheme: () => mergeTheme,
  px: () => import_helpers109.px,
  responsive: () => responsive,
  rotate: () => rotate,
  theme: () => theme_exports
});
module.exports = __toCommonJS(src_exports);

// src/components/Alert/Alert.tsx
var import_react9 = require("react");
var import_react10 = require("@emotion/react");
var import_styled3 = __toESM(require("@emotion/styled"));
var import_helpers8 = require("@gilbarbara/helpers");

// src/modules/colors.ts
var import_helpers = require("@gilbarbara/helpers");
var import_colorizr2 = require("colorizr");

// src/modules/theme.ts
var theme_exports = {};
__export(theme_exports, {
  avatar: () => avatar,
  black: () => black,
  breakpoints: () => breakpoints,
  button: () => button,
  colors: () => colors,
  darkColor: () => darkColor,
  dropShadow: () => dropShadow,
  easing: () => easing,
  fontFamily: () => fontFamily,
  fontMonospace: () => fontMonospace,
  fontWeights: () => fontWeights,
  grayScale: () => grayScale,
  inputHeight: () => inputHeight,
  lightColor: () => lightColor,
  opacity: () => opacity,
  radius: () => radius,
  shadow: () => shadow,
  spacing: () => spacing,
  typography: () => typography,
  variants: () => variants,
  white: () => white
});

// src/modules/palette.ts
var import_colorizr = require("colorizr");
var LIGHTNESS_MAP = [95, 90, 80, 70, 60, 50, 40, 30, 20, 10];
var SATURATION_MAP = [32, 16, 8, 4, 0, 0, 4, 8, 16, 32];
function generatePalette(baseColor, monochromatic = false) {
  const hsl = (0, import_colorizr.hex2hsl)(baseColor);
  const lightnessGoal = hsl.l;
  const closestLightness = LIGHTNESS_MAP.reduce(
    (previous, current) => Math.abs(current - lightnessGoal) < Math.abs(previous - lightnessGoal) ? current : previous
  );
  const baseColorIndex = LIGHTNESS_MAP.findIndex((l) => l === closestLightness);
  return LIGHTNESS_MAP.reduce((acc, l, index) => {
    const color = (0, import_colorizr.hsl2hex)({ ...hsl, l });
    const key = `${index === 0 ? 50 : index * 100}`;
    if (monochromatic) {
      acc[key] = color;
    } else {
      const saturationDelta = SATURATION_MAP[index] - SATURATION_MAP[baseColorIndex];
      acc[key] = saturationDelta >= 0 ? (0, import_colorizr.saturate)(color, saturationDelta) : (0, import_colorizr.desaturate)(color, saturationDelta * -1);
    }
    return acc;
  }, {});
}

// src/modules/theme.ts
var fontFamily = "inherit";
var fontMonospace = "Courier, monospace";
var fontWeights = {
  normal: 400,
  bold: 700
};
var breakpoints = {
  xxs: "320px",
  xs: "375px",
  sm: "400px",
  md: "768px",
  lg: "1024px",
  xl: "1280px",
  xxl: "1440px",
  xxxl: "1680px"
};
var easing = "cubic-bezier(0.35, 0.01, 0.77, 0.34);";
var opacity = {
  semiOpaque: 0.72,
  intense: 0.64,
  medium: 0.32,
  light: 0.16,
  semiTransparent: 0.08
};
var radius = {
  xxs: "4px",
  xs: "8px",
  sm: "12px",
  md: "16px",
  lg: "24px",
  xl: "32px",
  round: "50%"
};
var dropShadow = {
  low: "drop-shadow(2px 4px 8px rgba(148, 148, 148, 0.4))",
  mid: "drop-shadow(2px 4px 12px rgba(148, 148, 148, 0.6))",
  high: "drop-shadow(2px 4px 18px rgba(148, 148, 148, 0.8))"
};
var shadow = {
  low: "2px 4px 16px 2px rgba(148, 148, 148, 0.16)",
  mid: "2px 4px 16px 4px rgba(148, 148, 148, 0.24)",
  high: "2px 4px 16px 8px rgba(148, 148, 148, 0.32)"
};
var spacing = {
  xxs: "4px",
  xs: "8px",
  sm: "12px",
  md: "16px",
  lg: "24px",
  xl: "32px",
  xxl: "48px",
  xxxl: "64px",
  jumbo: "96px"
};
var typography = {
  xs: {
    fontSize: "12px",
    lineHeight: 1.2
  },
  sm: {
    fontSize: "14px",
    lineHeight: 1.2
  },
  md: {
    fontSize: "16px",
    lineHeight: 1.2
  },
  lg: {
    fontSize: "18px",
    lineHeight: 1.2
  },
  h6: {
    fontSize: "16px",
    lineHeight: 1.2
  },
  h5: {
    fontSize: "18px",
    lineHeight: 1.2
  },
  h4: {
    fontSize: "20px",
    lineHeight: 1.2
  },
  h3: {
    fontSize: "24px",
    lineHeight: 1.2
  },
  h2: {
    fontSize: "28px",
    lineHeight: 1.2
  },
  h1: {
    fontSize: "32px",
    lineHeight: 1.2
  },
  jumbo: {
    fontSize: "48px",
    lineHeight: 1.2
  },
  jumboLarge: {
    fontSize: "64px",
    lineHeight: 1.2
  }
};
var black = "#000";
var white = "#fff";
var darkColor = "#101010";
var lightColor = "#f5f5f5";
var grayScale = {
  "10": "#fcfcfc",
  "20": "#fafafa",
  "30": "#f7f7f7",
  /** Lightest */
  "40": "#f5f5f5",
  "50": "#f2f2f2",
  /** Lighter */
  "100": "#e6e6e6",
  "150": "#d9d9d9",
  /** Light */
  "200": "#cccccc",
  "300": "#b3b3b3",
  "400": "#999999",
  /** Mid */
  "500": "#808080",
  "600": "#666666",
  /** Dark */
  "700": "#4d4d4d",
  "750": "#404040",
  /** Darker */
  "800": "#333333",
  "850": "#262626",
  /** Darkest */
  "900": "#1a1a1a",
  "950": "#0d0d0d"
};
var colors = {
  primary: "#3030e8",
  secondary: "#2a5d65",
  gray: "#999999",
  red: "#ff5e5e",
  orange: "#ff995d",
  yellow: "#ffe166",
  green: "#58d063",
  teal: "#38b2ac",
  cyan: "#0bc5ea",
  blue: "#66a5ff",
  indigo: "#8a8fff",
  purple: "#ad7bff",
  pink: "#ee63ab"
};
var variants = {
  primary: generatePalette(colors.primary),
  secondary: generatePalette(colors.secondary),
  gray: generatePalette(colors.gray, true),
  red: generatePalette(colors.red),
  orange: generatePalette(colors.orange),
  yellow: generatePalette(colors.yellow),
  green: generatePalette(colors.green),
  teal: generatePalette(colors.teal),
  cyan: generatePalette(colors.cyan),
  blue: generatePalette(colors.blue),
  indigo: generatePalette(colors.indigo),
  purple: generatePalette(colors.purple),
  pink: generatePalette(colors.pink)
};
var avatar = {
  xxs: {
    size: "16px",
    fontSize: "8px"
  },
  xs: {
    size: "24px",
    fontSize: "12px"
  },
  sm: {
    size: "32px",
    fontSize: "14px"
  },
  md: {
    size: "48px",
    fontSize: "18px"
  },
  lg: {
    size: "64px",
    fontSize: "24px"
  },
  xl: {
    size: "96px",
    fontSize: "40px"
  },
  jumbo: {
    size: "128px",
    fontSize: "52px"
  }
};
var button = {
  xs: {
    borderRadius: "4px",
    fontSize: "12px",
    fontWeight: 700,
    height: "24px",
    lineHeight: 1.2,
    padding: ["4px", "8px"]
  },
  sm: {
    borderRadius: "8px",
    fontSize: "14px",
    fontWeight: 700,
    height: "32px",
    lineHeight: 1.2,
    padding: ["6px", "12px"]
  },
  md: {
    borderRadius: "8px",
    fontSize: "16px",
    fontWeight: 700,
    height: "40px",
    lineHeight: 1.3,
    padding: ["8px", "16px"]
  },
  lg: {
    borderRadius: "8px",
    fontSize: "18px",
    fontWeight: 700,
    height: "48px",
    lineHeight: 1.4,
    padding: ["10px", "20px"]
  }
};
var inputHeight = {
  normal: "40px",
  large: "48px"
};

// src/modules/colors.ts
function getColorWithTone(color, tone) {
  const hsl = (0, import_colorizr2.hex2hsl)((0, import_colorizr2.parseCSS)(color));
  const lightness = 100 - parseInt(tone, 10) / 10;
  return (0, import_colorizr2.hsl2hex)({ ...hsl, l: lightness });
}
function getColorTokens(mainColor, textColor2, { colors: colors2, variants: variants2 } = theme_exports) {
  try {
    const variantKeys = (0, import_helpers.objectKeys)(variants2);
    const selectedTextColor = textColor2 && variantKeys.some((d) => textColor2.startsWith(d)) ? getColorTokens(textColor2, void 0, { colors: colors2, variants: variants2 })?.mainColor : textColor2;
    switch (mainColor) {
      case "black": {
        return { mainColor: black, textColor: selectedTextColor ?? white };
      }
      case "white": {
        return { mainColor: white, textColor: selectedTextColor ?? black };
      }
      default: {
        if (variantKeys.some((d) => mainColor.startsWith(d))) {
          const [variant, tone] = mainColor.split(".");
          const selectedMainColor = tone ? variants2[variant][tone] : colors2[variant];
          return {
            mainColor: selectedMainColor,
            textColor: selectedTextColor ?? (0, import_colorizr2.textColor)(selectedMainColor),
            variant
          };
        }
        return { mainColor, textColor: selectedTextColor ?? (0, import_colorizr2.textColor)(mainColor) };
      }
    }
  } catch {
    return {
      mainColor: colors2.primary,
      textColor: (0, import_colorizr2.textColor)(colors2.primary),
      variant: "primary"
    };
  }
}

// src/modules/helpers.ts
var import_react = require("react");
var import_react2 = require("@emotion/react");
var import_helpers2 = require("@gilbarbara/helpers");
var import_deepmerge_ts = require("deepmerge-ts");
var import_is_lite = __toESM(require("is-lite"));
var { breakpoints: breakpoints2 } = theme_exports;
var deepmerge = (0, import_deepmerge_ts.deepmergeCustom)({
  mergeArrays: false
});
function clearNumber(value) {
  return value.replace(/\D+/g, "");
}
function createMediaQuery(size, mediaQueries) {
  if (isCSSUnit(size) || import_is_lite.default.numericString(size)) {
    return `@media screen and (min-width: ${(0, import_helpers2.px)(size)})`;
  }
  return mediaQueries[size];
}
function getMediaQueries() {
  return (0, import_helpers2.objectKeys)(breakpoints2).filter((d) => Number.isNaN(parseInt(d, 10))).reduce((acc, d) => {
    acc[d] = `@media screen and (min-width: ${(0, import_helpers2.px)(breakpoints2[d])})`;
    return acc;
  }, {});
}
function getTheme(props) {
  return mergeTheme(props?.theme ?? {});
}
function isCSSUnit(value) {
  const units = ["em", "px", "rem", "vh", "vmax", "vmin", "vw"];
  const regex = new RegExp(`\\d+(${units.join("|")})$`);
  return typeof value === "string" && regex.test(value);
}
function mergeTheme(customTheme = {}) {
  const nextTheme = deepmerge({ ...theme_exports }, customTheme);
  const baseVariants = (0, import_helpers2.objectEntries)(nextTheme.colors).reduce(
    (acc, [key, value]) => {
      acc[key] = generatePalette(value, key === "gray");
      return acc;
    },
    {}
  );
  return {
    ...nextTheme,
    variants: deepmerge(baseVariants, customTheme.variants ?? {})
  };
}
function recursiveChildrenEnhancer(children, props, options) {
  const { componentType, overrideProps } = options;
  return import_react.Children.map(children, (child) => {
    if (!(0, import_react.isValidElement)(child)) {
      return child;
    }
    const nextProps = overrideProps ? props : (0, import_helpers2.omit)(props, ...Object.keys(child.props));
    if (child.props.children) {
      let childProps = {
        children: import_is_lite.default.function(child.props.children) ? child.props.children : recursiveChildrenEnhancer(child.props.children, nextProps, options)
      };
      if (child.type === componentType) {
        childProps = { ...childProps, ...nextProps };
      }
      return (0, import_react.cloneElement)(child, childProps);
    }
    if (child.type !== componentType) {
      return child;
    }
    return (0, import_react.cloneElement)(child, nextProps);
  });
}
function responsive(rules) {
  const entries = {};
  const mediaQueries = getMediaQueries();
  for (const rule in rules) {
    if ({}.hasOwnProperty.call(rules, rule)) {
      const styles2 = rules[rule];
      const query = createMediaQuery(rule, mediaQueries);
      if (rule === "_") {
        Object.entries(styles2).forEach(([k, v]) => {
          entries[k] = v;
        });
      } else if (query) {
        entries[query] = styles2;
      }
    }
  }
  return (0, import_react2.css)(entries);
}

// src/modules/system.ts
var import_is_prop_valid = __toESM(require("@emotion/is-prop-valid"));
var import_react3 = require("@emotion/react");
var import_helpers3 = require("@gilbarbara/helpers");
var import_is_lite2 = __toESM(require("is-lite"));
var import_polished = require("polished");
function getContainerStyles(props, options) {
  const { responsive: responsive2 = true, verticalPadding = false } = options ?? {};
  const { spacing: spacing2 } = getTheme(props);
  return import_react3.css`
    padding-left: ${spacing2.md};
    padding-right: ${spacing2.md};

    ${verticalPadding && import_react3.css`
      padding-bottom: ${spacing2.md};
      padding-top: ${spacing2.md};
    `}

    ${responsive2 && responsive({
    lg: {
      paddingLeft: spacing2.xl,
      paddingRight: spacing2.xl
    }
  })}

    ${responsive2 && verticalPadding && responsive({
    lg: {
      paddingBottom: spacing2.xl,
      paddingTop: spacing2.xl
    }
  })}
  `;
}
function getDisableStyles(props, options = {}) {
  const { borderless, invert } = props;
  const { hasPlaceholder, isButton } = options;
  const darkMode = isDarkMode(props);
  const { grayScale: grayScale2 } = getTheme(props);
  let backgroundColor;
  let borderColor = darkMode ? grayScale2["800"] : grayScale2["100"];
  let color = darkMode ? grayScale2["100"] : grayScale2["700"];
  const placeholderColor = darkMode ? grayScale2["600"] : grayScale2["300"];
  if (!borderless) {
    backgroundColor = darkMode ? grayScale2["900"] : grayScale2["30"];
  }
  if (isButton) {
    backgroundColor = darkMode ? grayScale2["800"] : grayScale2["100"];
    borderColor = darkMode ? grayScale2["800"] : grayScale2["100"];
    color = grayScale2["500"];
    if (invert) {
      backgroundColor = darkMode ? grayScale2["900"] : grayScale2["30"];
    }
  }
  return import_react3.css`
    background-color: ${backgroundColor};
    border-color: ${borderColor};
    color: ${color};
    cursor: not-allowed;

    ${hasPlaceholder && import_react3.css`
      &::placeholder {
        color: ${placeholderColor};
      }
    `}
  `;
}
function getOutlineStyles(color, amount = 0.4) {
  return {
    boxShadow: `0 0 0 3px ${(0, import_polished.transparentize)(amount, color)}`,
    outline: "none",
    zIndex: 10
  };
}
function getStyledOptions(...exclude) {
  return {
    shouldForwardProp: (prop) => (0, import_is_prop_valid.default)(prop) && ![
      "bg",
      "color",
      "direction",
      "display",
      "height",
      "letterSpacing",
      "loading",
      "margin",
      "opacity",
      "overflow",
      "padding",
      "pointerEvents",
      "radius",
      "shadow",
      "size",
      "textDecoration",
      "textTransform",
      "transform",
      "width",
      "wordSpacing",
      "wrap",
      ...exclude
    ].includes(prop) && !["onClear", "onCreate", "onDropdown", "onOpen", "onSelect"].some((d) => prop.startsWith(d))
  };
}
function isDarkMode(props) {
  return !!props?.theme?.darkMode;
}
function alignStyles(props) {
  const { align } = props;
  if (align) {
    return {
      textAlign: align
    };
  }
  return {};
}
var appearanceStyles = {
  appearance: "none"
};
function baseStyles(props) {
  const { fontFamily: fontFamily2 } = getTheme(props);
  return {
    boxSizing: "border-box",
    fontFamily: fontFamily2
  };
}
function borderStyles(props) {
  const { border } = props;
  const theme = getTheme(props);
  let { mainColor: borderColor } = getColorTokens("gray.100", null, theme);
  const defaultBorder = `1px solid ${borderColor}`;
  let output = {};
  const getBorderValue = (side, value = defaultBorder) => {
    const item = {};
    if (["bottom", "left", "right", "top"].includes(side)) {
      item[`border${(0, import_helpers3.capitalize)(side)}`] = value;
    } else if (["start", "end"].includes(side)) {
      item[`borderInline${(0, import_helpers3.capitalize)(side)}`] = value;
    } else if (side === "horizontal") {
      item.borderBottom = value;
      item.borderTop = value;
    } else if (side === "vertical") {
      item.borderLeft = value;
      item.borderRight = value;
    } else {
      item.border = value;
    }
    return item;
  };
  const getBorderItem = (item) => {
    const { color = "gray.100", side = "all", size = "1px", style = "solid" } = item;
    ({ mainColor: borderColor } = getColorTokens(color, null, theme));
    const value = `${(0, import_helpers3.px)(size)} ${style} ${borderColor}`;
    return getBorderValue(side, value);
  };
  if (import_is_lite2.default.nullOrUndefined(border)) {
    return output;
  }
  if (import_is_lite2.default.boolean(border)) {
    output.border = border ? defaultBorder : void 0;
  } else if (import_is_lite2.default.string(border)) {
    output = getBorderValue(border);
  } else if (import_is_lite2.default.array(border)) {
    const items = [];
    border.forEach((item) => {
      items.push(getBorderItem(item));
    });
    output = items.reduce((acc, item) => {
      (0, import_helpers3.objectEntries)(item).forEach(([key, value]) => {
        acc[key] = value;
      });
      return acc;
    }, {});
  } else {
    output = getBorderItem(border);
  }
  return output;
}
function boxStyles(props) {
  return import_react3.css`
    ${baseStyles(props)};
    ${colorStyles(props, false)};
    ${borderStyles(props)};
    ${flexBoxStyles(props)};
    ${flexItemStyles(props)};
    ${layoutStyles(props)};
    ${marginStyles(props)};
    ${paddingStyles(props)};
    ${positioningStyles(props)};
    ${radiusStyles(props)};
    ${shadowStyles(props)};
  `;
}
var buttonStyles = {
  ...appearanceStyles,
  backgroundColor: "transparent",
  border: 0
};
function colorStyles(props, withBorder = true) {
  const theme = getTheme(props);
  const { bg, color, invert, transparent } = props;
  const styles2 = {};
  if (bg) {
    const { mainColor, textColor: textColor2 } = getColorTokens(bg, color, theme);
    styles2.backgroundColor = invert || transparent ? "transparent" : mainColor;
    styles2.color = invert || transparent ? mainColor : textColor2;
    if (color) {
      styles2.color = textColor2;
    }
    if (withBorder) {
      styles2.border = transparent ? 0 : `1px solid ${mainColor}`;
    }
    return styles2;
  }
  if (color) {
    const { mainColor } = getColorTokens(color, null, theme);
    styles2.color = mainColor;
  }
  return styles2;
}
function dimensionStyles(props) {
  const { height, maxHeight, maxWidth, minHeight, minWidth, width } = props;
  const output = {};
  if (!import_is_lite2.default.nullOrUndefined(height)) {
    output.height = (0, import_helpers3.px)(height);
  }
  if (!import_is_lite2.default.nullOrUndefined(maxHeight)) {
    output.maxHeight = (0, import_helpers3.px)(maxHeight);
  }
  if (!import_is_lite2.default.nullOrUndefined(maxWidth)) {
    output.maxWidth = (0, import_helpers3.px)(maxWidth);
  }
  if (!import_is_lite2.default.nullOrUndefined(minHeight)) {
    output.minHeight = (0, import_helpers3.px)(minHeight);
  }
  if (!import_is_lite2.default.nullOrUndefined(minWidth)) {
    output.minWidth = (0, import_helpers3.px)(minWidth);
  }
  if (!import_is_lite2.default.nullOrUndefined(width)) {
    output.width = (0, import_helpers3.px)(width);
  }
  return output;
}
function displayStyles(props) {
  const { display } = props;
  if (display) {
    return { display };
  }
  return {};
}
function flexBoxStyles(props) {
  const { align, alignContent, direction, gap, justify, justifyItems, wrap } = props;
  return {
    alignContent,
    alignItems: align,
    flexDirection: direction,
    flexWrap: wrap,
    gap: (0, import_helpers3.px)(gap),
    justifyContent: justify,
    justifyItems
  };
}
function flexItemStyles(props) {
  const { alignSelf, basis, fill, flex, justifySelf, order } = props;
  const output = {};
  if (!import_is_lite2.default.nullOrUndefined(fill)) {
    output.height = fill === true || fill === "vertical" ? "100%" : void 0;
    output.width = fill === true || fill === "horizontal" ? "100%" : void 0;
  }
  if (!import_is_lite2.default.nullOrUndefined(flex)) {
    if (import_is_lite2.default.boolean(flex)) {
      output.flex = flex ? "1 1" : "0 0";
    } else if (import_is_lite2.default.string(flex)) {
      output.flex = flex === "grow" ? "1 0" : "0 1";
    } else {
      if (import_is_lite2.default.number(flex.grow)) {
        output.flexGrow = flex.grow;
      }
      if (import_is_lite2.default.number(flex.shrink)) {
        output.flexShrink = flex.shrink;
      }
    }
  }
  return {
    ...output,
    alignSelf,
    flexBasis: basis,
    justifySelf,
    order
  };
}
function inputStyles(props, type) {
  const {
    accent = "primary",
    borderless,
    large,
    multiple,
    prefixSpacing,
    suffixSpacing,
    width
  } = props;
  const darkMode = isDarkMode(props);
  const {
    darkColor: darkColor2,
    fontFamily: fontFamily2,
    grayScale: grayScale2,
    inputHeight: inputHeight2,
    lightColor: lightColor2,
    radius: radius2,
    spacing: spacing2,
    typography: typography2,
    white: white2,
    ...theme
  } = getTheme(props);
  const { mainColor } = getColorTokens(accent, null, theme);
  const isSelect = import_is_lite2.default.boolean(multiple);
  const placeholderColor = grayScale2["500"];
  let height;
  let paddingY = large ? spacing2.md : spacing2.sm;
  let paddingLeft = borderless ? 0 : spacing2.md;
  let paddingRight = borderless ? 0 : spacing2.md;
  if (type === "textarea") {
    paddingY = spacing2.xs;
  }
  if (type !== "textarea" && !multiple) {
    height = large ? inputHeight2.large : inputHeight2.normal;
  }
  if (isSelect) {
    paddingY = large ? spacing2.sm : spacing2.xs;
    paddingRight = spacing2.lg;
  }
  if (prefixSpacing) {
    paddingLeft = import_is_lite2.default.boolean(prefixSpacing) ? "40px" : (0, import_helpers3.px)(prefixSpacing);
  }
  if (suffixSpacing) {
    paddingRight = import_is_lite2.default.boolean(suffixSpacing) ? "40px" : (0, import_helpers3.px)(suffixSpacing);
  }
  const disabled = getDisableStyles(props, { hasPlaceholder: true });
  const styles2 = borderless ? import_react3.css`
        background-color: transparent;
        border: 0;
        border-bottom: 1px solid ${darkMode ? grayScale2["700"] : grayScale2["500"]};
      ` : import_react3.css`
        background-color: ${darkMode ? grayScale2["800"] : white2};
        border: 1px solid ${darkMode ? grayScale2["700"] : grayScale2["500"]};
        border-radius: ${radius2.xs};
      `;
  return import_react3.css`
    color: ${darkMode ? lightColor2 : darkColor2};
    display: block;
    font-family: ${fontFamily2};
    font-size: ${typography2.md.fontSize};
    height: ${height};
    line-height: 1.4;
    padding: ${paddingY} ${paddingRight} ${paddingY} ${paddingLeft};
    width: ${width ? (0, import_helpers3.px)(width) : "100%"};
    ${styles2}

    &:focus {
      ${!!borderless && `box-shadow: 0 3px 0 0 ${(0, import_polished.transparentize)(0.5, mainColor)};`}
      ${!borderless && getOutlineStyles(mainColor)}
      outline: none;
    }

    &:disabled {
      ${disabled}
    }

    ${!isSelect && import_react3.css`
      &::placeholder {
        color: ${placeholderColor};
      }

      &:not(:placeholder-shown) {
        border-color: ${mainColor};
      }

      &:read-only {
        ${disabled}
      }
    `}
  `;
}
function layoutStyles(props) {
  const { display } = props;
  const output = {};
  [
    "opacity",
    "overflow",
    "pointerEvents",
    "textAlign",
    "transition",
    "transform",
    "transformOrigin"
  ].forEach((prop) => {
    const value = props[prop];
    if (!import_is_lite2.default.nullOrUndefined(value)) {
      output[prop] = value;
    }
  });
  if (!import_is_lite2.default.nullOrUndefined(display)) {
    output.display = display;
  }
  return { ...output, ...dimensionStyles(props) };
}
function marginStyles(props) {
  const { margin, mb, ml, mr, mt, mx, my } = props;
  const { spacing: spacing2 } = getTheme(props);
  const output = {};
  if (!import_is_lite2.default.undefined(margin)) {
    output.margin = margin ? spacing2[margin] : margin;
  }
  if (!import_is_lite2.default.undefined(my)) {
    output.marginBottom = my ? spacing2[my] : my;
    output.marginTop = my ? spacing2[my] : my;
  } else {
    if (!import_is_lite2.default.undefined(mb)) {
      output.marginBottom = mb === "auto" || mb === 0 ? mb : spacing2[mb];
    }
    if (!import_is_lite2.default.undefined(mt)) {
      output.marginTop = mt === "auto" || mt === 0 ? mt : spacing2[mt];
    }
  }
  if (!import_is_lite2.default.undefined(mx)) {
    output.marginLeft = mx === "auto" || mx === 0 ? mx : spacing2[mx];
    output.marginRight = mx === "auto" || mx === 0 ? mx : spacing2[mx];
  } else {
    if (!import_is_lite2.default.undefined(ml)) {
      output.marginLeft = ml === "auto" || ml === 0 ? ml : spacing2[ml];
    }
    if (!import_is_lite2.default.undefined(mr)) {
      output.marginRight = mr === "auto" || mr === 0 ? mr : spacing2[mr];
    }
  }
  return output;
}
function paddingStyles(props, force = false) {
  const { padding, pb, pl, pr, pt, px: paddingX, py } = props;
  const { spacing: spacing2 } = getTheme(props);
  const output = {};
  if (!import_is_lite2.default.nullOrUndefined(padding)) {
    output.padding = import_is_lite2.default.number(padding) ? padding : spacing2[padding];
  }
  if (py) {
    output.paddingBottom = spacing2[py];
    output.paddingTop = spacing2[py];
  } else {
    if (pb) {
      output.paddingBottom = spacing2[pb];
    }
    if (pt) {
      output.paddingTop = spacing2[pt];
    }
  }
  if (paddingX) {
    output.paddingLeft = spacing2[paddingX];
    output.paddingRight = spacing2[paddingX];
  } else {
    if (pl) {
      output.paddingLeft = spacing2[pl];
    }
    if (pr) {
      output.paddingRight = spacing2[pr];
    }
  }
  if (force) {
    return (0, import_helpers3.objectEntries)(output).reduce((acc, [key, value]) => {
      acc[key] = `${value} !important`;
      return acc;
    }, {});
  }
  return output;
}
function positioningStyles(props) {
  const { bottom, left, right, top } = props;
  const output = {};
  ["position", "zIndex"].forEach((prop) => {
    const value = props[prop];
    if (!import_is_lite2.default.nullOrUndefined(value)) {
      output[prop] = value;
    }
  });
  if (!import_is_lite2.default.nullOrUndefined(bottom)) {
    output.bottom = (0, import_helpers3.px)(bottom);
  }
  if (!import_is_lite2.default.nullOrUndefined(left)) {
    output.left = (0, import_helpers3.px)(left);
  }
  if (!import_is_lite2.default.nullOrUndefined(right)) {
    output.right = (0, import_helpers3.px)(right);
  }
  if (!import_is_lite2.default.nullOrUndefined(top)) {
    output.top = (0, import_helpers3.px)(top);
  }
  return output;
}
function radiusStyles(props) {
  const { radius: radius2 } = getTheme(props);
  const output = {};
  if (import_is_lite2.default.plainObject(props.radius)) {
    const { bottom, left, right, top } = props.radius;
    if (top) {
      output.borderTopLeftRadius = radius2[top];
      output.borderTopRightRadius = radius2[top];
    }
    if (right) {
      output.borderTopRightRadius = radius2[right];
      output.borderBottomRightRadius = radius2[right];
    }
    if (bottom) {
      output.borderBottomRightRadius = radius2[bottom];
      output.borderBottomLeftRadius = radius2[bottom];
    }
    if (left) {
      output.borderBottomLeftRadius = radius2[left];
      output.borderTopLeftRadius = radius2[left];
    }
  } else if (props.radius) {
    output.borderRadius = radius2[props.radius];
  }
  return output;
}
function shadowStyles(props, useFilter = false) {
  const { dropShadow: dropShadow2, shadow: shadow2 } = getTheme(props);
  if (props.shadow) {
    if (useFilter) {
      return {
        filter: isDarkMode(props) ? dropShadow2[props.shadow].replace(/148/g, "222") : dropShadow2[props.shadow]
      };
    }
    return {
      boxShadow: isDarkMode(props) ? shadow2[props.shadow].replace(/148/g, "222") : shadow2[props.shadow]
    };
  }
  return {};
}
function textStyles(props, lineHeightCustom) {
  const { bold = false, italic = false, size } = props;
  const { fontWeights: fontWeights2, typography: typography2 } = getTheme(props);
  const output = {};
  ["letterSpacing", "lineHeight", "textDecoration", "textTransform", "wordSpacing"].forEach((prop) => {
    const value = props[prop];
    if (!import_is_lite2.default.nullOrUndefined(value)) {
      output[prop] = value;
    }
  });
  if (bold) {
    output.fontWeight = fontWeights2.bold;
  }
  if (italic) {
    output.fontStyle = "italic";
  }
  if (size) {
    const { fontSize, lineHeight: typographyLineHeight } = typography2[size];
    const fontWeight = bold ? fontWeights2.bold : fontWeights2.normal;
    return {
      ...output,
      fontSize,
      fontWeight,
      lineHeight: output.lineHeight ?? lineHeightCustom ?? typographyLineHeight
    };
  }
  return output;
}

// src/components/Icon/Icon.tsx
var import_react5 = require("react");
var import_react_inlinesvg = __toESM(require("react-inlinesvg"));
var import_react_innertext = __toESM(require("react-innertext"));
var import_react6 = require("@emotion/react");
var import_styled = __toESM(require("@emotion/styled"));
var import_helpers6 = require("@gilbarbara/helpers");
var import_is_lite3 = __toESM(require("is-lite"));

// src/modules/animations.ts
var import_react4 = require("@emotion/react");
var import_scroll = __toESM(require("scroll"));
function animateIcon(target, color, theme = theme_exports) {
  const { mainColor } = getColorTokens(color, null, theme);
  if (!target) {
    return;
  }
  const icon = target.querySelector('[data-component-name="Icon"]');
  if (!icon) {
    return;
  }
  const iconClone = document.createElement("span");
  iconClone.innerHTML = icon.innerHTML;
  iconClone.classList.add(icon.className, "will-animate");
  iconClone.setAttribute(
    "style",
    `color: ${mainColor}; position: absolute; top: ${icon.offsetTop}px; left: ${icon.offsetLeft}px`
  );
  target.appendChild(iconClone);
  setTimeout(() => {
    iconClone.classList.add("is-animating");
  }, 100);
  target.addEventListener("transitionend", () => {
    if (iconClone.parentNode !== null && iconClone.classList.contains("is-animating")) {
      iconClone.parentNode.removeChild(iconClone);
    }
  });
}
var fadeIn = import_react4.keyframes`
  0% {
    opacity: 0;
  }

  100% {
    opacity: 1;
  }
`;
var fadeOut = import_react4.keyframes`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`;
var fadeInOut = import_react4.keyframes`
  0% {
    opacity: 0;
  }

  50% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`;
var rotate = import_react4.keyframes`
  100% {
    transform: rotate(360deg);
  }
`;
function scrollDocument() {
  return document.scrollingElement || document.createElement("body");
}
function scrollTo(value, options = {}) {
  const { element = scrollDocument(), scrollDuration = 400 } = options;
  return new Promise((resolve, reject) => {
    const { scrollTop } = element;
    const nextValue = scrollDocument().scrollTop + value;
    const limit = nextValue > scrollTop ? nextValue - scrollTop : scrollTop - nextValue;
    import_scroll.default.top(
      element,
      nextValue,
      { duration: limit < 100 ? 50 : scrollDuration },
      (error) => {
        if (error && error.message !== "Element already at target scroll position") {
          return reject(error);
        }
        return resolve();
      }
    );
  });
}

// src/modules/options.ts
var import_helpers5 = require("@gilbarbara/helpers");
var iconsPack = [
  { name: "align-bottom", categories: ["layout"] },
  { name: "align-center", categories: ["layout"] },
  { name: "align-left", categories: ["layout"] },
  { name: "align-middle", categories: ["layout"] },
  { name: "align-right", categories: ["layout"] },
  { name: "align-top", categories: ["layout"] },
  { name: "apple-watch", categories: ["devices"] },
  { name: "arrange-back", categories: ["layout"] },
  { name: "arrange-front", categories: ["layout"] },
  { name: "attachment", categories: ["ui"] },
  { name: "backspace", categories: ["arrows"] },
  { name: "band-aid", categories: ["misc"] },
  { name: "battery", categories: ["devices"] },
  { name: "battery-empty", categories: ["devices"] },
  { name: "battery-full", categories: ["devices"] },
  { name: "board", categories: ["ui"] },
  { name: "border-all", categories: ["layout"] },
  { name: "border-bottom", categories: ["layout"] },
  { name: "border-left", categories: ["layout"] },
  { name: "border-right", categories: ["layout"] },
  { name: "border-style-dashed", categories: ["layout"] },
  { name: "border-style-dotted", categories: ["layout"] },
  { name: "border-style-solid", categories: ["layout"] },
  { name: "border-top", categories: ["layout"] },
  { name: "bot", categories: ["misc"] },
  { name: "bowl", categories: ["misc"] },
  { name: "boy", categories: ["misc"] },
  { name: "briefcase", categories: ["ui"] },
  { name: "browse", categories: ["ui"] },
  { name: "browser", categories: ["ui"] },
  { name: "calculator", categories: ["devices"] },
  { name: "calendar-dates", categories: ["date"] },
  { name: "calendar-due", categories: ["date"] },
  { name: "calendar-next", categories: ["date"] },
  { name: "calendar-today", categories: ["date"] },
  { name: "calendar", categories: ["date"] },
  { name: "calibrate", categories: ["misc"] },
  { name: "captions", categories: ["ui"] },
  { name: "card-clubs", categories: ["misc"] },
  { name: "card-diamonds", categories: ["misc"] },
  { name: "card-hearts", categories: ["misc"] },
  { name: "card-spades", categories: ["misc"] },
  { name: "carousel", categories: ["ui"] },
  { name: "cast", categories: ["ui"] },
  { name: "chart", categories: ["ui"] },
  { name: "clapper-board", categories: ["multimedia"] },
  { name: "clipboard", categories: ["ui"] },
  { name: "code", categories: ["development"] },
  { name: "code-slash", categories: ["development"] },
  { name: "collage", categories: ["ui"] },
  { name: "color-bucket", categories: ["ui"] },
  { name: "color-picker", categories: ["ui"] },
  { name: "community", categories: ["misc"] },
  { name: "components", categories: ["ui"] },
  { name: "compress-left", categories: ["arrows"] },
  { name: "compress-right", categories: ["arrows"] },
  { name: "compress-v", categories: ["arrows"] },
  { name: "compress", categories: ["arrows"] },
  { name: "controller", categories: ["ui"] },
  { name: "copy", categories: ["ui"] },
  { name: "corner-double-down-left", categories: ["arrows"] },
  { name: "corner-double-down-right", categories: ["arrows"] },
  { name: "corner-double-left-down", categories: ["arrows"] },
  { name: "corner-double-left-up", categories: ["arrows"] },
  { name: "corner-double-right-down", categories: ["arrows"] },
  { name: "corner-double-right-up", categories: ["arrows"] },
  { name: "corner-double-up-left", categories: ["arrows"] },
  { name: "corner-double-up-right", categories: ["arrows"] },
  { name: "corner-down-left", categories: ["arrows"] },
  { name: "corner-down-right", categories: ["arrows"] },
  { name: "corner-left-down", categories: ["arrows"] },
  { name: "corner-left-up", categories: ["arrows"] },
  { name: "corner-right-down", categories: ["arrows"] },
  { name: "corner-right-up", categories: ["arrows"] },
  { name: "corner-up-left", categories: ["arrows"] },
  { name: "corner-up-right", categories: ["arrows"] },
  { name: "credit-card", categories: ["misc"] },
  { name: "crop", categories: ["ui"] },
  { name: "dark-mode", categories: ["ui"] },
  { name: "desktop", categories: ["ui"] },
  { name: "details-less", categories: ["layout"] },
  { name: "details-more", categories: ["layout"] },
  { name: "dialpad", categories: ["ui"] },
  { name: "dice-1", categories: ["misc"] },
  { name: "dice-2", categories: ["misc"] },
  { name: "dice-3", categories: ["misc"] },
  { name: "dice-4", categories: ["misc"] },
  { name: "dice-5", categories: ["misc"] },
  { name: "dice-6", categories: ["misc"] },
  { name: "display-flex", categories: ["layout"] },
  { name: "display-fullwidth", categories: ["layout"] },
  { name: "display-grid", categories: ["layout"] },
  { name: "display-spacing", categories: ["layout"] },
  { name: "distribute-horizontal", categories: ["layout"] },
  { name: "distribute-vertical", categories: ["layout"] },
  { name: "dock-bottom", categories: ["ui"] },
  { name: "dock-left", categories: ["ui"] },
  { name: "dock-right", categories: ["ui"] },
  { name: "dock-window", categories: ["ui"] },
  { name: "drive", categories: ["devices"] },
  { name: "drop-invert", categories: ["ui"] },
  { name: "drop-opacity", categories: ["ui"] },
  { name: "drop", categories: ["ui"] },
  { name: "duplicate", categories: ["ui"] },
  { name: "edit-black-point", categories: ["ui"] },
  { name: "edit-contrast", categories: ["ui"] },
  { name: "edit-exposure", categories: ["ui"] },
  { name: "edit-fade", categories: ["ui"] },
  { name: "edit-flip-h", categories: ["ui"] },
  { name: "edit-flip-v", categories: ["ui"] },
  { name: "edit-highlight", categories: ["ui"] },
  { name: "edit-markup", categories: ["ui"] },
  { name: "edit-mask", categories: ["ui"] },
  { name: "edit-noise", categories: ["ui"] },
  { name: "edit-shadows", categories: ["ui"] },
  { name: "edit-straight", categories: ["ui"] },
  { name: "edit-unmask", categories: ["ui"] },
  { name: "enter", categories: ["ui"] },
  { name: "erase", categories: ["ui"] },
  { name: "euro", categories: ["misc"] },
  { name: "export", categories: ["ui"] },
  { name: "extension-add", categories: ["ui"] },
  { name: "extension-remove", categories: ["ui"] },
  { name: "extension", categories: ["ui"] },
  { name: "external", categories: ["ui"] },
  { name: "feed", categories: ["ui"] },
  { name: "file-add", categories: ["ui"] },
  { name: "file-document", categories: ["ui"] },
  { name: "file-remove", categories: ["ui"] },
  { name: "file", categories: ["ui"] },
  { name: "film", categories: ["multimedia"] },
  { name: "filters", categories: ["ui"] },
  { name: "folder-add", categories: ["ui"] },
  { name: "folder-remove", categories: ["ui"] },
  { name: "folder", categories: ["ui"] },
  { name: "font-height", categories: ["typography"] },
  { name: "font-spacing", categories: ["typography"] },
  { name: "format-center", categories: ["typography"] },
  { name: "format-color", categories: ["typography"] },
  { name: "format-heading", categories: ["typography"] },
  { name: "format-indent-decrease", categories: ["typography"] },
  { name: "format-indent-increase", categories: ["typography"] },
  { name: "format-italic", categories: ["typography"] },
  { name: "format-justify", categories: ["typography"] },
  { name: "format-left", categories: ["typography"] },
  { name: "format-line-height", categories: ["typography"] },
  { name: "format-right", categories: ["typography"] },
  { name: "format-separator", categories: ["typography"] },
  { name: "format-slash", categories: ["typography"] },
  { name: "format-text", categories: ["typography"] },
  { name: "format-underline", categories: ["typography"] },
  { name: "format-uppercase", categories: ["typography"] },
  { name: "games", categories: ["devices"] },
  { name: "gender-female", categories: ["misc"] },
  { name: "gender-male", categories: ["misc"] },
  { name: "girl", categories: ["misc"] },
  { name: "glass-alt", categories: ["misc"] },
  { name: "home-screen", categories: ["devices"] },
  { name: "image", categories: ["ui"] },
  { name: "import", categories: ["ui"] },
  { name: "inpicture", categories: ["multimedia"] },
  { name: "insert-after-o", categories: ["ui"] },
  { name: "insert-after-r", categories: ["ui"] },
  { name: "insert-after", categories: ["ui"] },
  { name: "insert-before-o", categories: ["ui"] },
  { name: "insert-before-r", categories: ["ui"] },
  { name: "insert-before", categories: ["ui"] },
  { name: "insights", categories: ["ui"] },
  { name: "internal", categories: ["ui"] },
  { name: "laptop", categories: ["devices"] },
  { name: "list-tree", categories: ["ui"] },
  { name: "list", categories: ["ui"] },
  { name: "lock-unlock", categories: ["ui"] },
  { name: "lock", categories: ["ui"] },
  { name: "log-off", categories: ["ui"] },
  { name: "loupe", categories: ["ui"] },
  { name: "magnet", categories: ["misc"] },
  { name: "mail-forward", categories: ["ui"] },
  { name: "mail-reply", categories: ["ui"] },
  { name: "maximize-alt", categories: ["ui"] },
  { name: "maximize", categories: ["ui"] },
  { name: "menu-boxed", categories: ["ui"] },
  { name: "menu-grid-o", categories: ["ui"] },
  { name: "menu-grid-r", categories: ["ui"] },
  { name: "menu-left-alt", categories: ["ui"] },
  { name: "menu-left", categories: ["ui"] },
  { name: "menu-motion", categories: ["ui"] },
  { name: "menu-right-alt", categories: ["ui"] },
  { name: "menu-right", categories: ["ui"] },
  { name: "menu", categories: ["ui"] },
  { name: "merge-horizontal", categories: ["ui"] },
  { name: "merge-vertical", categories: ["ui"] },
  { name: "mini-player", categories: ["multimedia"] },
  { name: "minimize-alt", categories: ["ui"] },
  { name: "minimize", categories: ["ui"] },
  { name: "moon", categories: ["misc"] },
  { name: "mouse", categories: ["devices"] },
  { name: "move-down", categories: ["ui"] },
  { name: "move-left", categories: ["ui"] },
  { name: "move-right", categories: ["ui"] },
  { name: "move-up", categories: ["ui"] },
  { name: "notifications", categories: ["ui"] },
  { name: "pacman", categories: ["misc"] },
  { name: "path-back", categories: ["layout"] },
  { name: "path-crop", categories: ["layout"] },
  { name: "path-divide", categories: ["layout"] },
  { name: "path-exclude", categories: ["layout"] },
  { name: "path-front", categories: ["layout"] },
  { name: "path-intersect", categories: ["layout"] },
  { name: "path-outline", categories: ["layout"] },
  { name: "path-trim", categories: ["layout"] },
  { name: "path-unite", categories: ["layout"] },
  { name: "performance", categories: ["ui"] },
  { name: "piano", categories: ["multimedia"] },
  { name: "pill", categories: ["misc"] },
  { name: "plug", categories: ["ui"] },
  { name: "pokemon", categories: ["misc"] },
  { name: "poll", categories: ["ui"] },
  { name: "printer", categories: ["devices"] },
  { name: "profile", categories: ["ui"] },
  { name: "pull-clear", categories: ["ui"] },
  { name: "push-chevron-down-o", categories: ["ui", "circle"] },
  { name: "push-chevron-down-r", categories: ["ui", "square"] },
  { name: "push-chevron-down", categories: ["ui"] },
  { name: "push-chevron-left-o", categories: ["ui", "circle"] },
  { name: "push-chevron-left-r", categories: ["ui", "square"] },
  { name: "push-chevron-left", categories: ["ui"] },
  { name: "push-chevron-right-o", categories: ["ui", "circle"] },
  { name: "push-chevron-right-r", categories: ["ui", "square"] },
  { name: "push-chevron-right", categories: ["ui"] },
  { name: "push-chevron-up-o", categories: ["ui", "circle"] },
  { name: "push-chevron-up-r", categories: ["ui", "square"] },
  { name: "push-chevron-up", categories: ["ui"] },
  { name: "push-down", categories: ["ui"] },
  { name: "push-left", categories: ["ui"] },
  { name: "push-right", categories: ["ui"] },
  { name: "push-up", categories: ["ui"] },
  { name: "qr", categories: ["ui"] },
  { name: "quote-o", categories: ["ui"] },
  { name: "quote", categories: ["ui"] },
  { name: "radio-check", categories: ["ui"] },
  { name: "radio-checked", categories: ["ui"] },
  { name: "ratio", categories: ["ui"] },
  { name: "redo", categories: ["ui"] },
  { name: "remove-r", categories: ["ui", "square"] },
  { name: "remove", categories: ["ui"] },
  { name: "rename", categories: ["ui"] },
  { name: "reorder", categories: ["ui"] },
  { name: "row-first", categories: ["layout"] },
  { name: "row-last", categories: ["layout"] },
  { name: "ruler", categories: ["ui"] },
  { name: "scan", categories: ["ui"] },
  { name: "screen-mirror", categories: ["ui"] },
  { name: "screen-wide", categories: ["ui"] },
  { name: "screen", categories: ["ui"] },
  { name: "scroll-h", categories: ["ui"] },
  { name: "scroll-v", categories: ["ui"] },
  { name: "search-found", categories: ["ui"] },
  { name: "search-loading", categories: ["ui"] },
  { name: "search", categories: ["ui"] },
  { name: "select-o", categories: ["ui", "circle"] },
  { name: "select-r", categories: ["ui", "square"] },
  { name: "select", categories: ["ui"] },
  { name: "shopping-bag", categories: ["ui"] },
  { name: "shopping-cart", categories: ["ui"] },
  { name: "sidebar-open", categories: ["ui"] },
  { name: "sidebar-right", categories: ["ui"] },
  { name: "sidebar", categories: ["ui"] },
  { name: "signal", categories: ["ui"] },
  { name: "size", categories: ["ui"] },
  { name: "smartphone", categories: ["devices"] },
  { name: "smile-mouth-open", categories: ["misc"] },
  { name: "smile-neutral", categories: ["misc"] },
  { name: "smile-no-mouth", categories: ["misc"] },
  { name: "smile-none", categories: ["misc"] },
  { name: "smile-sad", categories: ["misc"] },
  { name: "smile-upside", categories: ["misc"] },
  { name: "smile", categories: ["misc"] },
  { name: "space-between-v", categories: ["layout"] },
  { name: "space-between", categories: ["layout"] },
  { name: "spinner-alt", categories: ["loaders"] },
  { name: "spinner-two-alt", categories: ["loaders"] },
  { name: "spinner-two", categories: ["loaders"] },
  { name: "spinner", categories: ["loaders"] },
  { name: "sun", categories: ["ui"] },
  { name: "swap-vertical", categories: ["ui"] },
  { name: "swap", categories: ["ui"] },
  { name: "tab", categories: ["ui"] },
  { name: "terrain", categories: ["misc"] },
  { name: "thermostat", categories: ["misc"] },
  { name: "today", categories: ["ui"] },
  { name: "toggle-off", categories: ["ui"] },
  { name: "toggle-on", categories: ["ui"] },
  { name: "toggle-square-off", categories: ["ui"] },
  { name: "toggle-square", categories: ["ui"] },
  { name: "toolbar-bottom", categories: ["ui"] },
  { name: "toolbar-left", categories: ["ui"] },
  { name: "toolbar-right", categories: ["ui"] },
  { name: "toolbar-top", categories: ["ui"] },
  { name: "toolbox", categories: ["ui"] },
  { name: "touchpad", categories: ["devices"] },
  { name: "track", categories: ["ui"] },
  { name: "transcript", categories: ["ui"] },
  { name: "trash-empty", categories: ["ui"] },
  { name: "trash", categories: ["ui"] },
  { name: "trending-down", categories: ["ui"] },
  { name: "trending", categories: ["ui"] },
  { name: "tv", categories: ["devices"] },
  { name: "ui-kit", categories: ["misc"] },
  { name: "umbrella", categories: ["misc"] },
  { name: "undo", categories: ["ui"] },
  { name: "usb", categories: ["devices"] },
  { name: "usb-c", categories: ["devices"] },
  { name: "view-cols", categories: ["layout"] },
  { name: "view-comfortable", categories: ["layout"] },
  { name: "view-day", categories: ["layout"] },
  { name: "view-grid", categories: ["layout"] },
  { name: "view-list", categories: ["layout"] },
  { name: "view-month", categories: ["layout"] },
  { name: "view-split", categories: ["layout"] },
  { name: "voicemail-o", categories: ["ui", "circle"] },
  { name: "voicemail-r", categories: ["ui"] },
  { name: "voicemail", categories: ["ui"] },
  { name: "work-alt", categories: ["ui"] },
  { name: "yinyang", categories: ["misc"] },
  { name: "zoom-in", categories: ["ui"] },
  { name: "zoom-out", categories: ["ui"] }
];
var iconsCustom = [
  { name: "accessibility", categories: ["ui"] },
  { name: "accessibility-circle", categories: ["ui", "circle"] },
  { name: "accessibility-o", categories: ["ui", "circle"] },
  { name: "airplane", categories: ["misc"] },
  { name: "airpods", categories: ["devices", "multimedia"] },
  { name: "alarm", categories: ["time"] },
  { name: "album", categories: ["multimedia"] },
  { name: "anchor", categories: ["misc"] },
  { name: "angular", categories: ["development"] },
  { name: "apple", categories: ["brand"] },
  { name: "approximately-equal", categories: ["math"] },
  { name: "archive", categories: ["ui"] },
  { name: "arrow-bottom-left-o", categories: ["arrows", "circle"] },
  { name: "arrow-bottom-left-r", categories: ["arrows", "square"] },
  { name: "arrow-bottom-left", categories: ["arrows"] },
  { name: "arrow-bottom-right-o", categories: ["arrows", "circle"] },
  { name: "arrow-bottom-right-r", categories: ["arrows", "square"] },
  { name: "arrow-bottom-right", categories: ["arrows"] },
  { name: "arrow-down-o", categories: ["arrows", "circle"] },
  { name: "arrow-down-r", categories: ["arrows", "square"] },
  { name: "arrow-down", categories: ["arrows"] },
  { name: "arrows-exchange-alt-v", categories: ["arrows"] },
  { name: "arrows-exchange-alt", categories: ["arrows"] },
  { name: "arrows-exchange-v", categories: ["arrows"] },
  { name: "arrows-exchange", categories: ["arrows"] },
  { name: "arrows-expand-down-left", categories: ["arrows"] },
  { name: "arrows-expand-down-right", categories: ["arrows"] },
  { name: "arrows-expand-left", categories: ["arrows"] },
  { name: "arrows-expand-right", categories: ["arrows"] },
  { name: "arrows-expand-up-left", categories: ["arrows"] },
  { name: "arrows-expand-up-right", categories: ["arrows"] },
  { name: "arrows-h", categories: ["arrows"] },
  { name: "arrows-h-alt", categories: ["arrows"] },
  { name: "arrow-left-o", categories: ["arrows", "circle"] },
  { name: "arrow-left-r", categories: ["arrows", "square"] },
  { name: "arrow-left", categories: ["arrows"] },
  { name: "arrow-right-o", categories: ["arrows", "circle"] },
  { name: "arrow-right-r", categories: ["arrows", "square"] },
  { name: "arrow-right", categories: ["arrows"] },
  { name: "arrows-scroll-h", categories: ["arrows"] },
  { name: "arrows-scroll-v", categories: ["arrows"] },
  { name: "arrow-switch", categories: ["arrows"] },
  { name: "arrow-switch-o", categories: ["arrows"] },
  { name: "arrow-switch-r", categories: ["arrows"] },
  { name: "arrow-top-left-o", categories: ["arrows", "circle"] },
  { name: "arrow-top-left-r", categories: ["arrows", "square"] },
  { name: "arrow-top-left", categories: ["arrows"] },
  { name: "arrow-top-right-o", categories: ["arrows", "circle"] },
  { name: "arrow-top-right-r", categories: ["arrows", "square"] },
  { name: "arrow-top-right", categories: ["arrows"] },
  { name: "arrow-up-o", categories: ["arrows", "circle"] },
  { name: "arrow-up-r", categories: ["arrows", "square"] },
  { name: "arrow-up", categories: ["arrows"] },
  { name: "arrows-v", categories: ["arrows"] },
  { name: "arrows-v-alt", categories: ["arrows"] },
  { name: "asterisk", categories: ["misc"] },
  { name: "asterisk-o", categories: ["misc", "circle"] },
  { name: "asterisk-r", categories: ["misc", "square"] },
  { name: "atlassian", categories: ["development"] },
  { name: "attribution", categories: ["multimedia"] },
  { name: "award", categories: ["misc"] },
  { name: "badge", categories: ["misc"] },
  { name: "bamboo", categories: ["development"] },
  { name: "bell", categories: ["ui"] },
  { name: "bell-o", categories: ["ui"] },
  { name: "bell-slash", categories: ["ui"] },
  { name: "bitbucket", categories: ["development"] },
  { name: "block-o", categories: ["ui", "circle"] },
  { name: "blocked", categories: ["ui"] },
  { name: "bluetooth", categories: ["devices"] },
  { name: "book", categories: ["ui"] },
  { name: "bookmark", categories: ["ui"] },
  { name: "bookmark-slash", categories: ["ui"] },
  { name: "bug", categories: ["development"] },
  { name: "bullseye", categories: ["misc"] },
  { name: "bullseye-arrow", categories: ["misc"] },
  { name: "c-plus-plus", categories: ["development"] },
  { name: "cache", categories: ["development"] },
  { name: "camera", categories: ["devices", "multimedia"] },
  { name: "camera-alt", categories: ["devices", "multimedia"] },
  { name: "categories", categories: ["ui"] },
  { name: "check", categories: ["ui"] },
  { name: "check-circle", categories: ["ui", "circle"] },
  { name: "check-o", categories: ["ui", "circle"] },
  { name: "check-r", categories: ["ui", "square"] },
  { name: "checklist", categories: ["ui"] },
  { name: "chevron-double-down-o", categories: ["arrows", "circle"] },
  { name: "chevron-double-down-r", categories: ["arrows", "square"] },
  { name: "chevron-double-left-o", categories: ["arrows", "circle"] },
  { name: "chevron-double-left-r", categories: ["arrows", "square"] },
  { name: "chevron-double-right-o", categories: ["arrows", "circle"] },
  { name: "chevron-double-right-r", categories: ["arrows", "square"] },
  { name: "chevron-double-up-o", categories: ["arrows", "circle"] },
  { name: "chevron-double-up-r", categories: ["arrows", "square"] },
  { name: "chevron-down-o", categories: ["arrows", "circle"] },
  { name: "chevron-down-r", categories: ["arrows", "square"] },
  { name: "chevron-down", categories: ["arrows"] },
  { name: "chevron-left-o", categories: ["arrows", "circle"] },
  { name: "chevron-left-r", categories: ["arrows", "square"] },
  { name: "chevron-left", categories: ["arrows"] },
  { name: "chevron-right-o", categories: ["arrows", "circle"] },
  { name: "chevron-right-r", categories: ["arrows", "square"] },
  { name: "chevron-right", categories: ["arrows"] },
  { name: "chevron-up-o", categories: ["arrows", "circle"] },
  { name: "chevron-up-r", categories: ["arrows", "square"] },
  { name: "chevron-up", categories: ["arrows"] },
  { name: "chevron-double-down", categories: ["arrows"] },
  { name: "chevron-double-left", categories: ["arrows"] },
  { name: "chevron-double-right", categories: ["arrows"] },
  { name: "chevron-double-up", categories: ["arrows"] },
  { name: "chip", categories: ["devices"] },
  { name: "circle", categories: ["shapes"] },
  { name: "circle-ci", categories: ["development"] },
  { name: "circle-half", categories: ["shapes"] },
  { name: "clock", categories: ["time"] },
  { name: "close", categories: ["ui"] },
  { name: "close-circle", categories: ["ui", "circle"] },
  { name: "close-o", categories: ["ui", "circle"] },
  { name: "close-r", categories: ["ui", "square"] },
  { name: "cloud", categories: ["ui"] },
  { name: "cloud-slash", categories: ["ui"] },
  { name: "code-climate", categories: ["development"] },
  { name: "code-review", categories: ["development"] },
  { name: "codepen", categories: ["development"] },
  { name: "codesandbox", categories: ["development"] },
  { name: "codescan", categories: ["development"] },
  { name: "coffee", categories: ["misc"] },
  { name: "cog", categories: ["ui"] },
  { name: "command-key", categories: ["devices"] },
  { name: "command-palette", categories: ["development"] },
  { name: "comment", categories: ["ui"] },
  { name: "comment-external", categories: ["ui"] },
  { name: "container", categories: ["misc"] },
  { name: "control-key", categories: ["devices"] },
  { name: "copyright", categories: ["ui"] },
  { name: "cross", categories: ["misc"] },
  { name: "crown", categories: ["misc"] },
  { name: "danger-circle", categories: ["ui", "circle"] },
  { name: "danger-o", categories: ["ui", "circle"] },
  { name: "database", categories: ["development"] },
  { name: "diamond", categories: ["shapes"] },
  { name: "digital-ocean", categories: ["development"] },
  { name: "disc", categories: ["multimedia"] },
  { name: "discord", categories: ["brand"] },
  { name: "discussion", categories: ["misc"] },
  { name: "discussion-closed", categories: ["misc"] },
  { name: "discussion-duplicated", categories: ["misc"] },
  { name: "discussion-outdated", categories: ["misc"] },
  { name: "divide", categories: ["math"] },
  { name: "download", categories: ["ui"] },
  { name: "draft", categories: ["ui"] },
  { name: "dribble", categories: ["brand"] },
  { name: "dropbox", categories: ["brand"] },
  { name: "eject", categories: ["multimedia"] },
  { name: "ellipsis", categories: ["misc"] },
  { name: "equal", categories: ["math"] },
  { name: "expand", categories: ["arrows"] },
  { name: "eye", categories: ["ui"] },
  { name: "eye-slash", categories: ["ui"] },
  { name: "facebook", categories: ["brand"] },
  { name: "figma", categories: ["brand"] },
  { name: "filter", categories: ["ui"] },
  { name: "flag", categories: ["ui"] },
  { name: "flame", categories: ["ui"] },
  { name: "flash", categories: ["ui"] },
  { name: "flash-circle", categories: ["ui", "circle"] },
  { name: "flash-o", categories: ["ui", "circle"] },
  { name: "focus", categories: ["ui"] },
  { name: "fold", categories: ["misc"] },
  { name: "fold-down", categories: ["misc"] },
  { name: "fold-up", categories: ["misc"] },
  { name: "format-bold", categories: ["typography"] },
  { name: "format-strikethrough", categories: ["typography"] },
  { name: "framer", categories: ["brand"] },
  { name: "ghost", categories: ["misc"] },
  { name: "gift", categories: ["misc"] },
  { name: "git", categories: ["development"] },
  { name: "git-branch", categories: ["development"] },
  { name: "git-commit", categories: ["development"] },
  { name: "git-compare", categories: ["development"] },
  { name: "git-fork", categories: ["development"] },
  { name: "git-merge", categories: ["development"] },
  { name: "git-pull-request", categories: ["development"] },
  { name: "github", categories: ["development"] },
  { name: "github-actions", categories: ["development"] },
  { name: "github-copilot", categories: ["development"] },
  { name: "gitlab", categories: ["development"] },
  { name: "gitter", categories: ["development"] },
  { name: "glass", categories: ["misc"] },
  { name: "glasses", categories: ["misc"] },
  { name: "globe", categories: ["ui"] },
  { name: "google", categories: ["brand"] },
  { name: "google-calendar", categories: ["brand"] },
  { name: "google-drive", categories: ["brand"] },
  { name: "google-meet", categories: ["brand"] },
  { name: "grabber", categories: ["ui"] },
  { name: "graph", categories: ["ui"] },
  { name: "greater-than", categories: ["math"] },
  { name: "greater-than-or-equal", categories: ["math"] },
  { name: "hash", categories: ["ui"] },
  { name: "headphone", categories: ["devices", "multimedia"] },
  { name: "heart", categories: ["ui"] },
  { name: "heart-o", categories: ["ui"] },
  { name: "help", categories: ["ui"] },
  { name: "hexagon", categories: ["shapes"] },
  { name: "history", categories: ["ui"] },
  { name: "home", categories: ["ui"] },
  { name: "hourglass", categories: ["time"] },
  { name: "inbox", categories: ["ui"] },
  { name: "infinity", categories: ["misc"] },
  { name: "info-circle", categories: ["ui", "circle"] },
  { name: "info-o", categories: ["ui", "circle"] },
  { name: "instagram", categories: ["brand"] },
  { name: "invision", categories: ["brand"] },
  { name: "iterations", categories: ["ui"] },
  { name: "javascript", categories: ["development"] },
  { name: "jenkins", categories: ["development"] },
  { name: "jest", categories: ["development"] },
  { name: "jsfiddle", categories: ["development"] },
  { name: "key", categories: ["ui"] },
  { name: "key-alt", categories: ["ui"] },
  { name: "keyboard", categories: ["devices"] },
  { name: "keyhole-circle", categories: ["ui", "circle"] },
  { name: "keyhole-o", categories: ["ui", "circle"] },
  { name: "kotlin", categories: ["development"] },
  { name: "law", categories: ["misc"] },
  { name: "layout-grid", categories: ["layout"] },
  { name: "layout-grid-small", categories: ["layout"] },
  { name: "layout-list", categories: ["layout"] },
  { name: "layout-pin", categories: ["layout"] },
  { name: "leaf", categories: ["misc"] },
  { name: "less-than", categories: ["math"] },
  { name: "less-than-or-equal", categories: ["math"] },
  { name: "lightbulb", categories: ["misc"] },
  { name: "link", categories: ["ui"] },
  { name: "linkedin", categories: ["brand"] },
  { name: "live", categories: ["multimedia"] },
  { name: "live-photo", categories: ["multimedia"] },
  { name: "loadbar", categories: ["loaders"] },
  { name: "loadbar-alt", categories: ["loaders"] },
  { name: "loadbar-doc", categories: ["loaders"] },
  { name: "loadbar-sound", categories: ["loaders"] },
  { name: "location", categories: ["ui"] },
  { name: "log", categories: ["misc"] },
  { name: "loom", categories: ["brand"] },
  { name: "mail", categories: ["ui"] },
  { name: "mail-read", categories: ["ui"] },
  { name: "markdown", categories: ["development"] },
  { name: "megaphone", categories: ["misc"] },
  { name: "mention", categories: ["ui"] },
  { name: "menu-close", categories: ["ui"] },
  { name: "menu-open", categories: ["ui"] },
  { name: "menu-round-circle", categories: ["ui", "circle"] },
  { name: "menu-round-o", categories: ["ui", "circle"] },
  { name: "message", categories: ["ui"] },
  { name: "message-circle", categories: ["ui", "circle"] },
  { name: "message-o", categories: ["ui", "circle"] },
  { name: "messenger", categories: ["brand"] },
  { name: "meta", categories: ["brand"] },
  { name: "meter", categories: ["ui"] },
  { name: "mic", categories: ["devices", "multimedia"] },
  { name: "mic-slash", categories: ["devices", "multimedia"] },
  { name: "microsoft", categories: ["brand"] },
  { name: "microsoft-teams", categories: ["brand"] },
  { name: "microsoft-windows", categories: ["brand"] },
  { name: "milestone", categories: ["misc"] },
  { name: "minus", categories: ["math"] },
  { name: "minus-circle", categories: ["ui", "circle"] },
  { name: "minus-o", categories: ["ui", "circle"] },
  { name: "minus-r", categories: ["ui", "square"] },
  { name: "money-sign", categories: ["misc"] },
  { name: "more", categories: ["ui"] },
  { name: "more-circle", categories: ["ui", "circle"] },
  { name: "more-o", categories: ["ui", "circle"] },
  { name: "more-r", categories: ["ui", "square"] },
  { name: "more-vertical", categories: ["ui"] },
  { name: "more-vertical-circle", categories: ["ui", "circle"] },
  { name: "more-vertical-o", categories: ["ui", "circle"] },
  { name: "more-vertical-r", categories: ["ui", "square"] },
  { name: "multi-select", categories: ["ui"] },
  { name: "music-note", categories: ["multimedia"] },
  { name: "music-note-alt", categories: ["multimedia"] },
  { name: "next", categories: ["multimedia"] },
  { name: "next-o", categories: ["multimedia", "circle"] },
  { name: "next-r", categories: ["multimedia", "square"] },
  { name: "next.js", categories: ["development"] },
  { name: "node.js", categories: ["development"] },
  { name: "not-equal", categories: ["math"] },
  { name: "note", categories: ["ui"] },
  { name: "notebook", categories: ["ui"] },
  { name: "npm", categories: ["development"] },
  { name: "numbers", categories: ["ui"] },
  { name: "option-key", categories: ["devices"] },
  { name: "options", categories: ["ui"] },
  { name: "organization", categories: ["ui"] },
  { name: "package", categories: ["misc"] },
  { name: "paintbrush", categories: ["ui"] },
  { name: "paperclip", categories: ["ui"] },
  { name: "password", categories: ["ui"] },
  { name: "patreon", categories: ["brand"] },
  { name: "pause", categories: ["multimedia"] },
  { name: "pause-o", categories: ["multimedia", "circle"] },
  { name: "pause-r", categories: ["multimedia", "square"] },
  { name: "paypal", categories: ["brand"] },
  { name: "pencil", categories: ["ui"] },
  { name: "percent", categories: ["math"] },
  { name: "phone", categories: ["devices"] },
  { name: "phone-o", categories: ["devices"] },
  { name: "pi", categories: ["math"] },
  { name: "pin", categories: ["ui"] },
  { name: "pin-slash", categories: ["ui"] },
  { name: "play", categories: ["multimedia"] },
  { name: "play-backwards", categories: ["multimedia"] },
  { name: "play-forwards", categories: ["multimedia"] },
  { name: "play-o", categories: ["multimedia", "circle"] },
  { name: "play-r", categories: ["multimedia", "square"] },
  { name: "playlist", categories: ["multimedia"] },
  { name: "playlist-add", categories: ["multimedia"] },
  { name: "playlist-check", categories: ["multimedia"] },
  { name: "playlist-remove", categories: ["multimedia"] },
  { name: "playlist-search", categories: ["multimedia"] },
  { name: "plus", categories: ["math"] },
  { name: "plus-circle", categories: ["ui", "circle"] },
  { name: "plus-minus", categories: ["math"] },
  { name: "plus-minus-slash", categories: ["math"] },
  { name: "plus-o", categories: ["ui", "circle"] },
  { name: "plus-r", categories: ["ui", "square"] },
  { name: "podcast", categories: ["multimedia"] },
  { name: "previous", categories: ["multimedia"] },
  { name: "previous-o", categories: ["multimedia", "circle"] },
  { name: "previous-r", categories: ["multimedia", "square"] },
  { name: "product-hunt", categories: ["brand"] },
  { name: "project", categories: ["misc"] },
  { name: "pulse", categories: ["ui"] },
  { name: "python", categories: ["development"] },
  { name: "ram", categories: ["devices"] },
  { name: "react", categories: ["development"] },
  { name: "record-o", categories: ["multimedia", "circle"] },
  { name: "redux", categories: ["development"] },
  { name: "repeat", categories: ["multimedia", "ui"] },
  { name: "repo", categories: ["misc"] },
  { name: "report", categories: ["misc"] },
  { name: "return", categories: ["ui"] },
  { name: "roadmap", categories: ["misc"] },
  { name: "rocket", categories: ["misc"] },
  { name: "rocket-chat", categories: ["brand"] },
  { name: "rust", categories: ["development"] },
  { name: "safe", categories: ["misc"] },
  { name: "send", categories: ["ui"] },
  { name: "send-alt", categories: ["ui"] },
  { name: "server", categories: ["development"] },
  { name: "serverless", categories: ["development"] },
  { name: "share", categories: ["ui"] },
  { name: "share-mobile", categories: ["ui"] },
  { name: "shield", categories: ["misc"] },
  { name: "shield-slash", categories: ["misc"] },
  { name: "shift-key", categories: ["devices"] },
  { name: "shortcuts", categories: ["ui"] },
  { name: "shuffle", categories: ["multimedia"] },
  { name: "side-by-side", categories: ["ui"] },
  { name: "sigma", categories: ["math"] },
  { name: "sign-in", categories: ["ui"] },
  { name: "sign-out", categories: ["ui"] },
  { name: "single-select", categories: ["ui"] },
  { name: "skype", categories: ["brand"] },
  { name: "slack", categories: ["brand"] },
  { name: "sort", categories: ["ui"] },
  { name: "sort-asc", categories: ["ui"] },
  { name: "sort-desc", categories: ["ui"] },
  { name: "sparkle", categories: ["ui"] },
  { name: "sparkle-o", categories: ["ui"] },
  { name: "speaker", categories: ["multimedia"] },
  { name: "spotify", categories: ["brand"] },
  { name: "square", categories: ["shapes"] },
  { name: "square-payments", categories: ["brand"] },
  { name: "square-root", categories: ["math"] },
  { name: "stack", categories: ["layout"] },
  { name: "stacked", categories: ["ui"] },
  { name: "star", categories: ["ui"] },
  { name: "star-o", categories: ["ui"] },
  { name: "stop", categories: ["multimedia"] },
  { name: "stop-o", categories: ["multimedia", "circle"] },
  { name: "stop-r", categories: ["multimedia", "square"] },
  { name: "stop-sign", categories: ["misc"] },
  { name: "stopwatch", categories: ["time"] },
  { name: "storybook", categories: ["brand"] },
  { name: "student", categories: ["misc"] },
  { name: "style", categories: ["ui"] },
  { name: "svelte", categories: ["development"] },
  { name: "swift", categories: ["development"] },
  { name: "sync", categories: ["ui"] },
  { name: "sync-alt", categories: ["ui"] },
  { name: "tab-key", categories: ["devices"] },
  { name: "tag", categories: ["ui"] },
  { name: "tags", categories: ["ui"] },
  { name: "tasklist", categories: ["ui"] },
  { name: "template", categories: ["layout"] },
  { name: "terminal", categories: ["development"] },
  { name: "thumbs-down", categories: ["ui"] },
  { name: "thumbs-up", categories: ["ui"] },
  { name: "tidal", categories: ["brand"] },
  { name: "timelapse", categories: ["time"] },
  { name: "timer", categories: ["time"] },
  { name: "times", categories: ["math"] },
  { name: "tools", categories: ["ui"] },
  { name: "tools-alt", categories: ["ui"] },
  { name: "touch-id", categories: ["devices"] },
  { name: "travis-ci", categories: ["development"] },
  { name: "tree", categories: ["misc"] },
  { name: "trello", categories: ["brand"] },
  { name: "triangle", categories: ["shapes"] },
  { name: "trophy", categories: ["misc"] },
  { name: "tumblr", categories: ["brand"] },
  { name: "twilio", categories: ["development"] },
  { name: "twitch", categories: ["brand"] },
  { name: "twitter", categories: ["brand"] },
  { name: "typescript", categories: ["development"] },
  { name: "unavailable-o", categories: ["ui", "circle"] },
  { name: "unblock-o", categories: ["ui", "circle"] },
  { name: "unfold", categories: ["misc"] },
  { name: "unlink", categories: ["ui"] },
  { name: "unread", categories: ["ui"] },
  { name: "unverified", categories: ["misc"] },
  { name: "upload", categories: ["ui"] },
  { name: "user", categories: ["ui"] },
  { name: "user-add", categories: ["ui"] },
  { name: "user-remove", categories: ["ui"] },
  { name: "users", categories: ["ui"] },
  { name: "vector", categories: ["ui"] },
  { name: "vercel", categories: ["development"] },
  { name: "verified", categories: ["misc"] },
  { name: "versions", categories: ["development"] },
  { name: "video", categories: ["multimedia"] },
  { name: "video-camera", categories: ["devices", "multimedia"] },
  { name: "vimeo", categories: ["brand"] },
  { name: "vinyl", categories: ["multimedia"] },
  { name: "volume-high", categories: ["multimedia"] },
  { name: "volume-low", categories: ["multimedia"] },
  { name: "volume-mid", categories: ["multimedia"] },
  { name: "vscode", categories: ["development"] },
  { name: "vue", categories: ["development"] },
  { name: "wand", categories: ["misc"] },
  { name: "wave", categories: ["misc"] },
  { name: "webcam", categories: ["devices", "multimedia"] },
  { name: "webhook", categories: ["development"] },
  { name: "website", categories: ["ui"] },
  { name: "webstorm", categories: ["development"] },
  { name: "whatsapp", categories: ["brand"] },
  { name: "wheelchair", categories: ["ui"] },
  { name: "wi-fi", categories: ["devices"] },
  { name: "workflow", categories: ["development"] },
  { name: "workplace", categories: ["brand"] },
  { name: "youtube", categories: ["brand"] },
  { name: "zap", categories: ["ui"] },
  { name: "zigzag", categories: ["shapes"] },
  { name: "zoom", categories: ["brand"] }
];
var icons = [...iconsCustom, ...iconsPack].sort((0, import_helpers5.sortByLocaleCompare)("name"));
var sizes = ["sm", "md", "lg"];
var sizesAll = ["xs", ...sizes];
var textDefaultOptions = {
  bold: false,
  italic: false,
  size: "md"
};

// src/components/Icon/Icon.tsx
var import_jsx_runtime = require("react/jsx-runtime");
var loadBar = import_react6.keyframes`
  0%, 100% { transform: translateX(0); width: 4px; }
  25%, 75% { transform: translateX(0); width: 24px; }
  50% { transform: translateX(20px); width: 4px }
`;
var loadBarDocument = import_react6.keyframes`
  0%, 10% { transform: translateX(-100%) }
  50%, 60% { transform: translateX(0) }
`;
var loadBarSound = import_react6.keyframes`
  10% {transform: scaleY(0.2) }
  30% {transform: scaleY(0.8) }
  60% {transform: scaleY(0.7) }
  80% {transform: scaleY(0.2) }
  100% {transform: scaleY(1) }
`;
var defaultProps = {
  size: 16,
  spin: false
};
var StyledIcon = (0, import_styled.default)(
  "span",
  getStyledOptions()
)((props) => {
  const { color, name = "", size, spin } = props;
  const theme = getTheme(props);
  let iconColor = color ?? "inherit";
  if (color) {
    const { mainColor } = getColorTokens(color, null, theme);
    iconColor = mainColor;
  }
  return import_react6.css`
    ${baseStyles(props)};
    color: ${iconColor};
    display: inline-flex;
    line-height: 1;
    height: ${(0, import_helpers6.px)(size)};
    width: ${(0, import_helpers6.px)(size)};
    ${marginStyles(props)};

    > * {
      ${(!!spin || name.startsWith("spinner")) && import_react6.css`
        animation: ${rotate} 1s infinite linear;
      `};
    }

    ${["loadbar", "loadbar-alt"].includes(name) && import_react6.css`
      rect:last-of-type {
        animation: ${loadBar} 2s infinite linear;
      }
    `};

    ${name === "loadbar-doc" && import_react6.css`
      g > rect {
        animation: ${loadBarDocument} 1s linear infinite alternate;
      }
    `};

    ${name === "loadbar-sound" && import_react6.css`
      g > rect {
        animation: ${loadBarSound} 1s linear infinite alternate;
        transform: scaleY(0);
        transform-origin: bottom;

        &:nth-of-type(2) {
          animation-delay: 0.2s;
        }

        &:nth-of-type(3) {
          animation-delay: 0.4s;
        }
      }
    `};
  `;
});
var Icon = (0, import_react5.forwardRef)((props, ref) => {
  const { name, size = 16, title, url, ...rest } = { ...defaultProps, ...props };
  const iconURL = (0, import_react5.useMemo)(() => {
    if (name) {
      const urlPrefix = iconsCustom.some((d) => d.name === name) ? "https://files.gilbarbara.dev/icons/" : "https://cdn.jsdelivr.net/npm/css.gg/icons/svg/";
      return `${urlPrefix}${name}.svg`;
    } else if (url) {
      return url;
    }
    return "";
  }, [name, url]);
  let titleString = name;
  if (!import_is_lite3.default.undefined(title)) {
    titleString = import_is_lite3.default.string(title) ? title : (0, import_react_innertext.default)(title);
  }
  if (!iconURL) {
    return null;
  }
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(StyledIcon, { ref, "data-component-name": "Icon", name, size, ...rest, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_react_inlinesvg.default, { height: size, src: iconURL, title: titleString, width: size }) });
});
Icon.displayName = "Icon";

// src/components/Text/Text.tsx
var import_react7 = require("react");
var import_react8 = require("@emotion/react");
var import_styled2 = __toESM(require("@emotion/styled"));
var import_jsx_runtime2 = require("react/jsx-runtime");
var StyledText = (0, import_styled2.default)(
  "span",
  getStyledOptions()
)((props) => {
  return import_react8.css`
    ${baseStyles(props)};
    display: inline-block;
    text-decoration: inherit;
    ${colorStyles(props)};
    ${textStyles(props)};
  `;
});
var Text = (0, import_react7.forwardRef)((props, ref) => /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(StyledText, { ref, "data-component-name": "Text", ...textDefaultOptions, ...props }));
Text.displayName = "Text";

// src/components/Alert/Alert.tsx
var import_jsx_runtime3 = require("react/jsx-runtime");
function getColor(type, light) {
  const colors2 = {
    success: light ? "green.100" : "green.600",
    warning: light ? "orange.100" : "orange.600",
    error: light ? "red.100" : "red.600",
    info: light ? "blue.100" : "blue.600",
    neutral: light ? "gray.100" : "gray.600"
  };
  return colors2[type];
}
function getIconOptions(props) {
  const { light, type } = props;
  const color = light ? getColor(type, false) : getColorTokens(getColor(type, light), null, getTheme(props)).textColor;
  const options = {
    success: {
      color,
      icon: "check-circle"
    },
    warning: {
      color,
      icon: "danger-circle"
    },
    error: {
      color,
      icon: "close-circle"
    },
    info: {
      color,
      icon: "info-circle"
    },
    neutral: {
      color,
      icon: "message-circle"
    }
  };
  return options[type];
}
var defaultProps2 = {
  align: "center",
  direction: "row",
  gap: 12,
  hideIcon: false,
  iconSize: 20,
  light: false,
  padding: "md",
  radius: "xs",
  type: "success",
  width: "100%"
};
var StyledAlert = (0, import_styled3.default)(
  "div",
  getStyledOptions("type")
)((props) => {
  const { align, direction, light, type } = props;
  const { grayScale: grayScale2, spacing: spacing2, white: white2, ...theme } = getTheme(props);
  const { mainColor, textColor: textColor2 } = getColorTokens(getColor(type, light), null, theme);
  return import_react10.css`
    ${baseStyles(props)};
    align-items: ${align};
    background-color: ${mainColor};
    color: ${textColor2};
    display: flex;
    flex-direction: ${direction};
    position: relative;
    width: 100%;
    ${borderStyles(props)};
    ${dimensionStyles(props)};
    ${flexBoxStyles(props)};
    ${marginStyles(props)};
    ${paddingStyles(props)};
    ${radiusStyles(props)};
  `;
});
var Alert = (0, import_react9.forwardRef)((props, ref) => {
  const { children, direction, hideIcon, icon, iconSize, light, type, ...rest } = (0, import_helpers8.mergeProps)(
    defaultProps2,
    props
  );
  const selected = getIconOptions((0, import_helpers8.mergeProps)(defaultProps2, props));
  return /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(
    StyledAlert,
    {
      ref,
      "data-component-name": "Alert",
      direction,
      light,
      role: "alert",
      type,
      ...rest,
      children: [
        !hideIcon && /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(Icon, { color: selected.color, name: icon ?? selected.icon, size: iconSize }),
        (0, import_react9.isValidElement)(children) ? children : /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(Text, { children })
      ]
    }
  );
});
Alert.displayName = "Alert";

// src/components/Anchor/Anchor.tsx
var import_react11 = require("react");
var import_react12 = require("@emotion/react");
var import_styled4 = __toESM(require("@emotion/styled"));
var import_helpers10 = require("@gilbarbara/helpers");
var import_jsx_runtime4 = require("react/jsx-runtime");
var defaultProps3 = {
  ...(0, import_helpers10.omit)(textDefaultOptions, "size"),
  color: "primary",
  display: "inline-flex",
  external: false,
  hideDecoration: false
};
var StyledAnchor = (0, import_styled4.default)(
  "a",
  getStyledOptions()
)((props) => {
  const { hideDecoration } = props;
  return import_react12.css`
    ${appearanceStyles};
    ${baseStyles(props)};
    align-items: center;
    color: inherit;
    cursor: pointer;
    font-family: inherit;
    line-height: 1;
    padding: 0;
    text-decoration: ${hideDecoration ? "none" : "underline"};
    ${colorStyles(props)};
    ${displayStyles(props)};
    ${marginStyles(props)};
    ${paddingStyles(props)};
    ${textStyles(props)};
  `;
});
var Anchor = (0, import_react11.forwardRef)((props, ref) => {
  const { children, external, iconAfter, iconBefore } = props;
  const { fontSize } = textStyles(props);
  let iconSize;
  if (fontSize) {
    iconSize = parseInt(`${fontSize}`, 10);
  }
  const additionalProps = defaultProps3;
  if (external) {
    additionalProps.rel = "noopener noreferrer";
    additionalProps.target = "_blank";
  }
  return /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(StyledAnchor, { ref, "data-component-name": "Anchor", ...additionalProps, ...props, children: [
    iconBefore && /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(Icon, { mr: "xxs", name: iconBefore, size: iconSize }),
    /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("span", { children }),
    iconAfter && /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(Icon, { ml: "xxs", name: iconAfter, size: iconSize })
  ] });
});
Anchor.displayName = "Anchor";

// src/components/AspectRatio/AspectRatio.tsx
var import_react13 = require("react");
var import_react14 = require("@emotion/react");
var import_styled5 = __toESM(require("@emotion/styled"));
var import_helpers11 = require("@gilbarbara/helpers");
var import_jsx_runtime5 = require("react/jsx-runtime");
var StyledAspectRatio = (0, import_styled5.default)(
  "div",
  getStyledOptions()
)((props) => {
  const { maxWidth, ratio } = props;
  return import_react14.css`
    ${baseStyles(props)};
    max-width: ${maxWidth ? (0, import_helpers11.px)(maxWidth) : "none"};
    overflow: hidden;
    position: relative;
    width: 100%;
    ${marginStyles(props)};

    &:before {
      content: '';
      display: flex;
      padding-bottom: ${`${(0, import_helpers11.round)(1 / ratio * 100)}%`};
      width: 100%;
    }

    > img,
    > video {
      object-fit: cover;
    }

    > * {
      align-self: center;
      display: flex;
      height: 100%;
      inset: 0;
      justify-content: center;
      position: absolute;
      width: 100%;
    }
  `;
});
var AspectRatio = (0, import_react13.forwardRef)((props, ref) => {
  const { children, ...rest } = props;
  return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(StyledAspectRatio, { ref, "data-component-name": "AspectRatio", ...rest, children });
});
AspectRatio.displayName = "AspectRatio";

// src/components/Avatar/Avatar.tsx
var import_react17 = require("react");
var import_react18 = require("@emotion/react");
var import_styled7 = __toESM(require("@emotion/styled"));
var import_helpers12 = require("@gilbarbara/helpers");

// src/components/Box/Box.tsx
var import_react15 = require("react");
var import_react16 = require("@emotion/react");
var import_styled6 = __toESM(require("@emotion/styled"));
var import_jsx_runtime6 = require("react/jsx-runtime");
var StyledBox = (0, import_styled6.default)(
  "div",
  getStyledOptions("fill")
)((props) => {
  const { flexBox } = props;
  return import_react16.css`
    display: ${flexBox ? "flex" : void 0};
    ${boxStyles(props)};
  `;
});
var boxDefaultProps = {
  flexBox: false
};
var Box = (0, import_react15.forwardRef)((props, ref) => /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(StyledBox, { ref, "data-component-name": "Box", ...boxDefaultProps, ...props }));
Box.displayName = "Box";
var boxCenterDefaultProps = {
  align: "center",
  direction: "column",
  display: "flex",
  justify: "center"
};
var BoxCenter = (0, import_react15.forwardRef)((props, ref) => /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(StyledBox, { ref, "data-component-name": "BoxCenter", ...boxCenterDefaultProps, ...props }));
BoxCenter.displayName = "BoxCenter";
var boxInlineDefaultProps = {
  align: "center",
  direction: "row",
  display: "inline-flex"
};
var BoxInline = (0, import_react15.forwardRef)((props, ref) => /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
  StyledBox,
  {
    ref,
    as: "span",
    "data-component-name": "BoxInline",
    ...boxInlineDefaultProps,
    ...props
  }
));
BoxInline.displayName = "BoxInline";

// src/components/Avatar/Avatar.tsx
var import_jsx_runtime7 = require("react/jsx-runtime");
var defaultProps4 = {
  bg: "primary",
  size: "md"
};
var Circle = (0, import_styled7.default)(
  "div",
  getStyledOptions()
)((props) => {
  const { size } = props;
  const { avatar: avatar2 } = getTheme(props);
  const selectedSize = avatar2[size];
  return import_react18.css`
    height: ${selectedSize.size};
    font-size: ${selectedSize.fontSize};
    line-height: ${selectedSize.size};
    text-align: center;
    width: ${selectedSize.size};
    ${colorStyles(props)};
  `;
});
var Avatar = (0, import_react17.forwardRef)((props, ref) => {
  const { image, name, size, ...rest } = { ...defaultProps4, ...props };
  const { avatar: avatar2 } = getTheme(props);
  const selectedSize = avatar2[size];
  return /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
    BoxCenter,
    {
      ref,
      "data-component-name": "Avatar",
      flex: { shrink: 0 },
      height: selectedSize.size,
      overflow: "hidden",
      radius: "round",
      width: selectedSize.size,
      ...rest,
      children: image ? /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("img", { alt: name, height: selectedSize.size, src: image, width: selectedSize.size }) : /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(Circle, { size, ...rest, children: (0, import_helpers12.getInitials)(name).toUpperCase() })
    }
  );
});
Avatar.displayName = "Avatar";

// src/components/Button/Button.tsx
var import_react19 = require("react");
var import_react20 = require("@emotion/react");
var import_styled8 = __toESM(require("@emotion/styled"));
var import_helpers14 = require("@gilbarbara/helpers");
var import_jsx_runtime8 = require("react/jsx-runtime");
var defaultProps5 = {
  bg: "primary",
  block: false,
  busy: false,
  disabled: false,
  invert: false,
  light: false,
  size: "md",
  transparent: false,
  type: "button",
  wide: false
};
var StyledButton = (0, import_styled8.default)(
  "button",
  getStyledOptions()
)((props) => {
  const { bg, block, busy, color, light, shape, size, wide } = props;
  const { button: button2, grayScale: grayScale2, radius: radius2, spacing: spacing2, ...theme } = getTheme(props);
  const { borderRadius, fontSize, fontWeight, height, lineHeight, padding } = button2[size];
  let buttonPadding = `${padding[0]} ${wide ? (0, import_helpers14.px)(parseInt(padding[1], 10) * 2) : padding[1]}`;
  let selectedRadius = borderRadius;
  if (shape) {
    buttonPadding = spacing2.xxs;
    switch (shape) {
      case "square": {
        selectedRadius = `0`;
        break;
      }
      case "circle": {
        selectedRadius = radius2.round;
        break;
      }
    }
  }
  return import_react20.css`
    ${appearanceStyles};
    ${baseStyles(props)};
    align-items: center;
    border-radius: ${selectedRadius};
    box-shadow: none;
    cursor: pointer;
    display: inline-flex;
    font-size: ${fontSize};
    font-weight: ${light ? 400 : fontWeight};
    min-height: ${height};
    min-width: ${height};
    justify-content: center;
    line-height: ${lineHeight};
    overflow: hidden;
    padding: ${buttonPadding};
    position: relative;
    text-decoration: none;
    transition:
      background-color 0.6s,
      border-color 0.6s;
    width: ${block ? "100%" : "auto"};
    ${colorStyles(props)};
    ${paddingStyles(props)};

    &:disabled {
      ${getDisableStyles(props, { isButton: true })};
    }

    &:focus {
      ${getOutlineStyles(getColorTokens(bg, color, theme).mainColor)};
    }

    ${!!busy && import_react20.css`
      pointer-events: none;
    `};
  `;
});
var Button = (0, import_react19.forwardRef)((props, ref) => {
  const { busy, children, shape, size } = { ...defaultProps5, ...props };
  const { button: button2 } = getTheme(props);
  const { fontSize } = button2[size];
  const content = {
    children,
    icon: busy && /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(Icon, { ml: "sm", name: "spinner", size: parseInt(fontSize, 10) + 4, spin: true })
  };
  if (shape && busy) {
    content.children = /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(Icon, { name: "spinner", size: parseInt(fontSize, 10) + 4, spin: true });
    content.icon = "";
  }
  return /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)(
    StyledButton,
    {
      ref,
      "data-component-name": "Button",
      ...defaultProps5,
      ...props,
      children: [
        content.children,
        content.icon
      ]
    }
  );
});
Button.displayName = "Button";

// src/components/ButtonGroup/ButtonGroup.tsx
var import_react21 = require("react");
var import_react22 = require("@emotion/react");
var import_styled9 = __toESM(require("@emotion/styled"));
var import_jsx_runtime9 = require("react/jsx-runtime");
var defaultProps6 = {
  bg: "primary",
  disabled: false,
  size: "md"
};
var StyledButtonGroup = (0, import_styled9.default)(
  "div",
  getStyledOptions()
)(
  (props) => import_react22.css`
    ${baseStyles(props)};
    display: inline-flex;

    > button {
      + button {
        margin-left: -1px;
      }

      &:first-of-type {
        border-bottom-right-radius: 0;
        border-top-right-radius: 0;
      }

      &:last-of-type {
        border-bottom-left-radius: 0;
        border-top-left-radius: 0;
      }

      &:not(:first-of-type):not(:last-of-type) {
        border-radius: 0;
      }
    }
  `
);
function ButtonGroup(props) {
  const { bg, children, color, disabled, size, ...rest } = { ...defaultProps6, ...props };
  const buttonProps = {
    bg,
    color,
    disabled,
    size
  };
  return /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(StyledButtonGroup, { "data-component-name": "ButtonGroup", ...rest, children: import_react21.Children.map(children, (child) => (0, import_react21.cloneElement)(child, { ...buttonProps })) });
}
ButtonGroup.displayName = "ButtonGroup";

// src/components/ButtonSplit/ButtonSplit.tsx
var import_react36 = require("react");
var import_react37 = require("@emotion/react");
var import_styled17 = __toESM(require("@emotion/styled"));

// src/components/ButtonUnstyled/ButtonUnstyled.tsx
var import_react23 = require("react");
var import_react24 = require("@emotion/react");
var import_styled10 = __toESM(require("@emotion/styled"));
var import_jsx_runtime10 = require("react/jsx-runtime");
var defaultProps7 = {
  ...textDefaultOptions,
  align: "center",
  busy: false,
  disabled: false,
  type: "button"
};
var StyledButtonUnstyled = (0, import_styled10.default)(
  "button",
  getStyledOptions()
)((props) => {
  const { align, busy, color, justify } = props;
  const { darkMode, ...theme } = getTheme(props);
  const selectedColor = color ?? darkMode ? "white" : "black";
  return import_react24.css`
    ${appearanceStyles};
    ${baseStyles(props)};
    align-items: ${align};
    background-color: transparent;
    border: 0;
    color: inherit;
    cursor: pointer;
    display: inline-flex;
    font-family: inherit;
    justify-content: ${justify};
    line-height: 1;
    padding: 0;
    ${borderStyles(props)};
    ${colorStyles(props)};
    ${displayStyles(props)};
    ${layoutStyles(props)};
    ${marginStyles(props)};
    ${paddingStyles(props)};
    ${radiusStyles(props)};
    ${textStyles(props)};

    :disabled {
      cursor: not-allowed;
      opacity: 0.6;
    }

    :focus {
      ${getOutlineStyles(getColorTokens(selectedColor, null, theme).mainColor)};
    }

    ${!!busy && import_react24.css`
      pointer-events: none;
    `};
  `;
});
var ButtonUnstyled = (0, import_react23.forwardRef)((props, ref) => {
  const { busy, children, ...rest } = { ...defaultProps7, ...props };
  const { fontSize = "16px" } = textStyles(props);
  return /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)(StyledButtonUnstyled, { ref, busy, "data-component-name": "ButtonUnstyled", ...rest, children: [
    children,
    busy && /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(Icon, { ml: "xxs", name: "spinner", size: parseInt(`${fontSize}`, 10) + 2, spin: true })
  ] });
});
ButtonUnstyled.displayName = "ButtonUnstyled";

// src/components/Menu/Menu.tsx
var import_react29 = require("react");
var import_react30 = require("@emotion/react");
var import_styled13 = __toESM(require("@emotion/styled"));
var import_helpers19 = require("@gilbarbara/helpers");
var import_hooks = require("@gilbarbara/hooks");
var import_deepmerge_ts2 = require("deepmerge-ts");
var import_is_lite4 = __toESM(require("is-lite"));

// src/modules/keyboardScope.ts
var KeyboardScope = class {
  element;
  options;
  constructor(element, options) {
    this.element = element;
    this.options = options;
    this.setFocus();
  }
  addScope = () => {
    window.addEventListener("keydown", this.handleKeyDown, false);
  };
  canBeTabbed = (element) => {
    const { tabIndex } = element;
    if (tabIndex === null || tabIndex < 0) {
      return false;
    }
    return !!element;
  };
  findValidElements = () => {
    return [].slice.call(this.element?.querySelectorAll(this.options.selector), 0).filter(this.canBeTabbed);
  };
  getElementIndex = (elements) => {
    return document.activeElement ? elements.indexOf(document.activeElement) : 0;
  };
  handleKeyDown = (event) => {
    const { code } = event;
    const { arrowNavigation, escCallback } = this.options;
    if (code === "Tab") {
      this.interceptTab(event);
    } else if (escCallback && code === "Escape") {
      escCallback();
    } else if (["horizontal", "both"].includes(arrowNavigation) && ["ArrowLeft", "ArrowRight"].includes(code)) {
      this.interceptArrows(event);
    } else if (["vertical", "both"].includes(arrowNavigation) && ["ArrowUp", "ArrowDown"].includes(code)) {
      this.interceptArrows(event);
    }
  };
  interceptArrows = (event) => {
    event.preventDefault();
    const { code } = event;
    const elements = this.findValidElements();
    const isPrevious = ["ArrowUp", "ArrowLeft"].includes(code);
    if (!elements.length) {
      return;
    }
    let index = this.getElementIndex(elements);
    if (index === -1 || index + 1 === elements.length && !isPrevious) {
      index = 0;
    } else if (isPrevious && index === 0) {
      index = elements.length - 1;
    } else {
      index += isPrevious ? -1 : 1;
    }
    elements[index].focus();
  };
  interceptTab = (event) => {
    event.preventDefault();
    const elements = this.findValidElements();
    const { shiftKey } = event;
    if (!elements.length) {
      return;
    }
    let index = this.getElementIndex(elements);
    if (index === -1 || !shiftKey && index + 1 === elements.length) {
      index = 0;
    } else if (shiftKey && index === 0) {
      index = elements.length - 1;
    } else {
      index += shiftKey ? -1 : 1;
    }
    elements[index].focus();
  };
  removeScope = () => {
    window.removeEventListener("keydown", this.handleKeyDown);
  };
  checkFocus = (target) => {
    if (target && document.activeElement !== target) {
      target.focus();
      window.requestAnimationFrame(() => this.checkFocus(target));
    }
  };
  setFocus = () => {
    const { initialFocusedElement } = this.options;
    if (!initialFocusedElement) {
      return;
    }
    const target = typeof initialFocusedElement === "string" ? this.element?.querySelector(initialFocusedElement) : initialFocusedElement;
    if (target) {
      window.requestAnimationFrame(() => this.checkFocus(target));
    }
  };
};

// src/components/ClickOutside/ClickOutside.tsx
var import_react25 = require("react");
var import_react26 = require("@emotion/react");
var import_styled11 = __toESM(require("@emotion/styled"));
var import_jsx_runtime11 = require("react/jsx-runtime");
var DISPLAY = {
  BLOCK: "block",
  FLEX: "flex",
  INLINE: "inline",
  INLINE_BLOCK: "inline-block",
  CONTENTS: "contents"
};
var StyledClickOutside = (0, import_styled11.default)(
  "div",
  getStyledOptions()
)((props) => {
  const { display } = props;
  return import_react26.css`
    display: ${display && Object.values(DISPLAY).includes(display) ? display : void 0};
    ${layoutStyles(props)};
  `;
});
function ClickOutsideComponent(props) {
  const { active, children, onClick, ...rest } = props;
  const containerRef = (0, import_react25.useRef)(null);
  const [isReady, setReady] = (0, import_react25.useState)(false);
  const isTouch = (0, import_react25.useRef)(false);
  const handleClick = (0, import_react25.useCallback)(
    (event) => {
      const container = containerRef.current;
      if (event.type === "touchend") {
        isTouch.current = true;
      }
      if (event.type === "click" && isTouch.current) {
        return;
      }
      if (container && !container.contains(event.target)) {
        onClick();
      }
    },
    [onClick]
  );
  (0, import_react25.useEffect)(() => {
    if (!isReady) {
      setReady(true);
    }
    if (active) {
      document.addEventListener("touchend", handleClick, true);
      document.addEventListener("click", handleClick, true);
    }
    return () => {
      document.removeEventListener("touchend", handleClick, true);
      document.removeEventListener("click", handleClick, true);
    };
  }, [active, handleClick, isReady]);
  return /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(
    StyledClickOutside,
    {
      ref: containerRef,
      "data-component-name": "ClickOutside",
      "data-ready": isReady,
      ...rest,
      children
    }
  );
}
var ClickOutside = (0, import_react25.memo)(ClickOutsideComponent);
ClickOutside.displayName = "ClickOutside";

// src/components/Menu/Items.tsx
var import_react27 = require("@emotion/react");
var import_styled12 = __toESM(require("@emotion/styled"));
var import_helpers17 = require("@gilbarbara/helpers");
var import_jsx_runtime12 = require("react/jsx-runtime");
var StyledMenuItemsWrapper = (0, import_styled12.default)(
  "div",
  getStyledOptions()
)((props) => {
  const { active, minWidth, position } = props;
  const [positionMain, positionCross] = position.split("-");
  const { grayScale: grayScale2, radius: radius2, shadow: shadow2, spacing: spacing2, white: white2 } = getTheme(props);
  const darkMode = isDarkMode(props);
  return import_react27.css`
    position: absolute;
    transform: scaleY(0);
    transition: transform 0.3s ${easing};
    z-index: 10;

    ${active && import_react27.css`
      transform: scaleY(1);
    `}

    ${positionMain === "bottom" && import_react27.css`
      top: 100%;
      transform-origin: top;
    `}

    ${positionMain === "left" && import_react27.css`
      right: 100%;
    `}

    ${positionMain === "right" && import_react27.css`
      left: 100%;
    `}

    ${positionMain === "top" && import_react27.css`
      bottom: 100%;
      transform-origin: bottom;
    `}

    ${positionCross === "bottom" && import_react27.css`
      bottom: 0;
      transform-origin: bottom;
    `}

    ${positionCross === "left" && import_react27.css`
      left: 0;
    `}

    ${positionCross === "right" && import_react27.css`
      right: 0;
    `}

    ${positionCross === "top" && import_react27.css`
      top: 0;
      transform-origin: top;
    `}

  > ul {
      background-color: ${darkMode ? grayScale2["800"] : white2};
      border-radius: ${radius2.xxs};
      box-shadow: ${shadow2.low};
      color: ${darkMode ? grayScale2["200"] : grayScale2["800"]};
      list-style: none;
      margin: 0;
      min-width: ${(0, import_helpers17.px)(minWidth)};
      overflow: hidden;
      padding: 0;

      ${positionMain === "bottom" && import_react27.css`
        margin-top: ${spacing2.xxs};
      `}

      ${positionMain === "left" && import_react27.css`
        margin-right: ${spacing2.xxs};
      `}

      ${positionMain === "right" && import_react27.css`
        margin-left: ${spacing2.xxs};
      `}

      ${positionMain === "top" && import_react27.css`
        margin-bottom: ${spacing2.xxs};
      `}
    }
  `;
});
function MenuItems(props) {
  const { active, children, id, minWidth, position } = props;
  return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
    StyledMenuItemsWrapper,
    {
      active,
      "data-component-name": "MenuItems",
      "data-state": active ? "open" : "closed",
      minWidth,
      position,
      children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
        "ul",
        {
          "aria-orientation": "vertical",
          "data-component-name": "MenuItemsWrapper",
          id: `menu-items-${id}`,
          role: "menu",
          children
        }
      )
    }
  );
}

// src/components/Menu/utils.tsx
var import_react28 = require("react");
var import_jsx_runtime13 = require("react/jsx-runtime");
var defaultProps8 = {
  accent: "primary",
  button: /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(Icon, { name: "more-vertical-o", size: 24, title: null }),
  disabled: false,
  disableCloseOnBlur: false,
  disableKeyboardNavigation: false,
  labels: {
    close: "Close menu",
    name: "Menu",
    open: "Open menu"
  },
  minWidth: 200,
  position: "bottom-right",
  trigger: "click"
};
var MenuContext = (0, import_react28.createContext)(void 0);
MenuContext.displayName = "MenuContext";
function MenuProvider({ children, closeMenu, props }) {
  const [state] = (0, import_react28.useState)(props);
  const value = (0, import_react28.useMemo)(
    () => ({
      closeMenu,
      state
    }),
    [closeMenu, state]
  );
  return /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(MenuContext.Provider, { value, children });
}
function useMenuContext() {
  const context = (0, import_react28.useContext)(MenuContext);
  if (!context) {
    throw new Error("useMenuContext must be used within a MenuProvider");
  }
  return context;
}

// src/components/Menu/Menu.tsx
var import_jsx_runtime14 = require("react/jsx-runtime");
var StyledMenu = import_styled13.default.nav`
  display: inline-flex;
  position: relative;
  vertical-align: middle;

  [data-component-name='ClickOutside'] {
    width: 100%;
  }
`;
var StyledMenuButton = (0, import_styled13.default)(ButtonUnstyled)((props) => {
  const { spacing: spacing2 } = getTheme(props);
  return import_react30.css`
    border-radius: 2px;
    display: flex;
    min-height: ${spacing2.lg};
    min-width: ${spacing2.lg};

    :disabled {
      cursor: not-allowed;
      opacity: 0.6;
    }
  `;
});
var Menu = (0, import_react29.forwardRef)((props, ref) => {
  const mergedProps = (0, import_helpers19.mergeProps)(defaultProps8, props);
  const {
    button: button2,
    children,
    disableCloseOnBlur,
    disabled,
    disableKeyboardNavigation,
    minWidth,
    onToggle,
    open,
    position,
    trigger
  } = mergedProps;
  const [active, setActive] = (0, import_react29.useState)(open ?? false);
  const localRef = (0, import_react29.useRef)(null);
  const mergedRefs = (0, import_hooks.useMergeRefs)(localRef, ref);
  const keyboardScope = (0, import_react29.useRef)();
  const onToggleRef = (0, import_hooks.useLatest)(onToggle);
  const id = (0, import_react29.useId)();
  const labels = (0, import_deepmerge_ts2.deepmerge)(defaultProps8.labels, mergedProps.labels);
  (0, import_hooks.useMount)(() => {
    if (!disableKeyboardNavigation) {
      keyboardScope.current = new KeyboardScope(localRef.current, {
        arrowNavigation: "both",
        escCallback: handleToggleMenu(false),
        selector: `#menu-items-${id.replace(/:/g, "\\:")} > [data-component-name="MenuItem"]`
      });
    }
  });
  (0, import_hooks.useUpdateEffect)(() => {
    const scope = keyboardScope.current;
    if (active) {
      scope?.addScope();
    }
    onToggleRef.current?.(active);
    return () => {
      if (!import_is_lite4.default.boolean(open)) {
        scope?.removeScope();
      }
    };
  }, [active, onToggleRef, open]);
  const handleClickOutside = (0, import_react29.useCallback)(() => {
    if (import_is_lite4.default.boolean(open) || disableCloseOnBlur) {
      return;
    }
    setActive(false);
  }, [disableCloseOnBlur, open]);
  const handleKeyDownButton = (0, import_react29.useCallback)(
    (event) => {
      if (disableKeyboardNavigation) {
        event.preventDefault();
      }
    },
    [disableKeyboardNavigation]
  );
  const handleToggleMenu = (0, import_react29.useCallback)(
    (force) => {
      return () => {
        if (disabled || import_is_lite4.default.boolean(open)) {
          return;
        }
        setActive((a) => force ?? !a);
      };
    },
    [disabled, open]
  );
  return /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(
    StyledMenu,
    {
      ref: mergedRefs,
      "aria-label": labels.name,
      "data-component-name": "Menu",
      onMouseEnter: trigger === "hover" ? handleToggleMenu(true) : void 0,
      onMouseLeave: trigger === "hover" ? handleToggleMenu(false) : void 0,
      children: /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(ClickOutside, { active, onClick: handleClickOutside, children: /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)(MenuProvider, { closeMenu: handleToggleMenu(false), props: (0, import_helpers19.omit)(mergedProps, "children"), children: [
        /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(
          StyledMenuButton,
          {
            "aria-controls": `menu-items-${id}`,
            "aria-expanded": active,
            "aria-haspopup": "menu",
            "aria-label": active ? labels.close : labels.open,
            "data-component-name": "MenuButton",
            disabled,
            onClick: handleToggleMenu(),
            onKeyDown: handleKeyDownButton,
            tabIndex: disableKeyboardNavigation ? -1 : 0,
            title: active ? labels.close : labels.open,
            type: "button",
            children: button2
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(MenuItems, { active, id, minWidth, position, children })
      ] }) })
    }
  );
});
Menu.displayName = "Menu";

// src/components/Menu/Item.tsx
var import_react31 = require("react");
var import_react32 = require("@emotion/react");
var import_styled14 = __toESM(require("@emotion/styled"));
var import_is_lite5 = __toESM(require("is-lite"));
var import_jsx_runtime15 = require("react/jsx-runtime");
var StyledMenuItem = (0, import_styled14.default)(
  "li",
  getStyledOptions()
)((props) => {
  const { accent = "primary", bg, color, disabled } = props;
  const { grayScale: grayScale2, spacing: spacing2, typography: typography2, ...theme } = getTheme(props);
  const darkMode = isDarkMode(props);
  const themeColor = darkMode ? grayScale2["200"] : grayScale2["800"];
  const { mainColor, textColor: textColor2 } = getColorTokens(bg ?? accent, color, theme);
  return import_react32.css`
    color: ${themeColor};
    cursor: ${disabled ? "not-allowed" : "pointer"};
    font-size: ${typography2.md.fontSize};
    opacity: ${disabled ? 0.6 : 1};
    transition: background-color 0.3s;

    ${!disabled && import_react32.css`
      &:focus-visible,
      &:hover,
      &:active {
        background-color: ${mainColor};
        color: ${textColor2};

        * {
          color: ${textColor2};
        }
      }
    `};

    a {
      color: ${themeColor};
      text-decoration: none;
    }

    > * {
      display: flex;
      padding: ${spacing2.xs} ${spacing2.sm};
      white-space: nowrap;
      width: 100%;
    }
  `;
});
function MenuItem(props) {
  const { children, disableAutoClose = false, disabled, onToggle, ...rest } = props;
  const { closeMenu, state } = useMenuContext();
  const handleToggle = (event) => {
    if (disabled) {
      return;
    }
    if ("code" in event && !state.disableKeyboardNavigation) {
      if (["Enter", "Space"].includes(event.code)) {
        onToggle?.(event);
        if (!disableAutoClose) {
          closeMenu?.();
        }
      }
    } else {
      onToggle?.(event);
      if (!disableAutoClose) {
        closeMenu?.();
      }
    }
  };
  let content;
  if (import_is_lite5.default.function(children)) {
    content = children({ closeMenu });
  } else if (!(0, import_react31.isValidElement)(children)) {
    content = /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("span", { children });
  } else {
    content = children;
  }
  return /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(
    StyledMenuItem,
    {
      accent: state.accent,
      "data-component-name": "MenuItem",
      disabled,
      onClick: handleToggle,
      onKeyDown: handleToggle,
      role: "menuitem",
      tabIndex: disabled || state.disableKeyboardNavigation ? -1 : 0,
      ...rest,
      children: content
    }
  );
}
MenuItem.displayName = "MenuItem";

// src/components/Menu/Separator.tsx
var import_react33 = require("@emotion/react");
var import_styled15 = __toESM(require("@emotion/styled"));
var import_jsx_runtime16 = require("react/jsx-runtime");
var StyledMenuSeparator = (0, import_styled15.default)(
  "div",
  getStyledOptions()
)((props) => {
  const { grayScale: grayScale2, spacing: spacing2 } = getTheme(props);
  return import_react33.css`
    background-color: ${grayScale2["200"]};
    height: 1px;
    margin-bottom: ${spacing2.xxs};
    margin-top: ${spacing2.xxs};
  `;
});
function MenuSeparator() {
  return /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(StyledMenuSeparator, { "data-component-name": "MenuSeparator", role: "separator" });
}
MenuSeparator.displayName = "MenuSeparator";

// src/components/Menu/Title.tsx
var import_react34 = require("react");
var import_react35 = require("@emotion/react");
var import_styled16 = __toESM(require("@emotion/styled"));
var import_jsx_runtime17 = require("react/jsx-runtime");
var StyledMenuTitle = (0, import_styled16.default)(
  "li",
  getStyledOptions()
)((props) => {
  const { grayScale: grayScale2, spacing: spacing2, typography: typography2 } = getTheme(props);
  return import_react35.css`
    [data-component-name='MenuTitleContent'] {
      padding: ${spacing2.xs} ${spacing2.sm};
    }

    [data-component-name='MenuTitleText'] {
      color: ${grayScale2["500"]};
      font-size: ${typography2.xs.fontSize};
      text-transform: uppercase;
    }
  `;
});
function MenuTitle({ children, ...rest }) {
  const content = (0, import_react34.isValidElement)(children) ? children : /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("span", { "data-component-name": "MenuTitleText", children });
  return /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(StyledMenuTitle, { "data-component-name": "MenuTitle", role: "presentation", ...rest, children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("div", { "data-component-name": "MenuTitleContent", children: content }) });
}
MenuTitle.displayName = "MenuTitle";

// src/components/ButtonSplit/ButtonSplit.tsx
var import_jsx_runtime18 = require("react/jsx-runtime");
var defaultProps9 = {
  bg: "primary",
  block: false,
  busy: false,
  disabled: false,
  invert: false,
  position: "bottom-right",
  size: "md"
};
var StyledButtonSplit = (0, import_styled17.default)(
  "div",
  getStyledOptions()
)((props) => {
  const { block, disabled, invert, size } = props;
  const { button: button2, grayScale: grayScale2, spacing: spacing2 } = getTheme(props);
  const darkMode = isDarkMode(props);
  const { borderRadius, fontSize, fontWeight, height, lineHeight, padding } = button2[size];
  const buttonPadding = `${padding[0]} ${padding[1]}`;
  const styles2 = colorStyles(props);
  if (disabled) {
    styles2.border = `1px solid ${darkMode ? grayScale2["800"] : grayScale2["100"]}`;
    styles2.borderColor = grayScale2["100"];
    styles2.color = grayScale2["500"];
  }
  const disabledStyles = disabled ? import_react37.css`
        ${getDisableStyles(props, { isButton: true })};
        border-color: ${darkMode ? grayScale2["850"] : grayScale2["100"]};
      ` : void 0;
  return import_react37.css`
    display: inline-flex;
    min-height: ${height};
    min-width: ${height};
    width: ${block ? "100%" : "auto"};

    [data-component-name='ButtonSplitMainButton'] {
      ${styles2};
      border-bottom-left-radius: ${borderRadius};
      border-right: 0;
      border-top-left-radius: ${borderRadius};
      display: flex;
      flex: 1;
      font-size: ${fontSize};
      font-weight: ${fontWeight};
      justify-content: center;
      line-height: ${lineHeight};
      opacity: 1;
      padding: ${buttonPadding};

      ${disabledStyles};

      &:focus {
        ${getOutlineStyles(styles2.backgroundColor)};
      }
    }

    [data-component-name='MenuButton'] {
      ${styles2};
      ${disabledStyles};
      align-items: center;
      border-left: ${invert ? styles2.border : `1px solid ${styles2.color}`};
      border-radius: 0 ${borderRadius} ${borderRadius} 0;
      display: flex;
      height: 100%;
      opacity: 1;
      padding: 0 ${spacing2[size === "xs" ? "xxs" : "xs"]};
      width: 100%;

      &:focus {
        ${getOutlineStyles(styles2.backgroundColor)};
      }
    }
  `;
});
function ButtonSplit(props) {
  const { busy, children, dataAttributes, label, onClick, onToggle, position, ...rest } = {
    ...defaultProps9,
    ...props
  };
  const { bg, disabled, size } = rest;
  const [active, setActive] = (0, import_react36.useState)(false);
  const handleToggle = (0, import_react36.useCallback)(
    (status) => {
      setActive(status);
      onToggle?.(status);
    },
    [onToggle]
  );
  let iconSize = 14;
  switch (size) {
    case "sm": {
      iconSize = 16;
      break;
    }
    case "md": {
      iconSize = 18;
      break;
    }
    case "lg": {
      iconSize = 22;
      break;
    }
    default: {
    }
  }
  return /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(StyledButtonSplit, { busy, "data-component-name": "ButtonSplit", position, ...rest, children: [
    /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
      ButtonUnstyled,
      {
        busy,
        "data-component-name": "ButtonSplitMainButton",
        disabled,
        onClick,
        ...dataAttributes,
        children: label
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
      Menu,
      {
        accent: bg,
        button: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Icon, { name: active ? "chevron-up" : "chevron-down", size: iconSize }),
        disabled: disabled || busy,
        onToggle: handleToggle,
        position,
        children
      }
    )
  ] });
}
ButtonSplit.displayName = "ButtonSplit";

// src/components/CheckboxAndRadio/Checkbox.tsx
var import_react39 = require("react");

// src/components/CheckboxAndRadio/utils.tsx
var import_react38 = require("@emotion/react");
var import_styled18 = __toESM(require("@emotion/styled"));
var import_helpers25 = require("@gilbarbara/helpers");
var StyledCheckboxRadioInput = (0, import_styled18.default)("input", getStyledOptions())`
  left: 0;
  opacity: 0;
  position: absolute;
  top: 0;
  z-index: -1;
`;
var StyledText2 = (0, import_styled18.default)(
  "span",
  getStyledOptions()
)((props) => {
  const { size } = props;
  const { typography: typography2 } = getTheme(props);
  const { fontSize } = typography2[size ?? "md"];
  return import_react38.css`
    font-size: ${fontSize};
  `;
});
var StyledElement = (0, import_styled18.default)(
  "span",
  getStyledOptions("label")
)((props) => {
  const { accent = "primary", borderless, category = "checkbox", label, size } = props;
  const { grayScale: grayScale2, radius: radius2, white: white2, ...theme } = getTheme(props);
  const darkMode = isDarkMode(props);
  const { mainColor } = getColorTokens(accent, null, theme);
  let backgroundColor = darkMode ? grayScale2["800"] : white2;
  if (borderless) {
    backgroundColor = darkMode ? grayScale2["700"] : grayScale2["100"];
  }
  let after;
  let dimensions = 18;
  if (size === "md") {
    dimensions = 20;
  }
  if (size === "lg") {
    dimensions = 22;
  }
  if (category === "checkbox") {
    let height = 4;
    let width = 7;
    if (size === "md") {
      height = 6;
      width = 9;
    }
    if (size === "lg") {
      height = 7;
      width = 11;
    }
    after = import_react38.css`
      border-bottom: 2px solid ${mainColor};
      border-left: 2px solid ${mainColor};
      height: ${(0, import_helpers25.px)(height)};
      transform: rotate(-45deg) translateY(-100%);
      width: ${(0, import_helpers25.px)(width)};
    `;
  } else {
    let innerDimensions = 6;
    if (size === "md") {
      innerDimensions = 7;
    }
    if (size === "lg") {
      innerDimensions = 8;
    }
    after = import_react38.css`
      background-color: ${mainColor};
      border-radius: 50%;
      height: ${(0, import_helpers25.px)(innerDimensions)};
      transform: translate(-50%, -50%);
      width: ${(0, import_helpers25.px)(innerDimensions)};
    `;
  }
  return import_react38.css`
    ${baseStyles(props)};
    background-color: ${backgroundColor};
    border: ${borderless ? 0 : `2px solid ${grayScale2["700"]}`};
    border-radius: ${category === "checkbox" ? radius2.xxs : radius2.round};
    display: inline-flex;
    flex-shrink: 0;
    height: ${(0, import_helpers25.px)(dimensions)};
    margin-right: ${label ? "6px" : "0"};
    overflow: hidden;
    position: relative;
    transition:
      background-color 0.2s,
      border-color 0.2s;
    width: ${(0, import_helpers25.px)(dimensions)};

    input:not(:disabled) ~ &:focus {
      ${getOutlineStyles(mainColor)};
    }

    &:after {
      content: '';
      display: none;
      position: absolute;
      left: 50%;
      top: 50%;
      ${after};
    }

    input:checked ~ & {
      border-color: ${mainColor};

      &:after {
        display: inline-block;
      }
    }

    input:disabled ~ & {
      ${getDisableStyles(props)};
    }
  `;
});
var StyledLabel = (0, import_styled18.default)(
  "label",
  getStyledOptions()
)((props) => {
  const { align, disabled } = props;
  return import_react38.css`
    ${marginStyles(props)};
    align-items: ${align};
    cursor: ${disabled ? "not-allowed" : "pointer"};
    display: flex;
    justify-content: flex-start;
    position: relative;
  `;
});
function getMarginProps(props) {
  return (0, import_helpers25.pick)(props, "margin", "mb", "ml", "mr", "mt", "mx", "my");
}
function handleKeyDown(event) {
  const target = event.target;
  const input = target.previousElementSibling;
  if (!input || input.disabled || !["Space", "Enter"].includes(event.code)) {
    return;
  }
  input.click();
}

// src/components/CheckboxAndRadio/Checkbox.tsx
var import_jsx_runtime19 = require("react/jsx-runtime");
var defaultProps10 = {
  accent: "primary",
  align: "center",
  borderless: false,
  disabled: false,
  size: "md"
};
var Checkbox = (0, import_react39.forwardRef)((props, ref) => {
  const {
    accent,
    align,
    borderless,
    checked,
    defaultChecked,
    disabled,
    id,
    label,
    name,
    size,
    style,
    ...rest
  } = {
    ...defaultProps10,
    ...props
  };
  const inputId = id ?? name;
  return /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)(
    StyledLabel,
    {
      align,
      "data-component-name": "Checkbox",
      disabled,
      htmlFor: inputId,
      size,
      ...getMarginProps(props),
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
          StyledCheckboxRadioInput,
          {
            ref,
            "aria-checked": checked ?? defaultChecked,
            checked,
            defaultChecked,
            disabled,
            id: inputId,
            name,
            type: "checkbox",
            ...rest
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
          StyledElement,
          {
            accent,
            borderless,
            category: "checkbox",
            "data-component-name": "CheckboxElement",
            label,
            onKeyDown: handleKeyDown,
            size,
            style,
            tabIndex: disabled ? -1 : 0
          }
        ),
        label && /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(StyledText2, { category: "checkbox", size, children: label })
      ]
    }
  );
});
Checkbox.displayName = "Checkbox";

// src/components/CheckboxAndRadio/Radio.tsx
var import_react40 = require("react");
var import_jsx_runtime20 = require("react/jsx-runtime");
var defaultProps11 = {
  accent: "primary",
  align: "center",
  borderless: false,
  disabled: false,
  size: "md"
};
var Radio = (0, import_react40.forwardRef)((props, ref) => {
  const {
    accent,
    align,
    borderless,
    checked,
    defaultChecked,
    disabled,
    id,
    label,
    name,
    size,
    style,
    ...rest
  } = {
    ...defaultProps11,
    ...props
  };
  return /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)(
    StyledLabel,
    {
      align,
      category: "radio",
      "data-component-name": "Radio",
      disabled,
      htmlFor: id,
      ...getMarginProps(props),
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
          StyledCheckboxRadioInput,
          {
            ref,
            "aria-checked": !!(checked ?? defaultChecked),
            checked,
            defaultChecked,
            disabled,
            id,
            name,
            role: "radio",
            type: "radio",
            ...rest
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
          StyledElement,
          {
            accent,
            borderless,
            category: "radio",
            "data-component-name": "RadioElement",
            label,
            onKeyDown: handleKeyDown,
            size,
            style,
            tabIndex: disabled ? -1 : 0
          }
        ),
        label && /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(StyledText2, { category: "radio", size, children: label })
      ]
    }
  );
});
Radio.displayName = "Radio";

// src/components/Collapse/Collapse.tsx
var import_react43 = require("react");
var import_react44 = require("@emotion/react");
var import_styled20 = __toESM(require("@emotion/styled"));
var import_helpers29 = require("@gilbarbara/helpers");
var import_hooks2 = require("@gilbarbara/hooks");
var import_is_lite6 = __toESM(require("is-lite"));

// src/components/Paragraph/Paragraph.tsx
var import_react41 = require("react");
var import_react42 = require("@emotion/react");
var import_styled19 = __toESM(require("@emotion/styled"));
var import_helpers27 = require("@gilbarbara/helpers");
var import_jsx_runtime21 = require("react/jsx-runtime");
var defaultProps12 = {
  skipMarginTop: false,
  ...textDefaultOptions
};
var StyledParagraph = (0, import_styled19.default)(
  "p",
  getStyledOptions()
)((props) => {
  const { skipMarginTop } = props;
  const { spacing: spacing2 } = getTheme(props);
  return import_react42.css`
    ${baseStyles(props)};
    margin-bottom: 0;
    margin-top: 0;
    ${alignStyles(props)};
    ${colorStyles(props)};
    ${marginStyles(props)};

    ${!skipMarginTop && import_react42.css`
      & + & {
        margin-top: ${(0, import_helpers27.px)(spacing2.sm)};
      }
    `};
  `;
});
var Paragraph = (0, import_react41.forwardRef)((props, ref) => {
  const { children, ...rest } = { ...defaultProps12, ...props };
  return /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(StyledParagraph, { ref, "data-component-name": "Paragraph", ...props, children: (0, import_react41.isValidElement)(children) ? children : /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(Text, { ...rest, children }) });
});
Paragraph.displayName = "Paragraph";

// src/components/Collapse/Collapse.tsx
var import_jsx_runtime22 = require("react/jsx-runtime");
var defaultProps13 = {
  animationEnterDuration: 0.3,
  animationExitDuration: 0.3,
  defaultOpen: false,
  hideToggle: false,
  initialHeight: 0
};
var getContentAnimation = (initialHeight, endHeight) => import_react44.keyframes`
  0% {
    height: ${(0, import_helpers29.px)(initialHeight)};
    opacity: ${initialHeight ? 1 : 0};
  }
  100% {
    height: ${(0, import_helpers29.px)(endHeight)};
    opacity: 1;
  }
`;
var StyledCollapse = (0, import_styled20.default)("div")((props) => {
  return import_react44.css`
    ${baseStyles(props)};
    display: flex;
    flex-direction: column;
    ${marginStyles(props)};
  `;
});
var Header = (0, import_styled20.default)("header")`
  align-items: center;
  cursor: pointer;
  display: flex;
  justify-content: space-between;
`;
var Content = (0, import_styled20.default)("div")((props) => {
  const {
    animationEnterDuration,
    animationExitDuration,
    hasTitle,
    initialHeight,
    isOpen,
    maxHeight,
    scrollHeight,
    shouldAnimate
  } = props;
  const { spacing: spacing2 } = getTheme(props);
  let animation2;
  let height = initialHeight;
  if (shouldAnimate) {
    animation2 = isOpen ? import_react44.css`
          animation: ${getContentAnimation(initialHeight, maxHeight ?? scrollHeight)}
            ${animationEnterDuration}s ease-in-out forwards;
        ` : import_react44.css`
          animation: ${getContentAnimation(initialHeight, maxHeight ?? scrollHeight)}
            ${animationExitDuration}s ease-in-out reverse;
        `;
  } else {
    height = isOpen ? maxHeight ?? scrollHeight : initialHeight;
  }
  return import_react44.css`
    ${animation2};
    height: ${(0, import_helpers29.px)(height)};
    overflow: hidden;
    ${hasTitle && `margin-top: ${(0, import_helpers29.px)(spacing2.xs)}`};
  `;
});
function Collapse(props) {
  const { children, defaultOpen, hideToggle, onToggle, open, title, ...rest } = (0, import_helpers29.mergeProps)(
    defaultProps13,
    props
  );
  const isControlled = typeof open === "boolean";
  const [isOpen, setIsOpen] = (0, import_react43.useState)(isControlled ? open : defaultOpen);
  const [shouldAnimate, setShouldAnimate] = (0, import_react43.useState)(false);
  const contentRef = (0, import_react43.useRef)(null);
  const previousIsOpen = (0, import_hooks2.usePrevious)(isOpen);
  (0, import_react43.useEffect)(() => {
    if (isControlled) {
      setIsOpen(open);
      setShouldAnimate(import_is_lite6.default.boolean(previousIsOpen) && previousIsOpen !== open);
    }
  }, [isControlled, open, previousIsOpen]);
  const handleAnimationEnd = () => {
    setShouldAnimate(false);
  };
  const handleClickToggle = () => {
    if (!isControlled) {
      setIsOpen(!isOpen);
      setShouldAnimate(true);
    }
    onToggle?.(!isOpen);
  };
  return /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)(
    StyledCollapse,
    {
      "data-component-name": "Collapse",
      "data-state": isOpen ? "open" : "closed",
      ...rest,
      children: [
        Boolean(title) && /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)(Header, { "data-component-name": "CollapseHeader", onClick: handleClickToggle, children: [
          (0, import_react43.isValidElement)(title) ? title : /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(Paragraph, { children: title }),
          !hideToggle && isOpen ? /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(Icon, { name: "chevron-up" }) : /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(Icon, { name: "chevron-down" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
          Content,
          {
            ref: contentRef,
            "data-component-name": "CollapseContent",
            hasTitle: Boolean(title),
            isOpen,
            onAnimationEnd: handleAnimationEnd,
            scrollHeight: contentRef.current?.scrollHeight ?? 0,
            shouldAnimate,
            ...rest,
            children
          }
        )
      ]
    }
  );
}
Collapse.displayName = "Collapse";

// src/components/ComponentWrapper/ComponentWrapper.tsx
var import_react45 = require("react");
var import_react46 = require("@emotion/react");
var import_styled21 = __toESM(require("@emotion/styled"));
var import_helpers31 = require("@gilbarbara/helpers");
var import_is_lite7 = __toESM(require("is-lite"));
var import_jsx_runtime23 = require("react/jsx-runtime");
var defaultProps14 = {
  size: 40,
  width: "100%"
};
var StyledComponentWrapper = (0, import_styled21.default)(
  "div",
  getStyledOptions("prefix", "suffix")
)((props) => {
  const { width } = props;
  return import_react46.css`
    position: relative;
    width: ${(0, import_helpers31.px)(width)};
    ${marginStyles(props)};
  `;
});
var ComponentWrapper = (0, import_react45.forwardRef)((props, ref) => {
  const { children, prefix, size, suffix, ...rest } = { ...defaultProps14, ...props };
  const content = {};
  const height = import_is_lite7.default.array(size) ? size[1] : size;
  const width = import_is_lite7.default.array(size) ? size[0] : size;
  if (prefix) {
    content.prefix = /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(BoxCenter, { bottom: 0, height, left: 0, position: "absolute", top: 0, width, children: import_is_lite7.default.string(prefix) ? /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(Icon, { name: prefix, size: 20 }) : prefix });
  }
  if (suffix) {
    content.suffix = /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(BoxCenter, { bottom: 0, height, position: "absolute", right: 0, top: 0, width, children: import_is_lite7.default.string(suffix) ? /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(Icon, { name: suffix, size: 20 }) : suffix });
  }
  return /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)(StyledComponentWrapper, { ref, "data-component-name": "ComponentWrapper", ...rest, children: [
    content.prefix,
    children,
    content.suffix
  ] });
});
ComponentWrapper.displayName = "ComponentWrapper";

// src/components/Container/Container.tsx
var import_react47 = require("react");
var import_react48 = require("@emotion/react");
var import_styled22 = __toESM(require("@emotion/styled"));
var import_helpers32 = require("@gilbarbara/helpers");
var import_jsx_runtime24 = require("react/jsx-runtime");
var flexMap = {
  center: "center",
  right: "flex-end",
  left: "flex-start",
  stretch: "stretch"
};
var defaultProps15 = {
  align: "stretch",
  fullScreen: false,
  responsive: true,
  textAlign: "left",
  justify: "start",
  verticalPadding: false
};
var StyledContainer = (0, import_styled22.default)(Box)((props) => {
  const { align, fullScreen, fullScreenOffset, responsive: responsive2, textAlign, verticalPadding } = props;
  const styles2 = {
    alignItems: flexMap[align],
    textAlign
  };
  if (fullScreen) {
    styles2.minHeight = fullScreenOffset ? `calc(100vh - ${(0, import_helpers32.px)(fullScreenOffset)})` : "100vh";
  }
  return import_react48.css`
    ${baseStyles(props)};
    display: flex;
    flex-direction: column;
    margin-left: auto;
    margin-right: auto;
    position: relative;
    width: 100%;
    ${(0, import_react48.css)(styles2)};
    ${getContainerStyles(props, { responsive: responsive2, verticalPadding })};
    ${flexBoxStyles(props)};
    ${flexItemStyles(props)};
    ${layoutStyles(props)};
    ${marginStyles(props)};
    ${paddingStyles(props, true)};
  `;
});
var Container = (0, import_react47.forwardRef)((props, ref) => {
  return /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(StyledContainer, { ref, "data-component-name": "Container", ...defaultProps15, ...props });
});
Container.displayName = "Container";

// src/components/CopyToClipboard/CopyToClipboard.tsx
var import_react51 = require("react");
var import_react52 = require("@emotion/react");
var import_styled24 = __toESM(require("@emotion/styled"));

// src/components/Tooltip/Tooltip.tsx
var import_react49 = require("react");
var import_react_innertext2 = __toESM(require("react-innertext"));
var import_react50 = require("@emotion/react");
var import_styled23 = __toESM(require("@emotion/styled"));
var import_helpers33 = require("@gilbarbara/helpers");
var import_is_lite8 = __toESM(require("is-lite"));
var import_jsx_runtime25 = require("react/jsx-runtime");
var defaultProps16 = {
  ...(0, import_helpers33.omit)(textDefaultOptions, "size"),
  arrowDistance: 4,
  arrowMargin: 4,
  arrowLength: 8,
  bg: "gray.700",
  delay: 180,
  disabled: false,
  duration: 260,
  easing: "ease-in-out",
  eventType: "hover",
  placement: "bottom-middle",
  radius: "xxs",
  size: "sm",
  zIndex: 100
};
var arrowSize = 6;
var StyledTooltip = (0, import_styled23.default)(
  "div",
  getStyledOptions()
)(
  (props) => import_react50.css`
    ${baseStyles(props)};
    display: inline-flex;
    line-height: 1;
    position: relative;
  `
);
var StyledArrow = import_styled23.default.span((props) => {
  const { arrowDistance, arrowLength, arrowMargin, bg, placement } = props;
  const [position, align] = placement.split("-");
  const arrowStyles = {};
  const styles2 = {};
  switch (position) {
    case "bottom": {
      arrowStyles.borderLeft = `${(0, import_helpers33.px)(arrowSize)} solid transparent`;
      arrowStyles.borderRight = `${(0, import_helpers33.px)(arrowSize)} solid transparent`;
      arrowStyles.borderBottom = `${(0, import_helpers33.px)(arrowLength)} solid ${bg}`;
      styles2.top = `-${(0, import_helpers33.px)(arrowLength)}`;
      styles2.height = arrowLength;
      styles2.width = arrowSize * 2;
      break;
    }
    case "left": {
      arrowStyles.borderTop = `${(0, import_helpers33.px)(arrowSize)} solid transparent`;
      arrowStyles.borderBottom = `${(0, import_helpers33.px)(arrowSize)} solid transparent`;
      arrowStyles.borderLeft = `${(0, import_helpers33.px)(arrowLength)} solid ${bg}`;
      styles2.right = `-${(0, import_helpers33.px)(arrowLength)}`;
      styles2.height = arrowSize * 2;
      styles2.width = arrowLength;
      break;
    }
    case "right": {
      arrowStyles.borderTop = `${(0, import_helpers33.px)(arrowSize)} solid transparent`;
      arrowStyles.borderBottom = `${(0, import_helpers33.px)(arrowSize)} solid transparent`;
      arrowStyles.borderRight = `${(0, import_helpers33.px)(arrowLength)} solid ${bg}`;
      styles2.left = `-${(0, import_helpers33.px)(arrowLength)}`;
      styles2.height = arrowSize * 2;
      styles2.width = arrowLength;
      break;
    }
    case "top": {
      arrowStyles.borderLeft = `${(0, import_helpers33.px)(arrowSize)} solid transparent`;
      arrowStyles.borderRight = `${(0, import_helpers33.px)(arrowSize)} solid transparent`;
      arrowStyles.borderTop = `${(0, import_helpers33.px)(arrowLength)} solid ${bg}`;
      styles2.bottom = `-${(0, import_helpers33.px)(arrowLength)}`;
      styles2.height = arrowLength;
      styles2.width = arrowSize * 2;
      break;
    }
  }
  if (["bottom", "top"].includes(position)) {
    if (align === "start") {
      styles2.left = arrowMargin;
    } else if (align === "middle") {
      styles2.left = "50%";
      styles2.transform = "translateX(-50%)";
    } else {
      styles2.right = arrowDistance;
    }
  } else if (["left", "right"].includes(position)) {
    if (align === "start") {
      styles2.top = arrowDistance;
    } else if (align === "middle") {
      styles2.top = "50%";
      styles2.transform = "translateY(-50%)";
    } else {
      styles2.bottom = arrowDistance;
    }
  }
  return import_react50.css`
    display: block;
    position: absolute;
    z-index: 5;
    ${styles2};

    &:before {
      content: '';
      display: block;
      height: 0;
      width: 0;
      ${arrowStyles};
    }
  `;
});
var StyledBody = (0, import_styled23.default)(
  "span",
  getStyledOptions()
)(
  (props) => {
    const {
      arrowDistance,
      arrowLength,
      bg,
      color,
      delay,
      duration,
      easing: easing2,
      placement,
      size,
      wrap,
      zIndex
    } = props;
    const { spacing: spacing2 } = getTheme(props);
    const arrowSpacing = arrowLength + arrowDistance;
    const [position, align] = placement.split("-");
    const styles2 = {};
    if (align === "start") {
      if (["left", "right"].includes(position)) {
        styles2.top = arrowDistance;
      } else {
        styles2.left = 0;
      }
    } else if (align === "middle") {
      if (["left", "right"].includes(position)) {
        styles2.top = "50%";
        styles2.transform = "translateY(-50%)";
      } else {
        styles2.left = "50%";
        styles2.transform = "translateX(-50%)";
      }
    } else if (["left", "right"].includes(position)) {
      styles2.bottom = arrowDistance;
    } else {
      styles2.right = arrowDistance;
    }
    switch (position) {
      case "bottom": {
        styles2.marginTop = arrowSpacing;
        styles2.top = "100%";
        break;
      }
      case "left": {
        styles2.right = "100%";
        styles2.marginRight = arrowSpacing;
        break;
      }
      case "right": {
        styles2.left = "100%";
        styles2.marginLeft = arrowSpacing;
        break;
      }
      case "top": {
        styles2.bottom = "100%";
        styles2.marginBottom = arrowSpacing;
        break;
      }
    }
    switch (size) {
      case "xs":
      case "sm": {
        styles2.padding = `${spacing2.xxs} ${spacing2.xs}`;
        break;
      }
      default: {
        styles2.padding = `${spacing2.xs} ${spacing2.sm}`;
        break;
      }
    }
    let width;
    switch (wrap) {
      case "sm": {
        width = "100px";
        break;
      }
      case "md": {
        width = "200px";
        break;
      }
      case "lg": {
        width = "320px";
        break;
      }
    }
    return import_react50.css`
      animation: ${fadeIn} ${duration}ms forwards ${easing2};
      animation-delay: ${delay}ms;
      background-color: ${bg};
      color: ${color};
      opacity: 0;
      position: absolute;
      text-align: center;
      white-space: ${wrap ? "initial" : "nowrap"};
      width: ${width};
      z-index: ${zIndex};
      ${radiusStyles(props)};
      ${shadowStyles(props, true)};
      ${textStyles(props)};
      ${styles2};
    `;
  }
);
var StyledContent = (0, import_styled23.default)(Text)`
  position: relative;
  z-index: 10;
`;
function TooltipBody(props) {
  const {
    arrowDistance,
    arrowLength,
    arrowMargin,
    bg,
    bold,
    color,
    content,
    italic,
    placement,
    radius: radius2,
    shadow: shadow2,
    size,
    style,
    wrap,
    ...rest
  } = props;
  return /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)(
    StyledBody,
    {
      arrowDistance,
      arrowLength,
      arrowMargin,
      bg,
      color,
      "data-component-name": "TooltipBody",
      placement,
      radius: radius2,
      shadow: shadow2,
      size,
      style,
      wrap,
      ...rest,
      children: [
        (0, import_react49.isValidElement)(content) ? content : /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(StyledContent, { bold, "data-component-name": "TooltipContent", italic, size, children: content }),
        /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(
          StyledArrow,
          {
            arrowDistance,
            arrowLength,
            arrowMargin,
            bg,
            color,
            "data-component-name": "TooltipArrow",
            placement
          }
        )
      ]
    }
  );
}
function Tooltip(props) {
  const mergedProps = (0, import_helpers33.mergeProps)(defaultProps16, props);
  const { ariaLabel, bg, children, color, content, disabled, eventType, open, title, ...rest } = mergedProps;
  const [isOpen, setOpen] = (0, import_react49.useState)(open ?? false);
  const theme = getTheme({ theme: (0, import_react50.useTheme)() });
  const label = (0, import_react49.useMemo)(() => ariaLabel ?? (0, import_react_innertext2.default)(content), [ariaLabel, content]);
  const { mainColor, textColor: textColor2 } = getColorTokens(bg, color, theme);
  (0, import_react49.useEffect)(() => {
    setOpen(open ?? false);
  }, [open]);
  const handleClick = () => {
    if (eventType === "click" && !disabled) {
      setOpen(!isOpen);
    }
  };
  const handleMouseEnter = () => {
    if (eventType === "hover" && !import_is_lite8.default.boolean(open) && !disabled) {
      setOpen(true);
    }
  };
  const handleMouseLeave = () => {
    if (eventType === "hover" && !import_is_lite8.default.boolean(open) && !disabled) {
      setOpen(false);
    }
  };
  return /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)(
    StyledTooltip,
    {
      "aria-label": label,
      "data-component-name": "Tooltip",
      onClick: handleClick,
      onMouseEnter: handleMouseEnter,
      onMouseLeave: handleMouseLeave,
      role: "tooltip",
      title,
      ...rest,
      children: [
        children,
        isOpen && /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(TooltipBody, { ...mergedProps, bg: mainColor, color: textColor2 })
      ]
    }
  );
}
Tooltip.displayName = "Tooltip";

// src/components/CopyToClipboard/CopyToClipboard.tsx
var import_jsx_runtime26 = require("react/jsx-runtime");
var defaultProps17 = {
  disableAnimation: false,
  icon: "copy",
  size: 16,
  tooltipCopiedText: "Copied!",
  tooltipText: "Copy"
};
var StyledCopyToClipboard = (0, import_styled24.default)(
  "span",
  getStyledOptions()
)((props) => {
  return import_react52.css`
    ${baseStyles(props)};
    cursor: pointer;
    display: inline-flex;
    line-height: 1;
    position: relative;
    ${colorStyles(props)};
    ${marginStyles(props)};
  `;
});
var StyledIcon2 = (0, import_styled24.default)(Icon)`
  pointer-events: none;
  transition: transform 0.6s;

  &.will-animate {
    animation: ${fadeInOut} 0.6s ease-out 1 forwards;
  }

  &.is-animating {
    transform: scale(4);
  }
`;
function CopyToClipboard(props) {
  const { disableAnimation, icon, onCopy, size, text, tooltipCopiedText, tooltipText, ...rest } = {
    ...defaultProps17,
    ...props
  };
  const [content, setContent] = (0, import_react51.useState)(tooltipText);
  const isActive = (0, import_react51.useRef)(false);
  const theme = getTheme({ theme: (0, import_react52.useTheme)() });
  (0, import_react51.useEffect)(() => {
    isActive.current = true;
    return () => {
      isActive.current = false;
    };
  }, []);
  const handleClick = async (event) => {
    if (!disableAnimation) {
      animateIcon(event.currentTarget, rest.color ?? "primary", theme);
    }
    try {
      await navigator.clipboard.writeText(text);
      setContent(tooltipCopiedText);
      onCopy?.(text);
      setTimeout(() => {
        if (isActive.current) {
          setContent(tooltipText);
        }
      }, 2e3);
    } catch (error) {
      setContent(error.message);
      onCopy?.(error.message);
    }
  };
  return /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(StyledCopyToClipboard, { "data-component-name": "CopyToClipboard", onClick: handleClick, ...rest, children: /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(Tooltip, { content, placement: "right-middle", size: "xs", children: /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(StyledIcon2, { name: icon, size, title: null }) }) });
}
CopyToClipboard.displayName = "CopyToClipboard";

// src/components/DataTable/DataTable.tsx
var import_react64 = require("react");
var import_react65 = require("@emotion/react");
var import_hooks3 = require("@gilbarbara/hooks");

// src/components/Pagination/Pagination.tsx
var import_react54 = require("@emotion/react");
var import_styled26 = __toESM(require("@emotion/styled"));
var import_is_lite9 = __toESM(require("is-lite"));

// src/components/Pagination/Button.tsx
var import_react53 = require("@emotion/react");
var import_styled25 = __toESM(require("@emotion/styled"));
var import_jsx_runtime27 = require("react/jsx-runtime");
var StyledPaginationButton = (0, import_styled25.default)(
  ButtonUnstyled,
  getStyledOptions()
)((props) => {
  const { accent = "primary", current } = props;
  const { black: black2, spacing: spacing2, typography: typography2, white: white2, ...theme } = getTheme(props);
  const color = isDarkMode(props) ? white2 : black2;
  const { mainColor, textColor: textColor2 } = getColorTokens(accent, null, theme);
  return import_react53.css`
    align-items: center;
    border-radius: 50%;
    background-color: ${current ? mainColor : "transparent"};
    color: ${current ? textColor2 : color};
    display: flex;
    font-size: ${typography2.sm.fontSize};
    font-weight: ${700};
    justify-content: center;
    height: ${spacing2.xl};
    line-height: 1;
    width: ${spacing2.xl};

    &:disabled {
      opacity: 0.3;
      pointer-events: none;
    }
  `;
});
function PaginationButton(props) {
  const { accent, children, currentPage, disabled, onClick, page, type } = props;
  const current = page === currentPage && children === page;
  const handleClick = () => {
    onClick?.(page, type);
  };
  return /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(
    StyledPaginationButton,
    {
      accent,
      current,
      "data-component-name": "PaginationButton",
      "data-current": current,
      "data-page": page,
      "data-type": type,
      disabled,
      onClick: handleClick,
      children: children ?? page
    }
  );
}
PaginationButton.displayName = "PaginationButton";

// src/components/Pagination/Pagination.tsx
var import_jsx_runtime28 = require("react/jsx-runtime");
var defaultProps18 = {
  accent: "primary",
  align: "end",
  disableEdgeNavigation: false,
  edgeNavigationLimit: 3
};
var StyledPagination = (0, import_styled26.default)(
  "div",
  getStyledOptions()
)((props) => {
  const { align } = props;
  return import_react54.css`
    align-items: center;
    display: flex;
    justify-content: ${align};
    ${borderStyles(props)};
    ${marginStyles(props)};
    ${paddingStyles(props)};
  `;
});
function Pagination(props) {
  const {
    accent,
    currentPage,
    disableEdgeNavigation,
    edgeNavigationLimit = 3,
    onClick,
    totalPages,
    ...rest
  } = { ...defaultProps18, ...props };
  const items = [];
  if (totalPages <= 1) {
    return null;
  }
  if (!disableEdgeNavigation && totalPages > edgeNavigationLimit) {
    items.push({
      type: "first",
      disabled: currentPage === 1,
      page: 1,
      content: /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(Icon, { name: "chevron-double-left" })
    });
  }
  items.push({
    type: "previous",
    disabled: currentPage === 1,
    page: currentPage - 1,
    content: /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(Icon, { name: "chevron-left" })
  });
  if (disableEdgeNavigation && totalPages > 6) {
    items.push({ type: "page", page: 1 });
    if (currentPage > 3) {
      items.push({ type: "between-1", content: "..." });
    }
    if (currentPage === totalPages) {
      items.push({ type: "page", page: currentPage - 2 });
    }
    if (currentPage > 2) {
      items.push({ type: "page", page: currentPage - 1 });
    }
    if (currentPage !== 1 && currentPage !== totalPages) {
      items.push({ type: "page", page: currentPage });
    }
    if (currentPage < totalPages - 1) {
      items.push({ type: "page", page: currentPage + 1 });
    }
    if (currentPage === 1) {
      items.push({ type: "page", page: currentPage + 2 });
    }
    if (currentPage < totalPages - 2) {
      items.push({ type: "between-2", content: "..." });
    }
    items.push({ type: "page", page: totalPages });
  } else {
    const pages = Array.from({ length: totalPages }, (_, index) => index + 1).filter((p) => {
      const limit = currentPage + 2 <= totalPages ? currentPage - 1 : totalPages - 2;
      return p >= limit && p < currentPage + (currentPage === 1 || currentPage === totalPages - 1 ? 3 : 2);
    });
    pages.forEach((d) => {
      items.push({ type: "page", page: d });
    });
  }
  items.push({
    type: "next",
    disabled: currentPage === totalPages,
    page: currentPage + 1,
    content: /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(Icon, { name: "chevron-right" })
  });
  if (!disableEdgeNavigation && totalPages > edgeNavigationLimit) {
    items.push({
      type: "last",
      disabled: currentPage === totalPages,
      page: totalPages,
      content: /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(Icon, { name: "chevron-double-right" })
    });
  }
  return /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(StyledPagination, { "data-component-name": "Pagination", ...rest, children: items.map(
    (d, index) => import_is_lite9.default.number(d.page) ? /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(
      PaginationButton,
      {
        accent,
        currentPage,
        disabled: d.disabled ?? false,
        onClick,
        page: d.page,
        type: d.type,
        children: d.content ?? d.page
      },
      `${d.type}-${d.page ?? index}`
    ) : /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("span", { children: "..." }, d.type)
  ) });
}
Pagination.displayName = "Pagination";

// src/components/DataTable/Body.tsx
var import_react61 = require("react");

// src/components/DataTable/utils.ts
var import_react_innertext3 = __toESM(require("react-innertext"));
var import_is_lite10 = __toESM(require("is-lite"));
function getBorder(darkMode) {
  return [{ side: "top", color: darkMode ? "gray.700" : "gray.100" }];
}
function getRowContent(input, key) {
  const item = input[key];
  return import_is_lite10.default.plainObject(item) && "label" in item ? item.label : item;
}
function getRowKey(input, index) {
  return import_is_lite10.default.string(input.id) || import_is_lite10.default.number(input.id) ? input.id : index;
}
function sortData(data, sortBy, sortDirection) {
  if (!sortBy) {
    return data;
  }
  return [...data].sort((a, b) => {
    const leftValue = a[sortBy];
    const rightValue = b[sortBy];
    const left = import_is_lite10.default.plainObject(leftValue) && "value" in leftValue ? leftValue.value : (0, import_react_innertext3.default)(leftValue);
    const right = import_is_lite10.default.plainObject(rightValue) && "value" in rightValue ? rightValue.value : (0, import_react_innertext3.default)(rightValue);
    if (sortDirection === "desc") {
      return right.toLowerCase().localeCompare(left.toLowerCase(), void 0, { numeric: true });
    }
    return left.toLowerCase().localeCompare(right.toLowerCase(), void 0, { numeric: true });
  });
}

// src/components/Loader/Loader.tsx
var import_react60 = require("@emotion/react");

// src/components/Loader/Grow.tsx
var import_react55 = require("@emotion/react");
var import_styled27 = __toESM(require("@emotion/styled"));
var import_helpers37 = require("@gilbarbara/helpers");
var import_jsx_runtime29 = require("react/jsx-runtime");
var grow = ({ size = 32 }) => import_react55.keyframes`
  0% {
    height: 0;
    width: 0;
  }

  30% {
    border-width: ${(0, import_helpers37.px)(size && size / 2.5)};
    opacity: 1;
  }

  100% {
    border-width: 0;
    height: ${(0, import_helpers37.px)(size)};
    opacity: 0;
    width: ${(0, import_helpers37.px)(size)};
  }
`;
var StyledLoaderGrow = (0, import_styled27.default)(
  "div",
  getStyledOptions()
)((props) => {
  const { block, color = "primary", size = 32 } = props;
  const { darkColor: darkColor2, lightColor: lightColor2, spacing: spacing2, ...theme } = getTheme(props);
  const { mainColor } = getColorTokens(color, null, theme);
  return import_react55.css`
    display: ${block ? "flex" : "inline-flex"};
    height: ${(0, import_helpers37.px)(size)};
    margin: ${block ? spacing2.lg : 0} auto;
    position: relative;
    width: ${(0, import_helpers37.px)(size)};

    > div {
      animation: ${grow(props)} 1.15s infinite cubic-bezier(0.2, 0.6, 0.36, 1);
      border: 0 solid ${mainColor};
      border-radius: 50%;
      height: 0;
      left: 50%;
      position: absolute;
      top: 50%;
      transform: translate(-50%, -50%);
      width: 0;
    }
  `;
});
function LoaderGrow(props) {
  return /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(StyledLoaderGrow, { "data-component-name": "LoaderGrow", ...props, children: /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("div", {}) });
}
LoaderGrow.displayName = "LoaderGrow";

// src/components/Loader/Pill.tsx
var import_react56 = require("@emotion/react");
var import_styled28 = __toESM(require("@emotion/styled"));
var import_helpers39 = require("@gilbarbara/helpers");
var import_polished2 = require("polished");
var import_jsx_runtime30 = require("react/jsx-runtime");
var animation = import_react56.keyframes`
  0% {
    transform: translateX(-10%);
  }

  50% {
    transform: translateX(100%);
  }

  100% {
    transform: translateX(-10%);
  }
`;
var StyledLoaderPill = (0, import_styled28.default)(
  "div",
  getStyledOptions()
)((props) => {
  const { block, color = "primary", size = 128 } = props;
  const { darkColor: darkColor2, grayScale: grayScale2, lightColor: lightColor2, spacing: spacing2, ...theme } = getTheme(props);
  const ratio = 0.16;
  const borderRadius = (0, import_helpers39.px)(size / 2);
  const { mainColor } = getColorTokens(color, null, theme);
  return import_react56.css`
    background-color: ${isDarkMode(props) ? grayScale2["700"] : grayScale2["100"]};
    border-radius: ${borderRadius};
    display: ${block ? "flex" : "inline-flex"};
    height: ${(0, import_helpers39.px)(Math.ceil(size * ratio))};
    margin: ${block ? spacing2.lg : 0} auto;
    overflow: hidden;
    position: relative;
    width: ${(0, import_helpers39.px)(size)};

    div {
      animation: ${animation} 2s infinite ease-in-out;
      background-color: ${mainColor};
      border-radius: ${borderRadius};
      content: '';
      bottom: 0;
      display: block;
      left: -10%;
      position: absolute;
      top: 0;
      width: 70%;
      z-index: 10;
    }

    div:nth-of-type(2) {
      animation-delay: 0.04s;
      background-color: ${(0, import_polished2.rgba)(mainColor, 0.3)};
      z-index: 5;
    }

    div:nth-of-type(3) {
      animation-delay: 0.05s;
      background-color: ${(0, import_polished2.rgba)(mainColor, 0.2)};
      z-index: 4;
    }
  `;
});
function LoaderPill(props) {
  return /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)(StyledLoaderPill, { "data-component-name": "LoaderPill", ...props, children: [
    /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("div", {}),
    /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("div", {}),
    /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("div", {})
  ] });
}
LoaderPill.displayName = "LoaderPill";

// src/components/Loader/Pride.tsx
var import_react57 = require("@emotion/react");
var import_styled29 = __toESM(require("@emotion/styled"));
var import_helpers41 = require("@gilbarbara/helpers");
var import_jsx_runtime31 = require("react/jsx-runtime");
var StyledLoaderPride = (0, import_styled29.default)(
  "div",
  getStyledOptions()
)((props) => {
  const { block, size = 32 } = props;
  const { spacing: spacing2 } = getTheme(props);
  return import_react57.css`
    display: ${block ? "flex" : "inline-flex"};
    height: ${(0, import_helpers41.px)(size)};
    margin: ${block ? spacing2.lg : 0} auto;
    position: relative;
    width: ${(0, import_helpers41.px)(size)};

    #LoaderPrideGroup {
      animation: ${rotate} 1s infinite linear;
      transform-origin: 10px 10px;
    }
  `;
});
function LoaderPride(props) {
  const { size } = props;
  return /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(StyledLoaderPride, { "data-component-name": "LoaderPride", ...props, children: /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)(
    "svg",
    {
      height: size,
      version: "1.1",
      viewBox: "0 0 24 24",
      width: size,
      xmlns: "http://www.w3.org/2000/svg",
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("title", { children: "Pride" }),
        /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("defs", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)(
            "linearGradient",
            {
              id: "linearGradient-vitwvdhq8u-1",
              x1: "0%",
              x2: "100%",
              y1: "44.721611%",
              y2: "55.278389%",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("stop", { offset: "0%", stopColor: "#FFCE00" }),
                /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("stop", { offset: "100%", stopColor: "#FB9600" })
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)(
            "linearGradient",
            {
              id: "linearGradient-vitwvdhq8u-2",
              x1: "23.6069814%",
              x2: "76.3930186%",
              y1: "0%",
              y2: "100%",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("stop", { offset: "0%", stopColor: "#FB9600" }),
                /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("stop", { offset: "100%", stopColor: "#E25335" })
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("linearGradient", { id: "linearGradient-vitwvdhq8u-3", x1: "0%", x2: "0%", y1: "0%", y2: "100%", children: [
            /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("stop", { offset: "0%", stopColor: "#E25335" }),
            /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("stop", { offset: "100%", stopColor: "#DE349E" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)(
            "linearGradient",
            {
              id: "linearGradient-vitwvdhq8u-4",
              x1: "76.3930186%",
              x2: "23.6069814%",
              y1: "0%",
              y2: "100%",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("stop", { offset: "0%", stopColor: "#DE349E" }),
                /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("stop", { offset: "100%", stopColor: "#BF2FDC" })
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)(
            "linearGradient",
            {
              id: "linearGradient-vitwvdhq8u-5",
              x1: "100%",
              x2: "7.47355734e-15%",
              y1: "44.721611%",
              y2: "55.278389%",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("stop", { offset: "0%", stopColor: "#BF2FDC" }),
                /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("stop", { offset: "100%", stopColor: "#5D33D5" })
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)(
            "linearGradient",
            {
              id: "linearGradient-vitwvdhq8u-6",
              x1: "100%",
              x2: "2.41767548e-14%",
              y1: "55.278389%",
              y2: "44.721611%",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("stop", { offset: "0%", stopColor: "#5D33D5" }),
                /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("stop", { offset: "100%", stopColor: "#2B7CD7" })
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)(
            "linearGradient",
            {
              id: "linearGradient-vitwvdhq8u-7",
              x1: "76.3930186%",
              x2: "23.6069814%",
              y1: "100%",
              y2: "0%",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("stop", { offset: "0%", stopColor: "#2B7CD7" }),
                /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("stop", { offset: "100%", stopColor: "#33C3DD" })
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)(
            "linearGradient",
            {
              id: "linearGradient-vitwvdhq8u-8",
              x1: "100%",
              x2: "100%",
              y1: "100%",
              y2: "-5.74835557e-15%",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("stop", { offset: "0%", stopColor: "#33C3DD" }),
                /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("stop", { offset: "100%", stopColor: "#32D9A1" })
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)(
            "linearGradient",
            {
              id: "linearGradient-vitwvdhq8u-9",
              x1: "23.6069814%",
              x2: "76.3930186%",
              y1: "100%",
              y2: "5.68434189e-14%",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("stop", { offset: "0%", stopColor: "#32D9A1" }),
                /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("stop", { offset: "100%", stopColor: "#3FCB2A" })
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)(
            "linearGradient",
            {
              id: "linearGradient-vitwvdhq8u-10",
              x1: "0%",
              x2: "100%",
              y1: "55.278389%",
              y2: "44.721611%",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("stop", { offset: "0%", stopColor: "#3FCB2A" }),
                /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("stop", { offset: "100%", stopColor: "#FFCE00" })
              ]
            }
          )
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("g", { transform: "translate(2.000000, 2.000000)", children: /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("g", { id: "LoaderPrideGroup", strokeWidth: "4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(
            "path",
            {
              d: "M10,3.70074342e-16 C12.111796,3.70074342e-16 14.1693886,0.668517671 15.8778738,1.90979148",
              stroke: "url(#linearGradient-vitwvdhq8u-1)"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(
            "path",
            {
              d: "M15.8778738,1.90979148 C17.5863375,3.15106838 18.8579841,4.9013458 19.5105576,6.90976918",
              stroke: "url(#linearGradient-vitwvdhq8u-2)"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(
            "path",
            {
              d: "M19.5105576,6.90976918 C20.1631475,8.91821275 20.1631475,11.081698 19.5105576,13.0901416",
              stroke: "url(#linearGradient-vitwvdhq8u-3)"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(
            "path",
            {
              d: "M19.5105576,13.0901416 C18.8579841,15.098565 17.5863375,16.8488424 15.8778738,18.0901193",
              stroke: "url(#linearGradient-vitwvdhq8u-4)"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(
            "path",
            {
              d: "M15.8778738,18.0901193 C14.1693886,19.3313931 12.111796,19.9999108 10,19.9999108",
              stroke: "url(#linearGradient-vitwvdhq8u-5)"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(
            "path",
            {
              d: "M10,19.9999108 C7.888204,19.9999108 5.83061142,19.3313931 4.12212622,18.0901193",
              stroke: "url(#linearGradient-vitwvdhq8u-6)"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(
            "path",
            {
              d: "M4.12212622,18.0901193 C2.41366248,16.8488424 1.14201593,15.098565 0.48944242,13.0901416",
              stroke: "url(#linearGradient-vitwvdhq8u-7)"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(
            "path",
            {
              d: "M0.48944242,13.0901416 C-0.163147473,11.081698 -0.163147473,8.91821275 0.48944242,6.90976918",
              stroke: "url(#linearGradient-vitwvdhq8u-8)"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(
            "path",
            {
              d: "M0.48944242,6.90976918 C1.14201593,4.9013458 2.41366248,3.15106838 4.12212622,1.90979148",
              stroke: "url(#linearGradient-vitwvdhq8u-9)"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(
            "path",
            {
              d: "M4.12212622,1.90979148 C5.83061142,0.668517671 7.888204,3.70074342e-16 10,3.70074342e-16",
              stroke: "url(#linearGradient-vitwvdhq8u-10)"
            }
          )
        ] }) })
      ]
    }
  ) });
}
LoaderPride.displayName = "LoaderPride";

// src/components/Loader/Pulse.tsx
var import_react58 = require("@emotion/react");
var import_styled30 = __toESM(require("@emotion/styled"));
var import_helpers43 = require("@gilbarbara/helpers");
var import_jsx_runtime32 = require("react/jsx-runtime");
var pulse = ({ size = 32 }) => import_react58.keyframes`
  0% {
    height: 0;
    left: ${(0, import_helpers43.px)(size / 2)};
    opacity: 1;
    top: ${(0, import_helpers43.px)(size / 2)};
    width: 0;
  }

  100% {
    height: ${(0, import_helpers43.px)(size)};
    left: 0;
    opacity: 0;
    top: 0;
    width: ${(0, import_helpers43.px)(size)};
  }
`;
var StyledLoaderPulse = (0, import_styled30.default)(
  "div",
  getStyledOptions()
)((props) => {
  const { block, color = "primary", size = 32 } = props;
  const { darkColor: darkColor2, lightColor: lightColor2, spacing: spacing2, ...theme } = getTheme(props);
  const { mainColor } = getColorTokens(color, null, theme);
  return import_react58.css`
    display: ${block ? "flex" : "inline-flex"};
    height: ${(0, import_helpers43.px)(size)};
    margin: ${block ? spacing2.lg : 0} auto;
    position: relative;
    width: ${(0, import_helpers43.px)(size)};

    > div {
      animation: ${pulse(props)} 1.2s cubic-bezier(0, 0.2, 0.8, 1) infinite;
      border: ${(0, import_helpers43.px)(Math.round(size / 16))} solid ${mainColor};
      border-radius: 50%;
      height: 0;
      left: ${(0, import_helpers43.px)(size / 2)};
      opacity: 1;
      position: absolute;
      top: ${(0, import_helpers43.px)(size / 2)};
      transform-origin: center;
      width: 0;
    }

    > div:nth-of-type(2) {
      animation-delay: -0.5s;
    }
  `;
});
function LoaderPulse(props) {
  return /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)(StyledLoaderPulse, { "data-component-name": "LoaderPulse", ...props, children: [
    /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("div", {}),
    /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("div", {})
  ] });
}
LoaderPulse.displayName = "LoaderPulse";

// src/components/Loader/Rotate.tsx
var import_react59 = require("@emotion/react");
var import_styled31 = __toESM(require("@emotion/styled"));
var import_helpers45 = require("@gilbarbara/helpers");
var import_jsx_runtime33 = require("react/jsx-runtime");
var dash = import_react59.keyframes`
  0% {
    stroke-dasharray: 1, 200;
    stroke-dashoffset: 0;
  }

  50% {
    stroke-dasharray: 89, 200;
    stroke-dashoffset: -35px;
  }

  100% {
    stroke-dasharray: 89, 200;
    stroke-dashoffset: -124px;
  }
`;
var StyledLoaderRotate = (0, import_styled31.default)(
  "div",
  getStyledOptions()
)((props) => {
  const { block } = props;
  const { spacing: spacing2 } = getTheme(props);
  return import_react59.css`
    display: ${block ? "flex" : "inline-flex"};
    margin: ${block ? spacing2.lg : 0} auto;
    text-align: center;
  `;
});
var StyledLoaderRotateSVG = (0, import_styled31.default)(
  "svg",
  getStyledOptions()
)((props) => {
  const { size } = props;
  return import_react59.css`
    animation: ${rotate} 2s linear infinite;
    height: ${(0, import_helpers45.px)(size)};
    margin: auto;
    transform-origin: center center;
    width: ${(0, import_helpers45.px)(size)};
  `;
});
var StyledLoaderRotateCircle = (0, import_styled31.default)("circle", getStyledOptions())`
  animation: ${dash} 1.5s infinite ease-in-out;
  stroke: ${(props) => props.color};
  stroke-dasharray: 1, 200;
  stroke-dashoffset: 0;
  stroke-linecap: round;
`;
function LoaderRotate(props) {
  const { color = "primary", size = 32 } = props;
  const { darkColor: darkColor2, lightColor: lightColor2, ...theme } = getTheme(props);
  const { mainColor } = getColorTokens(color, null, theme);
  return /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(StyledLoaderRotate, { "data-component-name": "LoaderRotate", ...props, children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(StyledLoaderRotateSVG, { size, viewBox: "25 25 50 50", children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
    StyledLoaderRotateCircle,
    {
      color: mainColor,
      cx: "50",
      cy: "50",
      fill: "none",
      r: "20",
      strokeWidth: 2
    }
  ) }) });
}
LoaderRotate.displayName = "LoaderRotate";

// src/components/Loader/Loader.tsx
var import_jsx_runtime34 = require("react/jsx-runtime");
var defaultProps19 = {
  color: "primary",
  block: false,
  type: "pill"
};
function Loader(props) {
  const { type, ...rest } = { ...defaultProps19, ...props };
  const theme = getTheme({ theme: (0, import_react60.useTheme)() });
  switch (type) {
    case "grow": {
      return /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(LoaderGrow, { theme, ...rest });
    }
    case "pride": {
      return /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(LoaderPride, { theme, ...rest });
    }
    case "pulse": {
      return /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(LoaderPulse, { theme, ...rest });
    }
    case "rotate": {
      return /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(LoaderRotate, { theme, ...rest });
    }
    case "pill":
    default: {
      return /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(LoaderPill, { theme, ...rest });
    }
  }
}
Loader.displayName = "Loader";

// src/components/DataTable/Body.tsx
var import_jsx_runtime35 = require("react/jsx-runtime");
function DataTableBody(props) {
  const {
    accent,
    clean,
    columns,
    darkMode,
    data,
    isResponsive,
    loaderSize,
    loaderType,
    loading,
    sortColumn
  } = props;
  const isInitialLoad = loading && !data.length;
  return /* @__PURE__ */ (0, import_jsx_runtime35.jsxs)(
    Box,
    {
      "data-component-name": "DataTableBody",
      minHeight: 55,
      mt: !clean ? "sm" : void 0,
      pb: !clean ? "sm" : void 0,
      position: "relative",
      children: [
        data.map((item, index) => /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(
          Box,
          {
            bg: darkMode ? "gray.900" : "white",
            border: isResponsive ? getBorder(darkMode) : void 0,
            "data-component-name": "DataTableBodyRow",
            display: "flex",
            mt: !clean && index > 0 ? "sm" : void 0,
            radius: clean ? void 0 : "xs",
            wrap: isResponsive ? "wrap" : "nowrap",
            children: columns.map(
              ({ hideOnResponsive, isAction, key, max, min, size, title }, columnIndex) => {
                let maxWidth = max ?? size;
                if (isResponsive && sortColumn === key) {
                  maxWidth = void 0;
                }
                return /* @__PURE__ */ (0, import_jsx_runtime35.jsxs)(
                  Box,
                  {
                    align: "flex-start",
                    border: clean && !isResponsive ? getBorder(darkMode) : void 0,
                    "data-component-name": "DataTableBodyColumn",
                    direction: "column",
                    display: "flex",
                    flex: "grow",
                    maxWidth,
                    minWidth: min ?? size,
                    order: isAction ? 1 : columnIndex + 1,
                    px: clean ? "sm" : "md",
                    py: clean ? "sm" : "md",
                    wrap: "wrap",
                    children: [
                      isResponsive && !hideOnResponsive && /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(
                        Paragraph,
                        {
                          color: "gray",
                          mb: "xxs",
                          size: "xs",
                          style: { textTransform: "uppercase" },
                          children: title
                        }
                      ),
                      getRowContent(item, key)
                    ]
                  },
                  key
                );
              }
            )
          },
          getRowKey(item, index)
        )),
        loading && /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(
          BoxCenter,
          {
            bg: !isInitialLoad ? "rgba(200, 200, 200, 0.5)" : void 0,
            bottom: 0,
            left: 0,
            pointerEvents: "fill",
            position: "absolute",
            right: 0,
            top: 0,
            zIndex: 10,
            children: /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(Loader, { color: accent, size: loaderSize, type: loaderType })
          }
        )
      ]
    }
  );
}
DataTableBody.displayName = "DataTableBody";
var Body_default = (0, import_react61.memo)(DataTableBody);

// src/components/DataTable/Head.tsx
var import_react62 = require("react");
var import_react63 = require("@emotion/react");
var import_styled32 = __toESM(require("@emotion/styled"));
var import_jsx_runtime36 = require("react/jsx-runtime");
var Title = (0, import_styled32.default)(
  ButtonUnstyled,
  getStyledOptions()
)((props) => {
  const { disableSort, isDisabled } = props;
  return import_react63.css`
    align-items: center;
    display: flex;
    pointer-events: ${disableSort || isDisabled ? "none" : "all"};
  `;
});
function DataTableHead(props) {
  const {
    accent,
    clean,
    columns,
    darkMode,
    isDisabled,
    isResponsive,
    onClick,
    sortBy,
    sortDirection,
    stickyHeader
  } = props;
  if (isResponsive) {
    return null;
  }
  const wrapperProps = {
    bg: darkMode ? "gray.900" : "white",
    display: "flex",
    radius: !clean ? "xs" : void 0
  };
  if (stickyHeader) {
    wrapperProps.position = "sticky";
    wrapperProps.top = 0;
    wrapperProps.zIndex = 1;
  }
  return /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(Box, { "data-component-name": "DataTableHead", ...wrapperProps, children: columns.map(({ disableSort, key, max, min, size, title }) => {
    let icon;
    if (!disableSort) {
      icon = /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(Icon, { ml: "xxs", name: "sort", size: 20 });
      if (key === sortBy) {
        icon = sortDirection === "asc" ? /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(Icon, { color: accent, ml: "xxs", name: "sort-asc", size: 20 }) : /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(Icon, { color: accent, ml: "xxs", name: "sort-desc", size: 20 });
      }
    }
    return /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(
      Box,
      {
        align: "center",
        "data-component-name": "DataTableHeadColumn",
        direction: "row",
        flex: "grow",
        maxWidth: max ?? size,
        minWidth: min ?? size,
        my: "xs",
        px: clean ? "sm" : "md",
        children: title && /* @__PURE__ */ (0, import_jsx_runtime36.jsxs)(
          Title,
          {
            "data-direction": sortDirection,
            "data-name": key,
            disableSort,
            isDisabled,
            onClick,
            children: [
              title,
              icon
            ]
          }
        )
      },
      key
    );
  }) });
}
DataTableHead.displayName = "DataTableHead";
var Head_default = (0, import_react62.memo)(DataTableHead);

// src/components/DataTable/DataTable.tsx
var import_jsx_runtime37 = require("react/jsx-runtime");
var defaultProps20 = {
  accent: "primary",
  breakpoint: 768,
  clean: false,
  defaultSortDirection: "asc",
  disableScroll: false,
  loaderSize: 128,
  loaderType: "pill",
  loading: false,
  maxRows: 10,
  pagination: true,
  radius: "xs",
  responsive: false,
  scrollDuration: 400,
  scrollMargin: 16,
  stickyHeader: false
};
function DataTable(props) {
  const {
    accent,
    bg,
    breakpoint,
    clean,
    columns,
    data,
    defaultSortColumn,
    defaultSortDirection,
    disableScroll,
    loaderSize,
    loaderType,
    loading,
    maxRows,
    noResults,
    onClickPage,
    onClickSort,
    pagination,
    radius: radius2,
    remote,
    responsive: responsive2,
    scrollDuration,
    scrollElement,
    scrollMargin,
    stickyHeader,
    width,
    ...rest
  } = { ...defaultProps20, ...props };
  const { darkMode = false } = (0, import_react65.useTheme)();
  const element = (0, import_react64.useRef)(null);
  const resizeTimeout = (0, import_react64.useRef)(null);
  const [{ currentPage, isResponsive, sortBy, sortDirection }, setState] = (0, import_hooks3.useSetState)({
    currentPage: 1,
    isResponsive: responsive2 && (width ?? window.innerWidth) < breakpoint,
    sortBy: defaultSortColumn ?? null,
    sortDirection: defaultSortDirection
  });
  (0, import_hooks3.useUpdateEffect)(() => {
    const minLength = currentPage * maxRows - maxRows;
    if (data.length < minLength) {
      setState({ currentPage: 1 });
    }
  }, [currentPage, data.length, maxRows, setState]);
  (0, import_hooks3.useMount)(() => {
    const resizeHandler = () => {
      if (resizeTimeout.current) {
        window.clearTimeout(resizeTimeout.current);
      }
      resizeTimeout.current = window.setTimeout(() => {
        setState({ isResponsive: responsive2 && (width ?? window.innerWidth) < breakpoint });
      }, 250);
    };
    window.addEventListener("resize", resizeHandler);
    return () => {
      window.removeEventListener("resize", resizeHandler);
    };
  });
  const totalPages = Math.ceil(data.length / maxRows);
  const handleClickPage = (page) => {
    const scrollTarget = scrollElement ?? element.current;
    onClickPage?.(page, remote?.totalPages ?? totalPages);
    if (scrollTarget && !disableScroll) {
      scrollTo(scrollTarget.getBoundingClientRect().top - scrollMargin, { scrollDuration });
    }
    if (remote) {
      return;
    }
    setState({ currentPage: page });
  };
  const handleClickSort = (0, import_react64.useCallback)(
    (event) => {
      const { direction, name = "" } = event.currentTarget.dataset;
      const reverseDirection = direction === "asc" ? "desc" : "asc";
      const nextDirection = sortBy === name ? reverseDirection : "asc";
      const options = {
        sortBy: name,
        sortDirection: nextDirection
      };
      onClickSort?.(name, nextDirection);
      setState(options);
    },
    [onClickSort, setState, sortBy]
  );
  const isEmpty = !loading && !data.length;
  const rows = (0, import_react64.useMemo)(() => {
    return remote && !remote?.useInternalSorting || !sortBy ? data : sortData(data, sortBy, sortDirection);
  }, [data, remote, sortBy, sortDirection]);
  const body = (0, import_react64.useMemo)(() => {
    if (isEmpty) {
      return /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(BoxCenter, { bg: "white", padding: "md", radius: "sm", width: "100%", children: noResults ?? /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(Text, { bold: true, children: "Nothing found" }) });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(
      Body_default,
      {
        accent,
        clean,
        columns,
        darkMode,
        data: rows.slice(maxRows * (currentPage - 1), maxRows * currentPage),
        isResponsive,
        loaderSize,
        loaderType,
        loading,
        sortColumn: defaultSortColumn
      }
    );
  }, [
    accent,
    clean,
    columns,
    currentPage,
    darkMode,
    defaultSortColumn,
    isEmpty,
    isResponsive,
    loaderSize,
    loaderType,
    loading,
    maxRows,
    noResults,
    rows
  ]);
  const styles2 = {
    bg
  };
  if (clean) {
    styles2.bg = darkMode ? "gray.900" : "white";
    styles2.pb = "sm";
  }
  if (!clean) {
    styles2.padding = "md";
    if (!bg) {
      styles2.bg = darkMode ? "gray.800" : "gray.50";
    }
  }
  return /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)(
    Box,
    {
      ref: element,
      "data-component-name": "DataTable",
      maxWidth: "100%",
      radius: !clean ? radius2 : void 0,
      width,
      ...styles2,
      ...rest,
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(
          Head_default,
          {
            accent,
            clean,
            columns,
            darkMode,
            isDisabled: loading ?? isEmpty,
            isResponsive,
            onClick: handleClickSort,
            sortBy,
            sortDirection,
            stickyHeader
          }
        ),
        body,
        pagination && /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(Box, { border: clean ? getBorder(darkMode) : void 0, pt: clean ? "sm" : void 0, children: /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(
          Pagination,
          {
            accent,
            currentPage: remote?.currentPage ?? currentPage,
            onClick: handleClickPage,
            totalPages: remote?.totalPages ?? totalPages
          }
        ) })
      ]
    }
  );
}
DataTable.displayName = "DataTable";

// src/components/DatePicker/Range.tsx
var import_react69 = require("react");
var import_react_day_picker = require("react-day-picker");
var import_react70 = require("@emotion/react");
var import_styled34 = __toESM(require("@emotion/styled"));
var import_helpers50 = require("@gilbarbara/helpers");

// src/components/Spacer/Spacer.tsx
var import_react66 = require("react");
var import_react67 = require("@emotion/react");
var import_styled33 = __toESM(require("@emotion/styled"));
var import_jsx_runtime38 = require("react/jsx-runtime");
var defaultProps21 = {
  direction: "horizontal",
  distribution: "start",
  gap: "sm",
  grow: false,
  shadow: false,
  verticalAlign: "center",
  wrap: true
};
var StyledSpacer = (0, import_styled33.default)(
  "div",
  getStyledOptions("fill")
)((props) => {
  const { direction, distribution, verticalAlign, wrap } = props;
  const isHorizontal = direction === "horizontal";
  let distributionStyles;
  if (distribution) {
    distributionStyles = import_react67.css`
      justify-content: ${isHorizontal ? distribution : verticalAlign};
    `;
  }
  return import_react67.css`
    ${baseStyles(props)};
    align-items: ${isHorizontal ? verticalAlign : distribution};
    display: flex;
    flex-direction: ${direction === "vertical" ? "column" : "row"};
    flex-wrap: ${wrap ? "wrap" : "nowrap"};
    ${distributionStyles};
    ${borderStyles(props)};
    ${flexItemStyles(props)};
    ${layoutStyles(props)};
    ${marginStyles(props)};
    ${paddingStyles(props)};
    ${radiusStyles(props)};
    ${shadowStyles(props)};
  `;
});
var StyledSpacerItem = (0, import_styled33.default)(
  "div",
  getStyledOptions("fill")
)((props) => {
  const { direction, flex, gap = "sm", gapVertical, grow: grow2 } = props;
  const { spacing: spacing2 } = getTheme(props);
  const isHorizontal = direction === "horizontal";
  return import_react67.css`
    display: ${isHorizontal ? "flex" : "block"};
    flex: ${flex};
    margin-bottom: ${gapVertical ? spacing2[gapVertical] : void 0};
    width: ${!isHorizontal && grow2 ? "100%" : "auto"};

    &:not(:last-of-type) {
      margin-right: ${isHorizontal ? spacing2[gap] : void 0};
      margin-bottom: ${!isHorizontal ? spacing2[gap] : void 0};
    }
  `;
});
var Spacer = (0, import_react66.forwardRef)((props, ref) => {
  const { children, ...rest } = { ...defaultProps21, ...props };
  const nodes = import_react66.Children.toArray(children).map((child, index) => {
    const key = `SpacerItem-${index}`;
    const flex = (0, import_react66.isValidElement)(child) ? child.props["data-flex"] : void 0;
    return /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(StyledSpacerItem, { flex, ...rest, "data-component-name": "SpacerItem", children: child }, key);
  });
  return /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(StyledSpacer, { ref, "data-component-name": "Spacer", ...rest, children: nodes });
});
Spacer.displayName = "Spacer";

// src/components/DatePicker/utils.tsx
var import_react68 = require("@emotion/react");
var import_colorizr3 = require("colorizr");
var import_date_fns = require("date-fns");
var import_is_lite11 = __toESM(require("is-lite"));
var import_jsx_runtime39 = require("react/jsx-runtime");
var defaultProps22 = {
  accent: "primary",
  formatLocale: "en-US",
  currentMonthLabel: "Go to today"
};
function getNumberOfMonths(fromDate, toDate) {
  if (fromDate && toDate) {
    const day1 = import_is_lite11.default.date(fromDate) ? fromDate : new Date(fromDate);
    const day2 = import_is_lite11.default.date(toDate) ? toDate : new Date(toDate);
    return (0, import_date_fns.isSameMonth)(day1, day2) ? 1 : 2;
  }
  return 2;
}
function getFooter(setter, label, apply) {
  if (!label && !apply) {
    return null;
  }
  return /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)(
    Box,
    {
      align: "end",
      direction: "row",
      display: "flex",
      justify: apply ? "space-between" : "center",
      mt: "xs",
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(ButtonUnstyled, { onClick: () => setter(/* @__PURE__ */ new Date()), children: label }),
        apply
      ]
    }
  );
}
function getRange(fromDate, toDate) {
  const additionalProps = {};
  let dateStart;
  let dateEnd;
  if (fromDate) {
    dateStart = import_is_lite11.default.date(fromDate) ? fromDate : new Date(fromDate);
    additionalProps.fromMonth = new Date(dateStart.getFullYear(), dateStart.getMonth());
    additionalProps.disabled = [
      {
        from: new Date(dateStart.getFullYear(), dateStart.getMonth(), 0),
        to: new Date(dateStart.getFullYear(), dateStart.getMonth(), dateStart.getDate())
      }
    ];
  }
  if (toDate) {
    dateEnd = import_is_lite11.default.date(toDate) ? toDate : new Date(toDate);
    const disabledDays = [];
    disabledDays.push({
      from: new Date(dateEnd.getFullYear(), dateEnd.getMonth(), dateEnd.getDate()),
      to: new Date(dateEnd.getFullYear(), dateEnd.getMonth() + 1, 1)
    });
    if (dateStart && dateStart.getMonth() === dateEnd.getMonth()) {
      disabledDays.push({
        from: new Date(dateEnd.getFullYear(), dateEnd.getMonth() + 1, 0),
        to: new Date(dateEnd.getFullYear(), dateEnd.getMonth() + 2, 1)
      });
    }
    additionalProps.toMonth = new Date(dateEnd.getFullYear(), dateEnd.getMonth());
    additionalProps.disabled = import_is_lite11.default.array(additionalProps.disabled) ? [...additionalProps.disabled, ...disabledDays] : disabledDays;
  }
  return additionalProps;
}
function getStyles(props) {
  const { accent = "primary" } = props;
  const { colors: colors2, grayScale: grayScale2, spacing: spacing2, typography: typography2, variants: variants2 } = getTheme(props);
  const darkMode = isDarkMode(props);
  const className = "rdp";
  const colorMain = colors2[accent];
  const colorVariant = variants2[accent];
  const cellSize = "40px";
  const disabledDays = darkMode ? grayScale2["500"] : grayScale2["200"];
  return import_react68.css`
    ${borderStyles(props)};
    ${marginStyles(props)};
    ${paddingStyles(props)};
    ${radiusStyles(props)};
    ${shadowStyles(props)};

    /* Hide elements for devices that are not screen readers */
    .${className}-vhidden {
      -moz-appearance: none;
      -webkit-appearance: none;
      appearance: none;
      background: transparent;
      border: 0;
      box-sizing: border-box;
      clip: rect(1px, 1px, 1px, 1px) !important;
      height: 1px !important;
      margin: 0;
      overflow: hidden !important;
      padding: 0;
      position: absolute !important;
      top: 0;
      width: 1px !important;
    }

    /* Buttons */
    .${className}-button_reset {
      -moz-appearance: none;
      -webkit-appearance: none;
      appearance: none;
      background: none;
      color: inherit;
      cursor: default;
      font: inherit;
      margin: 0;
      outline: none;
      padding: 0;
      position: relative;
    }

    .${className}-button {
      border: 0;

      &[aria-disabled='true'] {
        color: ${disabledDays};
        pointer-events: none;
      }

      &:not([aria-disabled='true']) {
        cursor: pointer;
      }

      &:focus,
      &:active {
        background-color: ${colorVariant["50"]};
      }

      &:hover:not([aria-disabled='true']) {
        background-color: ${colorVariant[50]};
      }
    }

    .${className}-months {
      display: flex;
    }

    .${className}-month {
      margin: 0 ${spacing2.xs};

      &:first-of-type {
        margin-left: 0;
      }

      &:last-of-type {
        margin-right: 0;
      }
    }

    .${className}-table {
      border-collapse: collapse;
      margin: 0;
      max-width: calc(${cellSize} * 7);
    }

    .${className}-with_weeknumber .${className}-table {
      border-collapse: collapse;
      max-width: calc(${cellSize} * 8);
    }

    .${className}-caption {
      align-items: center;
      display: flex;
      justify-content: space-between;
      margin-bottom: ${spacing2.xs};
      padding: 0;
      text-align: left;
    }

    .${className}-multiple_months .${className}-caption {
      display: block;
      position: relative;
      text-align: center;
    }

    .${className}-caption_dropdowns {
      display: inline-flex;
      position: relative;
    }

    .${className}-caption_label {
      align-items: center;
      border: 0;
      color: currentColor;
      display: inline-flex;
      font-family: inherit;
      font-size: ${typography2.lg.fontSize};
      font-weight: normal;
      margin: 0;
      padding: 0 ${spacing2.xs};
      position: relative;
      white-space: nowrap;
      z-index: 1;
    }

    .${className}-nav {
      display: flex;
      white-space: nowrap;
    }

    .${className}-multiple_months .${className}-caption_start .${className}-nav {
      left: 0;
      position: absolute;
      top: 50%;
      transform: translateY(-50%);
    }

    .${className}-multiple_months .${className}-caption_end .${className}-nav {
      position: absolute;
      right: 0;
      top: 50%;
      transform: translateY(-50%);
    }

    .${className}-nav_button {
      align-items: center;
      display: inline-flex;
      height: 22px;
      justify-content: center;
      padding: 0;
      width: 22px;

      &:focus,
      &:active {
        background-color: transparent;
      }

      &:hover:not([aria-disabled='true']) {
        background-color: transparent;
      }
    }

    .${className}:not(.${className}-multiple_months) {
      .${className}-caption {
        justify-content: center;
        position: relative;
      }

      .${className}-nav {
        left: 0;
        position: absolute;
        top: 0;
        right: 0;
      }

      .${className}-nav_button_next {
        position: absolute;
        right: 0;
      }
    }

    /* ---------- */
    /* Dropdowns  */
    /* ---------- */

    .${className}-dropdown_year, .${className}-dropdown_month {
      align-items: center;
      display: inline-flex;
      position: relative;
    }

    .${className}-dropdown {
      appearance: none;
      background-color: transparent;
      border: none;
      bottom: 0;
      cursor: inherit;
      font-family: inherit;
      font-size: inherit;
      left: 0;
      line-height: inherit;
      margin: 0;
      opacity: 0;
      padding: 0;
      position: absolute;
      top: 0;
      width: 100%;
      z-index: 2;

      &[disabled] {
        color: unset;
        opacity: unset;
      }
    }

    .${className}-dropdown_icon {
      margin: 0 0 0 5px;
    }

    .${className}-head {
      border: 0;
    }

    .${className}-head_row, .${className}-row {
      height: 100%;
    }

    .${className}-head_cell {
      color: ${grayScale2["500"]};
      font-size: ${typography2.sm.fontSize};
      font-weight: normal;
      height: 24px;
      padding: 0;
      text-align: center;
      vertical-align: middle;
    }

    .${className}-tbody {
      border: 0;
    }

    .${className}-tfoot {
      margin: ${spacing2.xs};
    }

    .${className}-cell {
      height: ${cellSize};
      padding: 0;
      text-align: center;
      width: ${cellSize};
    }

    .${className}-weeknumber {
      font-size: ${typography2.sm.fontSize};
    }

    .${className}-weeknumber, .${className}-day {
      align-items: center;
      border-radius: 100%;
      border: 2px solid transparent;
      box-sizing: border-box;
      display: flex;
      height: ${cellSize};
      justify-content: center;
      margin: 0;
      max-width: ${cellSize};
      overflow: hidden;
      width: ${cellSize};
    }

    .${className}-day_today:not(.${className}-day_outside) {
      color: ${colorMain};
      font-weight: bold;
    }

    .${className}-day_selected:not([aria-disabled='true']),
    .${className}-day_selected:focus:not([aria-disabled='true']),
    .${className}-day_selected:active:not([aria-disabled='true']),
    .${className}-day_selected:hover:not([aria-disabled='true']) {
      background-color: ${colorMain};
      color: ${(0, import_colorizr3.textColor)(colorMain)};
    }

    .${className}-day_selected:focus:not([aria-disabled='true']) {
      border: 2px solid ${colorMain};
    }

    .${className}:not([dir='rtl']) {
      .${className}-day_range_start:not(.${className}-day_range_end) {
        border-bottom-right-radius: 0;
        border-top-right-radius: 0;
      }

      .${className}-day_range_end:not(.${className}-day_range_start) {
        border-bottom-left-radius: 0;
        border-top-left-radius: 0;
      }
    }

    .${className}[dir='rtl'] {
      .${className}-day_range_start:not(.${className}-day_range_end) {
        border-bottom-left-radius: 0;
        border-top-left-radius: 0;
      }

      .${className}-day_range_end:not(.${className}-day_range_start) {
        border-bottom-right-radius: 0;
        border-top-right-radius: 0;
      }
    }

    .${className}-day_range_end.${className}-day_range_start {
      border-radius: 100%;
    }

    .${className}-day_range_middle {
      border-radius: 0;
      background-color: ${colorVariant[50]} !important;
      color: ${variants2.gray["900"]} !important;
    }
  `;
}

// src/components/DatePicker/Range.tsx
var import_jsx_runtime40 = require("react/jsx-runtime");
var rangeDefaultProps = {
  ...defaultProps22,
  readOnly: false,
  showApply: false
};
var StyledDatePicker = (0, import_styled34.default)(
  "div",
  getStyledOptions("onApply")
)((props) => {
  return getStyles(props);
});
function DatePickerRange(props) {
  const {
    accent,
    currentMonthLabel,
    formatLocale,
    fromDate,
    month,
    onApply,
    onChange,
    readOnly,
    selected,
    showApply,
    toDate,
    ...rest
  } = { ...rangeDefaultProps, ...props };
  const [selectedDates, setSelectedDates] = (0, import_react69.useState)(
    selected
  );
  let initialDate;
  let endDate;
  if (selectedDates) {
    initialDate = selectedDates[0] ? new Date(selectedDates[0]) : void 0;
    endDate = selectedDates[1] ? new Date(selectedDates[1]) : void 0;
  }
  const [selectedMonth, setSelectedMonth] = (0, import_react69.useState)(month ?? initialDate);
  const { radius: radius2, spacing: spacing2 } = getTheme({ theme: (0, import_react70.useTheme)() });
  const handleClickSelect = (selectedRange) => {
    setSelectedDates([selectedRange?.from?.toISOString(), selectedRange?.to?.toISOString()]);
    onChange?.([
      selectedRange?.from?.toISOString() ?? void 0,
      selectedRange?.to?.toISOString() ?? void 0
    ]);
  };
  const handleClickApply = () => {
    onApply?.([selectedDates?.[0], selectedDates?.[1]]);
  };
  const handleClickReset = () => {
    setSelectedDates([void 0, void 0]);
    onChange?.([void 0, void 0]);
  };
  const modifiers = {
    from: initialDate ? new Date(initialDate) : false,
    to: endDate ? new Date(endDate) : false
  };
  const content = {
    header: /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(Paragraph, { children: "Select the initial date" })
  };
  if (showApply) {
    content.footer = getFooter(
      setSelectedMonth,
      currentMonthLabel,
      /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)(Spacer, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(Button, { bg: accent, disabled: !initialDate, invert: true, onClick: handleClickReset, size: "sm", children: "Reset" }),
        /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(Button, { bg: accent, disabled: !endDate, onClick: handleClickApply, size: "sm", children: "Apply" })
      ] })
    );
  } else {
    content.footer = getFooter(setSelectedMonth, currentMonthLabel);
    content.reset = /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(
      Button,
      {
        bg: accent,
        invert: true,
        onClick: handleClickReset,
        size: "sm",
        style: {
          borderRadius: radius2.xs,
          minHeight: 24,
          padding: `${spacing2.xxs} ${spacing2.xs}`
        },
        children: "Reset"
      }
    );
  }
  if (initialDate && endDate) {
    content.header = /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)(Spacer, { distribution: "center", children: [
      /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)(Text, { children: [
        "From ",
        (0, import_helpers50.formatDateLocale)(initialDate.toISOString(), { locale: formatLocale }),
        " to",
        " ",
        (0, import_helpers50.formatDateLocale)(endDate.toISOString(), { locale: formatLocale })
      ] }),
      content.reset
    ] });
  } else if (initialDate) {
    content.header = /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(Paragraph, { children: "Select the final date" });
  }
  return /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)(
    StyledDatePicker,
    {
      accent,
      "data-component-name": "DatePickerRange",
      ...(0, import_helpers50.omit)(props, "hidden", "onChange"),
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(BoxCenter, { mb: "md", minHeight: 30, children: content.header }),
        /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(
          import_react_day_picker.DayPicker,
          {
            mode: readOnly ? void 0 : "range",
            modifiers,
            month: selectedMonth,
            numberOfMonths: getNumberOfMonths(fromDate, toDate),
            onMonthChange: setSelectedMonth,
            onSelect: handleClickSelect,
            selected: { from: initialDate, to: endDate },
            ...getRange(fromDate, toDate),
            ...rest
          }
        ),
        content.footer
      ]
    }
  );
}
DatePickerRange.displayName = "DatePickerRange";

// src/components/DatePicker/Selector.tsx
var import_react72 = require("react");
var import_react73 = require("@emotion/react");
var import_styled36 = __toESM(require("@emotion/styled"));
var import_helpers53 = require("@gilbarbara/helpers");
var import_hooks4 = require("@gilbarbara/hooks");
var import_is_lite12 = __toESM(require("is-lite"));

// src/components/DatePicker/Single.tsx
var import_react71 = require("react");
var import_react_day_picker2 = require("react-day-picker");
var import_styled35 = __toESM(require("@emotion/styled"));
var import_helpers52 = require("@gilbarbara/helpers");
var import_jsx_runtime41 = require("react/jsx-runtime");
var StyledDatePicker2 = (0, import_styled35.default)(
  "div",
  getStyledOptions()
)((props) => {
  return getStyles(props);
});
var singleDefaultProps = {
  ...defaultProps22,
  readOnly: false
};
function DatePicker(props) {
  const { currentMonthLabel, fromDate, month, onChange, readOnly, selected, toDate, ...rest } = {
    ...defaultProps22,
    ...props
  };
  const [selectedDate, setSelectedDate] = (0, import_react71.useState)(selected);
  const selectedDateObject = selectedDate ? new Date(selectedDate) : void 0;
  const [selectedMonth, setSelectedMonth] = (0, import_react71.useState)(month ?? selectedDateObject);
  const handleSelect = (_day, selectedDay, modifiers) => {
    if (modifiers.disabled || modifiers.outside) {
      return;
    }
    let nextDate = selectedDay.toISOString();
    if (selectedDate && selectedDate === selectedDay.toISOString()) {
      nextDate = void 0;
    }
    setSelectedDate(nextDate);
    onChange?.(nextDate ? selectedDay.toISOString() : "");
  };
  return /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(
    StyledDatePicker2,
    {
      "data-component-name": "DatePicker",
      ...(0, import_helpers52.omit)(props, "hidden", "onDayClick", "onChange"),
      children: /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(
        import_react_day_picker2.DayPicker,
        {
          footer: getFooter(setSelectedMonth, currentMonthLabel),
          mode: readOnly ? void 0 : "single",
          month: selectedMonth,
          onMonthChange: setSelectedMonth,
          onSelect: handleSelect,
          selected: selectedDateObject,
          ...getRange(fromDate, toDate),
          ...rest
        }
      )
    }
  );
}
DatePicker.displayName = "DatePicker";

// src/components/DatePicker/Selector.tsx
var import_jsx_runtime42 = require("react/jsx-runtime");
var selectorDefaultProps = {
  ...defaultProps22,
  accent: "primary",
  borderless: false,
  disabled: false,
  large: false,
  mode: "single",
  position: "right",
  separator: " \u2014 ",
  showRangeApply: false,
  width: "auto"
};
var StyledButton2 = (0, import_styled36.default)(
  "div",
  getStyledOptions()
)((props) => {
  const {
    accent = selectorDefaultProps.accent,
    borderless,
    disabled,
    isFilled,
    large,
    width
  } = props;
  const { darkColor: darkColor2, grayScale: grayScale2, inputHeight: inputHeight2, lightColor: lightColor2, radius: radius2, spacing: spacing2, white: white2, ...theme } = getTheme(props);
  const darkMode = isDarkMode(props);
  const { mainColor } = getColorTokens(accent, null, theme);
  let borderColor = darkMode ? grayScale2["700"] : grayScale2["500"];
  let textColor2 = grayScale2["500"];
  if (isFilled) {
    borderColor = mainColor;
    textColor2 = darkMode ? lightColor2 : darkColor2;
  }
  const styles2 = borderless ? import_react73.css`
        border-bottom: 1px solid ${borderColor};
        border-radius: 0 !important;
        padding: ${spacing2.xxs} 0;
      ` : import_react73.css`
        background-color: ${darkMode ? grayScale2["800"] : white2};
        border: 1px solid ${borderColor};
        border-radius: ${radius2.xs};
        padding-left: ${spacing2.md};
      `;
  return import_react73.css`
    align-items: center;
    color: ${textColor2};
    cursor: pointer;
    display: flex;
    justify-content: space-between;
    min-height: ${large ? inputHeight2.large : inputHeight2.normal};
    min-width: 200px;
    width: ${width ? (0, import_helpers53.px)(width) : "auto"};
    ${styles2};
    ${marginStyles(props)};

    ${disabled && import_react73.css`
      ${getDisableStyles(props)}
      color: ${grayScale2["500"]};
    `};
  `;
});
var StyledContent2 = (0, import_styled36.default)(
  "div",
  getStyledOptions()
)((props) => {
  const { isActive, position, wide } = props;
  const { grayScale: grayScale2, radius: radius2, shadow: shadow2, spacing: spacing2, white: white2 } = getTheme(props);
  const darkMode = isDarkMode(props);
  let left = position === "left" ? 0 : "auto";
  let translateX = "";
  if (position === "center") {
    left = "50%";
    translateX = " translateX(-50%)";
  }
  return import_react73.css`
    background-color: ${darkMode ? grayScale2["800"] : white2};
    border-radius: ${radius2.xxs};
    box-shadow: ${shadow2.mid};
    display: flex;
    flex-direction: column;
    justify-content: center;
    left: ${left};
    margin-top: ${spacing2.xs};
    min-width: ${(0, import_helpers53.px)(wide ? 600 : 300)};
    overflow-y: auto;
    padding: ${spacing2.md};
    position: absolute;
    right: ${position === "right" ? 0 : "auto"};
    top: 100%;
    transform-origin: top;
    transform: ${`scaleY(0)${translateX}`};
    transition: transform 0.3s;
    z-index: 100;

    ${isActive && import_react73.css`
      transform: ${`scaleY(1)${translateX}`};
    `}
  `;
});
function DatePickerSelector(props) {
  const {
    borderless,
    disabled,
    formatLocale,
    large,
    mode,
    name,
    onChange,
    open,
    placeholder,
    position,
    selected,
    separator,
    showRangeApply,
    width,
    ...rest
  } = { ...selectorDefaultProps, ...props };
  const [{ isActive, isFilled, selectedDates }, setState] = (0, import_hooks4.useSetState)({
    isActive: open ?? false,
    isFilled: false,
    selectedDates: mode === "range" ? selected ?? [void 0, void 0] : selected ?? ""
  });
  const isRange = mode === "range";
  const toggle = (0, import_react72.useCallback)(() => {
    if (import_is_lite12.default.boolean(open) || disabled) {
      return;
    }
    setState((s) => ({ isActive: !s.isActive }));
  }, [disabled, open, setState]);
  const handleApply = (isoDate) => {
    if (onChange) {
      onChange(isoDate);
    }
    toggle();
  };
  const handleSelect = (isoDate) => {
    setState({
      isFilled: import_is_lite12.default.array(isoDate) ? isoDate.some(Boolean) : !!isoDate,
      selectedDates: isoDate
    });
    if (onChange && !showRangeApply) {
      onChange(isoDate);
    }
    if (!showRangeApply && (import_is_lite12.default.array(isoDate) && isoDate.every(Boolean) || !import_is_lite12.default.array(isoDate) && isoDate)) {
      toggle();
    }
  };
  const picker = isRange ? /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(
    DatePickerRange,
    {
      ...rest,
      onApply: handleApply,
      onChange: handleSelect,
      selected: selectedDates,
      showApply: showRangeApply
    }
  ) : /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(
    DatePicker,
    {
      ...rest,
      onChange: handleSelect,
      selected: selectedDates
    }
  );
  let title = isRange ? "Select a date range" : "Select a date";
  if (placeholder) {
    title = placeholder;
  }
  if (import_is_lite12.default.array(selectedDates) && selectedDates.some(Boolean)) {
    const dates = selectedDates.reduce((acc, d, index) => {
      acc.push(d ? (0, import_helpers53.formatDateLocale)(d, { locale: formatLocale }) : "???");
      if (index === 0) {
        acc.push(separator);
      }
      return acc;
    }, []);
    title = /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(Text, { children: dates.map((d) => d) });
  } else if (!import_is_lite12.default.array(selectedDates) && selectedDates) {
    title = (0, import_helpers53.formatDateLocale)(selectedDates, { locale: formatLocale });
  }
  const numberOfMonths = getNumberOfMonths(rest.fromDate, rest.toDate);
  return /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(Box, { "data-component-name": "DatePickerSelector", position: "relative", children: /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)(ClickOutside, { active: isActive, onClick: toggle, children: [
    /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)(
      StyledButton2,
      {
        "data-component-name": "DatePickerSelectorButton",
        isFilled,
        onClick: toggle,
        ...(0, import_helpers53.omit)(props, "hidden", "onChange"),
        children: [
          title,
          /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(BoxCenter, { width: borderless ? void 0 : 40, children: /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(Icon, { name: "calendar" }) })
        ]
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(
      StyledContent2,
      {
        "data-component-name": "DatePickerSelectorContent",
        "data-state": isActive ? "open" : "closed",
        isActive,
        position,
        wide: isRange && numberOfMonths > 1,
        children: picker
      }
    ),
    name && /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(
      "input",
      {
        name,
        type: "hidden",
        value: import_is_lite12.default.array(selectedDates) ? selectedDates.filter(Boolean).join(",") : selectedDates
      }
    )
  ] }) });
}
DatePickerSelector.displayName = "DatePickerSelector";

// src/components/Dialog/Dialog.tsx
var import_react84 = require("react");
var import_react85 = require("@emotion/react");
var import_styled45 = __toESM(require("@emotion/styled"));
var import_helpers56 = require("@gilbarbara/helpers");

// src/components/Headings/H1.tsx
var import_react75 = require("react");
var import_styled37 = __toESM(require("@emotion/styled"));

// src/components/Headings/utils.ts
var import_react74 = require("@emotion/react");
var defaultProps23 = {
  light: false
};
var jumboDefaultProps = {
  ...defaultProps23,
  large: false
};
function getStyles2(key, props) {
  const { light } = props;
  const { fontFamily: fontFamily2, fontWeights: fontWeights2, typography: typography2 } = getTheme(props);
  const selected = typography2[key];
  return import_react74.css`
    ${baseStyles(props)};
    font-family: ${fontFamily2};
    font-size: ${selected.fontSize};
    font-weight: ${light ? fontWeights2.normal : fontWeights2.bold};
    line-height: ${selected.lineHeight};
    margin-bottom: 0.5em;
    margin-top: 0;
    ${alignStyles(props)};
    ${colorStyles(props)};
    ${borderStyles(props)};
    ${marginStyles(props)};
    ${textStyles(props)};
  `;
}

// src/components/Headings/H1.tsx
var import_jsx_runtime43 = require("react/jsx-runtime");
var StyledH1 = (0, import_styled37.default)(
  "h1",
  getStyledOptions()
)((props) => {
  return getStyles2("h1", props);
});
var H1 = (0, import_react75.forwardRef)((props, ref) => /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(StyledH1, { ref, "data-component-name": "H1", ...defaultProps23, ...props }));
H1.displayName = "H1";

// src/components/Headings/H2.tsx
var import_react76 = require("react");
var import_styled38 = __toESM(require("@emotion/styled"));
var import_jsx_runtime44 = require("react/jsx-runtime");
var StyledH2 = (0, import_styled38.default)(
  "h2",
  getStyledOptions()
)((props) => {
  return getStyles2("h2", props);
});
var H2 = (0, import_react76.forwardRef)((props, ref) => /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(StyledH2, { ref, "data-component-name": "H2", ...defaultProps23, ...props }));
H2.displayName = "H2";

// src/components/Headings/H3.tsx
var import_react77 = require("react");
var import_styled39 = __toESM(require("@emotion/styled"));
var import_jsx_runtime45 = require("react/jsx-runtime");
var StyledH3 = (0, import_styled39.default)(
  "h3",
  getStyledOptions()
)((props) => {
  return getStyles2("h3", props);
});
var H3 = (0, import_react77.forwardRef)((props, ref) => /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(StyledH3, { ref, "data-component-name": "H3", ...defaultProps23, ...props }));
H3.displayName = "H3";

// src/components/Headings/H4.tsx
var import_react78 = require("react");
var import_styled40 = __toESM(require("@emotion/styled"));
var import_jsx_runtime46 = require("react/jsx-runtime");
var StyledH4 = (0, import_styled40.default)(
  "h4",
  getStyledOptions()
)((props) => {
  return getStyles2("h4", props);
});
var H4 = (0, import_react78.forwardRef)((props, ref) => /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(StyledH4, { ref, "data-component-name": "H4", ...defaultProps23, ...props }));
H4.displayName = "H4";

// src/components/Headings/H5.tsx
var import_react79 = require("react");
var import_styled41 = __toESM(require("@emotion/styled"));
var import_jsx_runtime47 = require("react/jsx-runtime");
var StyledH5 = (0, import_styled41.default)(
  "h5",
  getStyledOptions()
)((props) => {
  return getStyles2("h5", props);
});
var H5 = (0, import_react79.forwardRef)((props, ref) => /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(StyledH5, { ref, "data-component-name": "H5", ...defaultProps23, ...props }));
H5.displayName = "H5";

// src/components/Headings/H6.tsx
var import_react80 = require("react");
var import_styled42 = __toESM(require("@emotion/styled"));
var import_jsx_runtime48 = require("react/jsx-runtime");
var StyledH6 = (0, import_styled42.default)(
  "h6",
  getStyledOptions()
)((props) => {
  return getStyles2("h6", props);
});
var H6 = (0, import_react80.forwardRef)((props, ref) => /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(StyledH6, { ref, "data-component-name": "H6", ...defaultProps23, ...props }));
H6.displayName = "H6";

// src/components/Headings/Jumbo.tsx
var import_react81 = require("react");
var import_styled43 = __toESM(require("@emotion/styled"));
var import_jsx_runtime49 = require("react/jsx-runtime");
var StyledJumbo = (0, import_styled43.default)(
  "h1",
  getStyledOptions()
)((props) => {
  const { large } = props;
  return getStyles2(large ? "jumboLarge" : "jumbo", props);
});
var Jumbo = (0, import_react81.forwardRef)((props, ref) => /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(StyledJumbo, { ref, "data-component-name": "Jumbo", ...jumboDefaultProps, ...props }));
Jumbo.displayName = "Jumbo";

// src/components/Portal/Portal.tsx
var import_react82 = require("react");
var import_react_dom = require("react-dom");
var import_react83 = require("@emotion/react");
var import_styled44 = __toESM(require("@emotion/styled"));
var import_hooks5 = require("@gilbarbara/hooks");
var import_is_lite13 = __toESM(require("is-lite"));
var import_jsx_runtime50 = require("react/jsx-runtime");
var defaultProps24 = {
  closeOnClickOverlay: true,
  closeOnEsc: true,
  hideOverlay: false,
  isActive: false,
  showCloseButton: false,
  zIndex: 1e3
};
function getPortalElement() {
  return document.querySelector(".__portal");
}
function createPortalElement() {
  const newElement = document.createElement("div");
  newElement.classList.add("__portal");
  return newElement;
}
var portalHide = import_react83.keyframes`
  0% {
    opacity: 1;
    visibility: visible;
  }

  100% {
    opacity: 0;
    visibility: hidden;
  }
`;
var portalShow = import_react83.keyframes`
  0% {
    opacity: 0;
    visibility: hidden;
  }

  100% {
    opacity: 1;
    visibility: visible;
  }
`;
var CloseButton = import_styled44.default.button(
  (props) => import_react83.css`
    ${baseStyles(props)};
    ${buttonStyles};
    align-items: center;
    color: ${black};
    display: inline-flex;
    height: 30px;
    justify-content: center;
    line-height: 1;
    pointer-events: all;
    position: absolute;
    right: 0;
    top: 0;
    width: 30px;
    z-index: 20;
  `
);
var Content2 = import_styled44.default.div`
  max-height: 100%;
  position: relative;
  width: auto;
  z-index: 10;
`;
var Overlay = import_styled44.default.div((props) => {
  const { darkMode, isActive } = props;
  return import_react83.css`
    background-color: ${darkMode ? "rgba(222, 222, 222, 0.3)" : "rgba(0, 0, 0, 0.3)"};
    bottom: 0;
    left: 0;
    opacity: ${isActive ? 1 : 0};
    position: absolute;
    right: 0;
    top: 0;
    transition: opacity 0.5s;
  `;
});
var StyledPortal = import_styled44.default.div((props) => {
  const { isActive, zIndex } = props;
  return import_react83.css`
    align-items: center;
    animation-duration: 0.5s;
    animation-name: ${portalHide};
    animation-play-state: ${isActive ? "running" : "paused"};
    animation-name: ${isActive ? portalShow : portalHide};
    animation-direction: ${isActive ? "normal" : "reverse"};
    bottom: 0;
    display: flex;
    justify-content: center;
    left: 0;
    position: fixed;
    right: 0;
    top: 0;
    z-index: ${zIndex};
  `;
});
function Portal(props) {
  const {
    children,
    closeOnClickOverlay,
    closeOnEsc,
    hideOverlay,
    isActive,
    onClose,
    onOpen,
    showCloseButton,
    zIndex
  } = { ...defaultProps24, ...props };
  const [isReady, setReady] = (0, import_react82.useState)(false);
  const portal = (0, import_react82.useRef)(null);
  const { darkMode = false } = (0, import_react83.useTheme)();
  const closePortal = (0, import_react82.useRef)(() => {
    destroyPortal.current();
    if (import_is_lite13.default.function(onClose)) {
      onClose();
    }
  });
  const destroyPortal = (0, import_react82.useRef)(() => {
    if (closeOnEsc) {
      document.removeEventListener("keydown", handleKeyDown2);
    }
  });
  const previousIsActive = (0, import_hooks5.usePrevious)(isActive);
  const previousCloseOnEsc = (0, import_hooks5.usePrevious)(closeOnEsc);
  const handleKeyDown2 = (0, import_react82.useCallback)((event) => {
    if (event.code === "Escape") {
      event.stopPropagation();
      closePortal.current();
    }
  }, []);
  (0, import_hooks5.useMount)(() => {
    let element = getPortalElement();
    if (!getPortalElement()) {
      element = createPortalElement();
      document.body.appendChild(element);
    }
    portal.current = element;
    setReady(true);
    if (isActive && closeOnEsc) {
      document.addEventListener("keydown", handleKeyDown2);
    }
  });
  (0, import_hooks5.useUnmount)(() => {
    destroyPortal.current();
  });
  const openPortal = (0, import_react82.useCallback)(() => {
    if (import_is_lite13.default.function(onOpen)) {
      onOpen();
    }
    if (closeOnEsc) {
      document.addEventListener("keydown", handleKeyDown2);
    }
  }, [closeOnEsc, handleKeyDown2, onOpen]);
  (0, import_hooks5.useUpdateEffect)(() => {
    const hasChanged = previousIsActive !== isActive;
    if (hasChanged && isActive) {
      openPortal();
    } else if (hasChanged && !isActive) {
      destroyPortal.current();
    }
    if (previousCloseOnEsc !== closeOnEsc) {
      if (closeOnEsc) {
        document.addEventListener("keydown", handleKeyDown2);
      } else {
        document.removeEventListener("keydown", handleKeyDown2);
      }
    }
  }, [
    closeOnEsc,
    destroyPortal,
    handleKeyDown2,
    isActive,
    openPortal,
    previousIsActive,
    previousCloseOnEsc
  ]);
  const handleClickClose = (0, import_react82.useCallback)(() => {
    if (!closeOnClickOverlay) {
      return;
    }
    closePortal.current();
  }, [closeOnClickOverlay, closePortal]);
  const content = [];
  if (isActive) {
    content.push(children);
  }
  if (!isReady || !portal.current) {
    return null;
  }
  return (0, import_react_dom.createPortal)(
    /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)(StyledPortal, { "data-component-name": "Portal", isActive, zIndex, children: [
      !hideOverlay && /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(
        Overlay,
        {
          darkMode,
          "data-component-name": "PortalOverlay",
          isActive,
          onClick: handleClickClose
        }
      ),
      showCloseButton && /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(CloseButton, { onClick: handleClickClose, title: "Close", type: "button", children: /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(Icon, { name: "close-o", size: 20, title: "Close" }) }),
      /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(Content2, { "data-component-name": "PortalContent", children: content })
    ] }),
    portal.current
  );
}
Portal.displayName = "Portal";

// src/components/Dialog/Dialog.tsx
var import_jsx_runtime51 = require("react/jsx-runtime");
var defaultProps25 = {
  accent: "primary",
  buttonCancelText: "Cancel",
  buttonConfirmText: "Confirm",
  buttonOrder: "ltr",
  closeOnClickOverlay: false,
  closeOnEsc: true,
  hideOverlay: false,
  isActive: false,
  padding: "xl",
  radius: "lg",
  shadow: "high",
  textAlign: "left",
  width: 380
};
var StyledDialog = (0, import_styled45.default)(
  "div",
  getStyledOptions()
)(
  (props) => {
    const { textAlign, width } = props;
    const { black: black2, darkColor: darkColor2, white: white2 } = getTheme(props);
    const darkMode = isDarkMode(props);
    return import_react85.css`
      background-color: ${darkMode ? darkColor2 : white2};
      color: ${darkMode ? white2 : black2};
      max-width: 100%;
      text-align: ${textAlign};
      width: ${(0, import_helpers56.px)(width)};
      ${borderStyles(props)};
      ${paddingStyles(props)};
      ${radiusStyles(props)};
      ${shadowStyles(props)};
    `;
  }
);
function Dialog(props) {
  const {
    accent,
    buttonCancelText,
    buttonConfirmText,
    buttonOrder,
    closeOnClickOverlay,
    closeOnEsc,
    content,
    hideOverlay,
    isActive,
    onClickCancel,
    onClickConfirmation,
    onClose,
    onOpen,
    style,
    title,
    zIndex,
    ...rest
  } = { ...defaultProps25, ...props };
  const handlePortalClose = (0, import_react84.useCallback)(() => {
    onClickCancel();
    onClose?.();
  }, [onClickCancel, onClose]);
  const actionButton = /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(Button, { bg: accent, onClick: onClickConfirmation, children: buttonConfirmText });
  const cancelButton = /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(Button, { bg: accent, invert: true, onClick: onClickCancel, children: buttonCancelText });
  return /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(
    Portal,
    {
      closeOnClickOverlay,
      closeOnEsc,
      hideOverlay,
      isActive,
      onClose: handlePortalClose,
      onOpen,
      zIndex,
      children: /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)(StyledDialog, { "data-component-name": "Dialog", style, ...rest, children: [
        title && /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(H3, { mb: "sm", children: title }),
        /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(Paragraph, { mb: "xl", children: content }),
        buttonOrder === "ltr" ? /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)(Spacer, { distribution: "space-between", children: [
          cancelButton,
          actionButton
        ] }) : /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)(Spacer, { distribution: "space-between", children: [
          actionButton,
          cancelButton
        ] })
      ] })
    }
  );
}
Dialog.displayName = "Dialog";

// src/components/Divider/Divider.tsx
var import_react86 = require("@emotion/react");
var import_styled46 = __toESM(require("@emotion/styled"));
var import_helpers58 = require("@gilbarbara/helpers");
var import_jsx_runtime52 = require("react/jsx-runtime");
var borderSizes = {
  sm: "1px",
  md: "2px",
  lg: "4px"
};
var defaultProps26 = {
  ...textDefaultOptions,
  align: "center",
  borderSize: "sm",
  borderStyle: "solid",
  color: "gray.200",
  direction: "horizontal",
  gap: "xs",
  length: "100%",
  minBorderWidth: 50,
  size: "md"
};
var StyledDivider = (0, import_styled46.default)(
  "div",
  getStyledOptions("type")
)((props) => {
  const {
    align,
    borderSize,
    borderStyle,
    children,
    color,
    direction,
    gap,
    length,
    minBorderWidth
  } = props;
  const { spacing: spacing2, ...theme } = getTheme(props);
  const isHorizontal = direction === "horizontal";
  const { mainColor } = getColorTokens(color, null, theme);
  const selectedDimension = borderSizes[borderSize];
  const margin = isHorizontal ? import_react86.css`
        margin-bottom: ${spacing2.md};
        margin-top: ${spacing2.md};
      ` : import_react86.css`
        margin-left: ${spacing2.md};
        margin-right: ${spacing2.md};
      `;
  if (isHorizontal && children) {
    let textAlign = "center";
    if (align === "left") {
      textAlign = "left";
    }
    if (align === "right") {
      textAlign = "right";
    }
    return import_react86.css`
      ${baseStyles(props)};
      align-items: center;
      color: ${mainColor};
      display: flex;
      flex-direction: row;
      line-height: 1;
      position: relative;
      ${margin};
      text-align: ${textAlign};
      width: ${(0, import_helpers58.px)(length)};
      ${marginStyles(props)};
      ${textStyles(props)};

      &:before,
      &:after {
        border-top: ${borderSizes[borderSize]} ${borderStyle} ${mainColor};
        content: '';
        display: inline-flex;
        min-width: ${(0, import_helpers58.px)(minBorderWidth)};
        flex-grow: 1;
      }

      &:before {
        margin-right: ${spacing2[gap]};
      }

      &:after {
        margin-left: ${spacing2[gap]};
      }
    `;
  }
  return import_react86.css`
    border-bottom: ${isHorizontal ? `${selectedDimension} ${borderStyle} ${mainColor}` : void 0};
    border-left: ${isHorizontal ? void 0 : `${selectedDimension} ${borderStyle} ${mainColor}`};
    height: ${isHorizontal ? void 0 : (0, import_helpers58.px)(length)};
    ${margin};
    text-indent: -9999px;
    width: ${(0, import_helpers58.px)(isHorizontal ? length : selectedDimension)};
    ${marginStyles(props)};
  `;
});
function Divider(props) {
  return /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(StyledDivider, { "data-component-name": "Divider", role: "separator", ...defaultProps26, ...props });
}
Divider.displayName = "Divider";

// src/components/Dropdown/Dropdown.tsx
var import_react90 = require("react");
var import_react91 = require("@emotion/react");
var import_styled50 = __toESM(require("@emotion/styled"));
var import_helpers62 = require("@gilbarbara/helpers");
var import_react_dropdown = __toESM(require("@gilbarbara/react-dropdown"));
var import_polished3 = require("polished");

// src/components/Dropdown/Content.tsx
var import_react87 = require("@emotion/react");
var import_styled47 = __toESM(require("@emotion/styled"));
var import_jsx_runtime53 = require("react/jsx-runtime");
var StyledContent3 = (0, import_styled47.default)("div", getStyledOptions())`
  align-items: center;
  display: flex;
  flex-wrap: wrap;
  width: 100%;
`;
var Item = (0, import_styled47.default)(
  "div",
  getStyledOptions()
)((props) => {
  const { color, multi } = props;
  const { grayScale: grayScale2, radius: radius2, spacing: spacing2, white: white2 } = getTheme(props);
  const darkMode = isDarkMode(props);
  let multiStyles;
  if (multi) {
    multiStyles = import_react87.css`
      border: 1px solid ${color};
      border-radius: ${radius2.xxs};
      background-color: ${darkMode ? grayScale2["700"] : white2};
      margin-bottom: ${spacing2.xxs};
      margin-right: ${spacing2.xs};
      margin-top: ${spacing2.xxs};
      padding: 3px 6px;
    `;
  }
  return import_react87.css`
    align-items: center;
    display: flex;
    line-height: 1;
    ${multiStyles};
  `;
});
var ItemClose = (0, import_styled47.default)(
  "span",
  getStyledOptions()
)((props) => {
  const { spacing: spacing2 } = getTheme(props);
  return import_react87.css`
    display: inline-flex;
    line-height: 1;
    margin-left: ${spacing2.xxs};
  `;
});
var Placeholder = (0, import_styled47.default)(
  "div",
  getStyledOptions()
)((props) => {
  const { grayScale: grayScale2 } = getTheme(props);
  return import_react87.css`
    align-items: center;
    color: ${grayScale2["500"]};
    display: flex;
  `;
});
function DropdownContent(props) {
  const {
    methods: { getStyles: getStyles3, removeItem },
    props: { multi, placeholder },
    state: { values }
  } = props;
  const handleClickRemove = (value) => {
    return (event) => {
      event.stopPropagation();
      removeItem(null, value, true);
    };
  };
  if (values.length) {
    return /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(StyledContent3, { children: values.map((item) => {
      const { label, prefix, suffix, value } = item || {};
      return /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)(
        Item,
        {
          color: getStyles3().color,
          "data-component-name": "ContentItem",
          multi,
          children: [
            !!prefix && /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(BoxInline, { "data-component-name": "ContentItemPrefix", mr: "xxs", children: prefix }),
            /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("span", { children: label ?? value }),
            !!suffix && /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(BoxInline, { "data-component-name": "ContentItemSuffix", ml: "xxs", children: suffix }),
            multi && /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(ItemClose, { onClick: handleClickRemove(item), children: /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Icon, { name: "close" }) })
          ]
        },
        value
      );
    }) });
  }
  return /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Placeholder, { children: placeholder });
}
DropdownContent.displayName = "DropdownContent";
var Content_default = DropdownContent;

// src/components/Dropdown/Items.tsx
var import_react88 = require("react");
var import_react89 = require("@emotion/react");
var import_styled49 = __toESM(require("@emotion/styled"));

// src/components/Dropdown/Add.tsx
var import_styled48 = __toESM(require("@emotion/styled"));
var import_jsx_runtime54 = require("react/jsx-runtime");
var StyledDropdownAdd = import_styled48.default.div`
  width: 100%;

  button {
    display: flex;
    justify-content: center;
    padding: 8px;
    width: 100%;
  }
`;
function DropdownAdd(props) {
  const {
    accent = "primary",
    methods: { getLabels, setStatus },
    onCreate,
    state: { search }
  } = props;
  const handleClick = () => {
    onCreate?.(search, () => setStatus("close"));
  };
  return /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(StyledDropdownAdd, { "data-component-name": "DropdownAdd", children: /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(ButtonUnstyled, { color: accent, onClick: handleClick, children: getLabels().create.replace(/{search}/, `"${search}"`) }) });
}
DropdownAdd.displayName = "DropdownAdd";
var Add_default = DropdownAdd;

// src/components/Dropdown/Items.tsx
var import_jsx_runtime55 = require("react/jsx-runtime");
var getSharedStyles = (spacing2) => import_react89.css`
  align-items: center;
  display: flex;
  padding: ${spacing2.xs} ${spacing2.sm};
  width: 100%;
`;
var Centered = (0, import_styled49.default)(
  "div",
  getStyledOptions()
)((props) => {
  const { withBorder } = props;
  const { grayScale: grayScale2, spacing: spacing2 } = getTheme(props);
  return import_react89.css`
    ${getSharedStyles(spacing2)};
    border-top: ${withBorder ? `1px solid ${grayScale2["200"]}` : 0};
    justify-content: center;
    padding: 0;
  `;
});
var Empty = (0, import_styled49.default)(
  "div",
  getStyledOptions()
)((props) => {
  const { spacing: spacing2 } = getTheme(props);
  return import_react89.css`
    ${getSharedStyles(spacing2)};
    justify-content: center;
  `;
});
var Input = (0, import_styled49.default)(
  "input",
  getStyledOptions()
)((props) => {
  const { accent = "primary" } = props;
  const { radius: radius2, ...theme } = getTheme(props);
  const { mainColor } = getColorTokens(accent, null, theme);
  return import_react89.css`
    border-radius: ${radius2.xs};

    :focus {
      filter: drop-shadow(0 0 2px ${mainColor});
      outline: none;
    }
  `;
});
var Item2 = (0, import_styled49.default)(
  "div",
  getStyledOptions()
)((props) => {
  const { accent = "primary", disabled, hovered, selected } = props;
  const { darkMode, grayScale: grayScale2, spacing: spacing2, white: white2, ...theme } = getTheme(props);
  const { mainColor, textColor: textColor2 } = getColorTokens(accent, null, theme);
  const { mainColor: bgHoverLight, textColor: colorHoverLight } = getColorTokens(
    `${accent}.50`,
    null,
    theme
  );
  const { mainColor: bgHoverDark, textColor: colorHoverDark } = getColorTokens(
    `${accent}.800`,
    null,
    theme
  );
  let itemBgColor = darkMode ? grayScale2["800"] : white2;
  let itemColor = darkMode ? grayScale2["100"] : grayScale2["800"];
  const bgHover = darkMode ? bgHoverDark : bgHoverLight;
  const colorHover = darkMode ? colorHoverDark : colorHoverLight;
  if (disabled) {
    itemBgColor = darkMode ? grayScale2["700"] : grayScale2["40"];
    itemColor = darkMode ? grayScale2["200"] : grayScale2["500"];
  }
  return import_react89.css`
    ${getSharedStyles(spacing2)};
    background-color: ${itemBgColor};
    color: ${itemColor};
    cursor: pointer;
    pointer-events: ${disabled ? "none" : void 0};
    ${selected && import_react89.css`
      background-color: ${mainColor};
      color: ${textColor2};
    `};
    ${hovered && !disabled && import_react89.css`
      background-color: ${bgHover};
      color: ${colorHover};
    `};

    &:hover {
      background-color: ${bgHover};
      color: ${colorHover};
    }
  `;
});
var List = (0, import_styled49.default)(
  "div",
  getStyledOptions()
)((props) => {
  const { maxHeight } = props;
  const { grayScale: grayScale2, white: white2 } = getTheme(props);
  const darkMode = isDarkMode(props);
  return import_react89.css`
    background-color: ${darkMode ? grayScale2["800"] : white2};
    color: ${darkMode ? grayScale2["200"] : grayScale2["700"]};
    cursor: default;
    max-height: ${maxHeight ?? "none"};
    overflow-y: auto;
  `;
});
var Items = (0, import_styled49.default)(
  "div",
  getStyledOptions()
)((props) => {
  const { grayScale: grayScale2, white: white2 } = getTheme(props);
  const darkMode = isDarkMode(props);
  return import_react89.css`
    background-color: ${darkMode ? grayScale2["800"] : white2};
    color: ${darkMode ? grayScale2["200"] : grayScale2["700"]};
  `;
});
var Search = (0, import_styled49.default)(
  "div",
  getStyledOptions()
)((props) => {
  const { darkColor: darkColor2, grayScale: grayScale2, lightColor: lightColor2, spacing: spacing2, typography: typography2, white: white2 } = getTheme(props);
  const darkMode = isDarkMode(props);
  return import_react89.css`
    ${getSharedStyles(spacing2)};
    background-color: ${darkMode ? grayScale2["800"] : white2};
    padding: ${spacing2.sm};
    position: sticky;
    top: 0;

    input {
      background-color: ${darkMode ? grayScale2["800"] : white2};
      border: 1px solid ${darkMode ? grayScale2["500"] : grayScale2["200"]};
      color: ${darkMode ? lightColor2 : darkColor2};
      font-size: ${typography2.md.fontSize};
      line-height: 1.6;
      padding: ${spacing2.xxs} ${spacing2.sm};
      width: 100%;
    }
  `;
});
function DropdownItems({ accent, methods, onCreate, onSearch, props, state }) {
  const { addItem, getLabels, getStyles: getStyles3, removeItem, setSearch } = methods;
  const { autoFocus, create, options, searchable } = props;
  const { cursor, search, values } = state;
  const searchInput = (0, import_react88.useRef)(null);
  let children;
  if (create) {
    children = /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(Add_default, { accent, methods, onCreate, props, state });
  }
  const regexp = new RegExp(search.replace(/[$()*+.?[\\\]^{|}]/g, "\\$&"), "i");
  (0, import_react88.useEffect)(() => {
    const { current } = searchInput;
    if (current && autoFocus) {
      current.focus();
    }
  }, [autoFocus]);
  const handleSearch = (event) => {
    const { value } = event.target;
    setSearch(event);
    onSearch?.(value);
  };
  const availableOptions = options.filter((item) => regexp.test(`${item.label ?? item.value}`)).map((option, index) => {
    const { disabled, label, prefix, suffix, value } = option;
    const isSelected = values.includes(option);
    const isHovered = cursor === index;
    return /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)(
      Item2,
      {
        accent,
        "data-component-name": "DropdownItem",
        disabled,
        hovered: isHovered,
        onClick: () => isSelected ? removeItem(null, option, false) : addItem(option),
        role: "listitem",
        selected: isSelected,
        children: [
          prefix && /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(BoxInline, { "data-component-name": "DropdownOptionPrefix", mr: "xxs", children: prefix }),
          /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(BoxInline, { flex: "grow", children: label ?? value }),
          suffix && /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(BoxInline, { "data-component-name": "DropdownOptionSuffix", ml: "xxs", children: suffix })
        ]
      },
      option.value
    );
  });
  const output = {
    options: availableOptions
  };
  if (children && !availableOptions.length) {
    output.create = /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(Centered, { withBorder: !!availableOptions.length, children });
  }
  if (!children && !availableOptions.length) {
    output.options = /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(Empty, { children: getLabels().noData });
  }
  return /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)(List, { "data-component-name": "DropdownItems", maxHeight: getStyles3().menuMaxHeight, children: [
    searchable && /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(Search, { "data-component-name": "DropdownItemsSearch", children: /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(
      Input,
      {
        ref: searchInput,
        accent,
        onChange: handleSearch,
        type: "text",
        value: search
      }
    ) }),
    /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(Items, { "data-component-name": "DropdownItemsList", children: output.options }),
    output.create
  ] });
}
DropdownItems.displayName = "DropdownItems";
var Items_default = DropdownItems;

// src/components/Dropdown/Dropdown.tsx
var import_jsx_runtime56 = require("react/jsx-runtime");
var defaultProps27 = {
  accent: "primary",
  allowCreate: false,
  autoFocus: false,
  borderless: false,
  closeOnScroll: false,
  closeMultiOnSelect: false,
  direction: "ltr",
  disabled: false,
  keepSelectedInList: true,
  labels: {
    create: "Create {search}",
    noData: "Nothing found"
  },
  large: false,
  loading: false,
  menuMaxHeight: 260,
  multi: false,
  placeholder: "Select an option",
  searchBy: "label",
  searchable: true,
  showClearButton: false,
  showSeparator: false,
  width: 260
};
var StyledDropdown = (0, import_styled50.default)(
  "div",
  getStyledOptions("placeholder", "onSearch")
)((props) => {
  const { accent, borderless, isFilled, multi, width } = props;
  const { grayScale: grayScale2, radius: radius2, spacing: spacing2, white: white2, ...theme } = getTheme(props);
  const { mainColor } = getColorTokens(accent, null, theme);
  const darkMode = isDarkMode(props);
  let borderColor = darkMode ? grayScale2["700"] : grayScale2["500"];
  if (isFilled) {
    borderColor = mainColor;
  }
  const styles2 = borderless ? import_react91.css`
        border: 0 !important;
        border-bottom: 1px solid ${borderColor} !important;
        border-radius: 0 !important;
        padding: 0 !important;
      ` : import_react91.css`
        background-color: ${darkMode ? grayScale2["800"] : white2};
        border: 1px solid ${borderColor};
        border-radius: ${radius2.xs};
        padding-left: ${multi ? 0 : spacing2.xs} !important;
      `;
  return import_react91.css`
    min-width: ${(0, import_helpers62.px)(width ?? 260)};
    width: ${(0, import_helpers62.px)(width) ?? "auto"};
    ${marginStyles(props)};

    .react-dropdown {
      background-color: transparent;
      ${styles2};

      &:focus,
      &:focus-within {
        ${borderless ? import_react91.css`
              box-shadow: 0 3px 0 0 ${(0, import_polished3.transparentize)(0.5, mainColor)};
            ` : getOutlineStyles(mainColor)};

        .react-dropdown-separator {
          background-color: ${mainColor};
        }
      }

      &[disabled] {
        opacity: 1 !important;
        ${getDisableStyles(props)};

        .react-dropdown-content {
          color: ${grayScale2["500"]};
        }
      }

      &-clear {
        &:hover {
          color: ${theme.colors.red};
        }
      }

      &-content {
        align-items: center;
        width: calc(100% - 16px);

        span {
          max-width: 100%;

          + input {
            margin-left: 5px;
          }
        }
      }

      &-menu {
        border: 0 !important;
        border-radius: ${radius2.xs};
        overflow: hidden;
        width: 100% !important;
        z-index: 100;

        &:empty {
          display: none;
        }
      }

      &-loading {
        padding: 0 ${spacing2.xs};

        &:after {
          margin: 0;
        }
      }

      &-separator {
        background-color: ${borderColor};
      }
    }
  `;
});
function getDropdownComponent(props) {
  return function DropdownRenderer(renderer) {
    return /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(Items_default, { ...renderer, ...props });
  };
}
function Dropdown(props) {
  const {
    allowCreate,
    closeMultiOnSelect,
    inputOptions,
    items,
    large,
    menuMaxHeight = 260,
    onChange,
    onClear,
    open,
    showClearButton,
    values = [],
    ...rest
  } = {
    ...defaultProps27,
    ...props
  };
  const [isFilled, setFilled] = (0, import_react90.useState)(!!values.length);
  const { darkMode, grayScale: grayScale2, inputHeight: inputHeight2, white: white2, ...theme } = getTheme({ theme: (0, import_react91.useTheme)() });
  const { mainColor } = getColorTokens(rest.accent ?? "primary", null, theme);
  const handleChange = (value) => {
    setFilled(!!value.length);
    onChange?.(value);
  };
  return /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(StyledDropdown, { "data-component-name": "DropdownWrapper", isFilled, ...rest, children: /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
    import_react_dropdown.default,
    {
      closeOnSelect: closeMultiOnSelect,
      contentComponent: Content_default,
      create: allowCreate,
      hiddenInput: inputOptions,
      menuComponent: getDropdownComponent({ allowCreate, ...rest }),
      onChange: handleChange,
      onClearAll: onClear,
      open,
      options: items,
      showClearButton,
      styles: {
        bgColor: darkMode ? grayScale2["700"] : white2,
        color: mainColor,
        gap: 0,
        minHeight: parseInt(large ? inputHeight2.large : inputHeight2.normal, 10),
        menuMaxHeight,
        width: rest.width
      },
      values,
      ...rest
    }
  ) });
}
Dropdown.displayName = "Dropdown";

// src/components/Emoji/Emoji.tsx
var import_react92 = require("react");
var import_react93 = require("@emotion/react");
var import_styled51 = __toESM(require("@emotion/styled"));
var import_helpers64 = require("@gilbarbara/helpers");
var import_jsx_runtime57 = require("react/jsx-runtime");
var StyledEmoji = (0, import_styled51.default)(
  "span",
  getStyledOptions()
)((props) => {
  const { size } = props;
  return import_react93.css`
    ${baseStyles(props)};
    display: inline-flex;
    line-height: 1;

    ${size && import_react93.css`
      font-size: ${(0, import_helpers64.px)(size)};
      height: ${(0, import_helpers64.px)(size)};
      width: ${(0, import_helpers64.px)(size)};
    `};
  `;
});
var Emoji = (0, import_react92.forwardRef)((props, ref) => {
  const { label, size, symbol } = props;
  return /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
    StyledEmoji,
    {
      ref,
      "aria-hidden": label ? "false" : "true",
      "aria-label": label ?? "",
      "data-component-name": "Emoji",
      size,
      children: symbol
    }
  );
});
Emoji.displayName = "Emoji";

// src/components/Field/Field.tsx
var import_react118 = require("react");
var import_react_hook_form2 = require("react-hook-form");
var import_hooks9 = require("@gilbarbara/hooks");

// src/components/FormGroup/FormGroup.tsx
var import_react96 = require("react");
var import_react97 = require("@emotion/react");
var import_styled53 = __toESM(require("@emotion/styled"));
var import_is_lite15 = __toESM(require("is-lite"));

// src/components/Label/Label.tsx
var import_react94 = require("react");
var import_react95 = require("@emotion/react");
var import_styled52 = __toESM(require("@emotion/styled"));
var import_is_lite14 = __toESM(require("is-lite"));
var import_jsx_runtime58 = require("react/jsx-runtime");
var defaultProps28 = {
  ...textDefaultOptions,
  bold: true,
  inline: false
};
var StyledLabel2 = (0, import_styled52.default)(
  "label",
  getStyledOptions()
)((props) => {
  const { inline } = props;
  const { spacing: spacing2 } = getTheme(props);
  return import_react95.css`
    ${baseStyles(props)};
    align-items: center;
    cursor: pointer;
    display: ${inline ? "inline-flex" : "flex"};
    font-family: inherit;
    line-height: 1;
    ${!inline ? `margin-bottom: ${spacing2.sm}` : ""};
    position: relative;
    ${colorStyles(props)};
    ${textStyles(props)};

    [data-component-name='Text'] {
      line-height: 1;
      margin-left: ${spacing2.xxs};
    }
  `;
});
var Label = (0, import_react94.forwardRef)((props, ref) => {
  const { children, labelId, labelInfo, ...rest } = { ...defaultProps28, ...props };
  let info;
  if (labelInfo) {
    info = import_is_lite14.default.string(labelInfo) ? /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(Text, { color: rest.color, size: "sm", children: labelInfo }) : labelInfo;
  }
  return /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)(StyledLabel2, { ref, "data-component-name": "Label", ...rest, htmlFor: labelId, children: [
    children,
    info
  ] });
});
Label.displayName = "Label";

// src/components/FormGroup/FormGroup.tsx
var import_jsx_runtime59 = require("react/jsx-runtime");
var defaultProps29 = {
  hideAssistiveText: false,
  inline: false,
  required: false,
  skipIcon: false
};
var StyledFormGroup = (0, import_styled53.default)(
  "div",
  getStyledOptions()
)((props) => {
  const { spacing: spacing2 } = getTheme(props);
  return import_react97.css`
    ${baseStyles(props)};
    margin-bottom: ${spacing2.md};
    width: 100%;
    ${borderStyles(props)};
    ${layoutStyles(props)};
    ${marginStyles(props)};
    ${paddingStyles(props)};
    ${radiusStyles(props)};

    [data-component-name='FormGroupContent'] {
      > * {
        margin-bottom: 0;
        margin-top: 0;
      }

      [data-component-name='Label'] {
        margin-right: ${spacing2.xs};
      }

      [data-component-name='FormGroupContent'] {
        flex: 1;
      }

      [data-component-name='AssistiveContent'] {
        margin-left: ${spacing2.xs};

        &:empty {
          display: none;
        }
      }
    }
  `;
});
var AssistiveContent = (0, import_styled53.default)(
  "div",
  getStyledOptions()
)((props) => {
  const { grayScale: grayScale2, spacing: spacing2, typography: typography2 } = getTheme(props);
  return import_react97.css`
    align-items: center;
    color: ${isDarkMode(props) ? grayScale2["200"] : grayScale2["500"]};
    display: flex;
    font-size: ${typography2.sm.fontSize};
    line-height: 16px;
    margin-top: ${spacing2.xxs};
    min-height: ${spacing2.md};
    text-align: left;
  `;
});
var ErrorComponent = import_styled53.default.div((props) => {
  const { colors: colors2 } = getTheme(props);
  return import_react97.css`
    align-items: center;
    color: ${colors2.red};
    display: flex;
  `;
});
var FormGroup = (0, import_react96.forwardRef)((props, ref) => {
  const {
    assistiveText,
    children,
    error,
    hideAssistiveText,
    inline,
    label,
    labelId,
    labelInfo,
    labelStyles,
    required,
    skipIcon,
    valid,
    ...rest
  } = { ...defaultProps29, ...props };
  const content = {
    assistiveText
  };
  if (error && valid === false) {
    content.assistiveText = /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)(ErrorComponent, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(Icon, { mr: "xxs", name: "danger-o", title: "Invalid" }),
      /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("span", { children: error })
    ] });
  }
  content.children = !skipIcon ? /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(
    ComponentWrapper,
    {
      suffix: import_is_lite15.default.boolean(valid) && valid ? /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(Icon, { name: "check-o", title: "valid" }) : void 0,
      children
    }
  ) : children;
  if (label) {
    content.label = /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(
      Label,
      {
        labelId,
        labelInfo: labelInfo || required && /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(Icon, { color: "red", ml: "xxs", name: "asterisk", size: 12 }),
        style: labelStyles,
        children: label
      }
    );
  }
  content.main = /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)(import_jsx_runtime59.Fragment, { children: [
    content.label,
    content.children,
    !hideAssistiveText && /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(AssistiveContent, { "data-component-name": "AssistiveContent", children: content.assistiveText })
  ] });
  if (inline) {
    content.main = /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(Box, { "data-component-name": "FormGroupContent", display: "flex", children: content.main });
  }
  return /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(StyledFormGroup, { ref, "data-component-name": "FormGroup", inline, ...rest, children: content.main });
});
FormGroup.displayName = "FormGroup";

// src/components/Field/Checkbox.tsx
var import_react98 = require("react");
var import_hooks6 = require("@gilbarbara/hooks");
var import_jsx_runtime60 = require("react/jsx-runtime");
function FieldCheckbox(props) {
  const {
    accent,
    borderless,
    currentValue,
    disabled,
    items = [],
    name = "CheckboxGroup",
    onChange,
    readOnly,
    setValue
  } = props;
  const ref = (0, import_react98.useRef)(null);
  (0, import_hooks6.useUpdateEffect)(() => {
    currentValue.forEach((d) => {
      const input = ref.current?.querySelector(`[name=${d}]`);
      if (input) {
        input.checked = true;
      }
    });
  }, [currentValue]);
  const handleChange = (event) => {
    const { target } = event;
    const nextValue = target.checked ? [...currentValue, target.name] : currentValue?.filter((d) => d !== target.name);
    setValue(name, nextValue, { shouldDirty: true, shouldValidate: true });
    onChange?.(nextValue);
  };
  return /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(Spacer, { gapVertical: "xs", children: items.map((d) => /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(
    Checkbox,
    {
      accent,
      borderless,
      defaultChecked: currentValue.includes(d.name),
      disabled,
      label: d.label,
      name: d.name,
      onChange: handleChange,
      readOnly,
      size: "sm"
    },
    d.name
  )) });
}
FieldCheckbox.displayName = "FieldCheckbox";
var Checkbox_default = FieldCheckbox;

// src/components/Field/DatePicker.tsx
var import_react99 = require("react");
var import_is_lite17 = __toESM(require("is-lite"));

// src/components/Field/utils.ts
var import_helpers69 = require("@gilbarbara/helpers");
var import_is_lite16 = __toESM(require("is-lite"));

// src/modules/validations.ts
var import_helpers67 = require("@gilbarbara/helpers");
function validateEmail(value) {
  return (0, import_helpers67.isValidEmail)(value) || "Invalid email address";
}
function validateMatchField(compare, value, message = "Confirmation doesn't match") {
  return compare === value || message;
}
function validatePassword(value, options) {
  try {
    (0, import_helpers67.validatePassword)(value, options);
    return true;
  } catch (error) {
    return error.message;
  }
}
function validatePhone(value) {
  if (!value) {
    return void 0;
  }
  return /^\d{10,11}$/.test(clearNumber(value)) || "Invalid phone";
}

// src/components/Field/utils.ts
function getError(name, errors) {
  const { message, type } = errors[name] ?? {};
  if (message) {
    return [message, type];
  }
  return [null];
}
function getInputParameters(props, ...exclude) {
  return (0, import_helpers69.omit)(
    props,
    "assistiveText",
    "children",
    "clearError",
    "debug",
    "dropdownProps",
    "formatter",
    "hideAssistiveText",
    "label",
    "maxLength",
    "minLength",
    "onBlur",
    "onChange",
    "onFocus",
    "required",
    "setValueAs",
    "skipValidation",
    "type",
    "validations",
    "value",
    ...exclude
  );
}
function getRegisterOptions(props) {
  const {
    formatter = "",
    getValues,
    maxLength,
    minLength,
    required,
    setValueAs,
    type = "text",
    validationOptions,
    validations = [],
    value
  } = props;
  const registerOptions = {};
  if (!import_is_lite16.default.undefined(value) || ["checkbox", "toggle"].includes(type)) {
    registerOptions.value = getDefaultValue(value, type);
  }
  if (required) {
    registerOptions.required = "Required";
  }
  if (minLength) {
    registerOptions.minLength = {
      value: minLength,
      message: `Min. Characters: ${minLength}`
    };
  }
  if (maxLength) {
    registerOptions.maxLength = {
      value: maxLength,
      message: `Max. Characters: ${maxLength}`
    };
  }
  if (["money", "number", "phoneBR"].includes(formatter)) {
    registerOptions.setValueAs = (v) => {
      if (!v) {
        return void 0;
      }
      return import_is_lite16.default.number(v) ? v : Number(clearNumber(v));
    };
  }
  if (setValueAs) {
    registerOptions.setValueAs = setValueAs;
  }
  const validated = validations.map((d) => {
    let result;
    if (d === "email") {
      result = validateEmail;
    }
    if (d === "password") {
      result = validatePassword;
    }
    if (d.startsWith("phone")) {
      result = validatePhone;
    }
    if (d.startsWith("equalsTo:")) {
      const [, field] = d.split(":");
      result = { field, fn: validateMatchField };
    }
    return result;
  }).filter(Boolean);
  if (validated.length) {
    registerOptions.validate = validated.reduce((acc, validation) => {
      if (import_is_lite16.default.undefined(validation)) {
        return acc;
      }
      const fnName = import_is_lite16.default.function(validation) ? validation.name : validation.fn.name;
      acc[fnName] = (value_) => {
        const input = value_ ? `${value_}` : "";
        let response;
        if (import_is_lite16.default.function(validation)) {
          response = validation(input, validationOptions);
        } else if (validation.field && import_is_lite16.default.function(validation.fn)) {
          const actualValues = getValues();
          response = validation.fn(`${actualValues[validation.field]}`, input);
        }
        return response;
      };
      return acc;
    }, {});
  }
  return registerOptions;
}
function getDefaultValue(value, type) {
  if (type === "checkbox") {
    return value ?? [];
  } else if (type === "toggle") {
    return value ?? false;
  }
  return value;
}

// src/components/Field/DatePicker.tsx
var import_jsx_runtime61 = require("react/jsx-runtime");
function FieldDatePicker(props) {
  const { currentValue, datePickerProps = { mode: "single" }, name, onChange, setValue } = props;
  const handleChange = (0, import_react99.useCallback)(
    (selection) => {
      const setValueOptions = { shouldDirty: true, shouldValidate: true };
      const value = import_is_lite17.default.array(selection) ? selection.filter(Boolean).join(",") : selection;
      setValue(name, value, setValueOptions);
      if (onChange && (!currentValue || currentValue !== value)) {
        onChange(value);
      }
    },
    [setValue, name, onChange, currentValue]
  );
  const parameters = getInputParameters(props, "currentValue", "registration", "setValue");
  let selected = currentValue;
  if (datePickerProps.mode === "range") {
    selected = currentValue?.split(",") ?? [void 0, void 0];
  }
  return /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(
    DatePickerSelector,
    {
      selected,
      ...parameters,
      ...datePickerProps,
      onChange: handleChange
    }
  );
}
FieldDatePicker.displayName = "FieldDatePicker";
var DatePicker_default = FieldDatePicker;

// src/components/Field/Debug.tsx
var import_helpers71 = require("@gilbarbara/helpers");
var import_is_lite18 = __toESM(require("is-lite"));
var import_jsx_runtime62 = require("react/jsx-runtime");
function primitiveToString(value, key) {
  if (key === "control") {
    return `{ RHF ${key} }`;
  }
  if (key === "children") {
    return "{ ReactNode }";
  }
  if (import_is_lite18.default.function(value)) {
    return "{ Function }";
  }
  if (import_is_lite18.default.plainObject(value) || import_is_lite18.default.array(value)) {
    return JSON.stringify(value, null, 2);
  }
  if (import_is_lite18.default.undefined(value)) {
    return "undefined";
  }
  return value.toString();
}
function FieldDebug(props) {
  const { debug } = props;
  if (!debug) {
    return null;
  }
  return /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(Box, { as: "code", bg: "gray.50", "data-component-name": "FieldDebug", display: "block", padding: "md", children: (0, import_helpers71.objectEntries)(props).filter(([key]) => key !== "debug").sort((0, import_helpers71.sortByLocaleCompare)("0")).map(([key, value]) => /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)(Paragraph, { skipMarginTop: true, children: [
    /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("b", { children: key }),
    ": ",
    primitiveToString(value, key)
  ] }, key)) });
}
FieldDebug.displayName = "FieldDebug";
var Debug_default = FieldDebug;

// src/components/Field/Dropdown.tsx
var import_react100 = require("react");
var import_is_lite19 = __toESM(require("is-lite"));
var import_jsx_runtime63 = require("react/jsx-runtime");
function FieldDropdown(props) {
  const { currentValue, dropdownProps = {}, items = [], name, onChange, setValue } = props;
  const handleChangeDropdown = (0, import_react100.useCallback)(
    (data) => {
      const { multi } = dropdownProps;
      const setValueOptions = { shouldDirty: true, shouldValidate: true };
      if (multi) {
        const values = data.map((d) => d.value);
        setValue(name, values, setValueOptions);
        if (onChange && (!currentValue || currentValue !== values)) {
          onChange(values);
        }
      } else {
        const [selected] = data;
        if (selected) {
          setValue(name, selected.value, setValueOptions);
          if (onChange && (!currentValue || currentValue !== selected.value)) {
            onChange(selected.value);
          }
        } else {
          setValue(name, void 0, setValueOptions);
        }
      }
    },
    [dropdownProps, setValue, name, onChange, currentValue]
  );
  const parameters = getInputParameters(props, "currentValue", "registration", "setValue");
  return /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(
    Dropdown,
    {
      items,
      values: items.filter(
        (d) => import_is_lite19.default.array(currentValue) ? currentValue.includes(d.value) : d.value === currentValue
      ),
      width: "100%",
      ...parameters,
      ...dropdownProps,
      onChange: handleChangeDropdown
    }
  );
}
FieldDropdown.displayName = "FieldDropdown";
var Dropdown_default = FieldDropdown;

// src/components/Field/Input.tsx
var import_react108 = require("react");
var import_helpers77 = require("@gilbarbara/helpers");

// src/components/Input/Input.tsx
var import_react101 = require("react");
var import_react102 = require("@emotion/react");
var import_styled54 = __toESM(require("@emotion/styled"));
var import_jsx_runtime64 = require("react/jsx-runtime");
var defaultProps30 = {
  accent: "primary",
  borderless: false,
  disabled: false,
  large: false,
  prefixSpacing: false,
  readOnly: false,
  suffixSpacing: false,
  type: "text",
  width: "100%"
};
var StyledInput = (0, import_styled54.default)(
  "input",
  getStyledOptions()
)((props) => {
  return import_react102.css`
    ${baseStyles(props)};
    ${inputStyles(props, "input")};
  `;
});
var Input2 = (0, import_react101.forwardRef)((props, ref) => {
  const { name } = props;
  return /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(StyledInput, { ref, "data-component-name": "Input", id: name, ...defaultProps30, ...props });
});
Input2.displayName = "Input";

// src/components/InputColor/InputColor.tsx
var import_react103 = require("react");
var import_react104 = require("@emotion/react");
var import_styled55 = __toESM(require("@emotion/styled"));
var import_helpers72 = require("@gilbarbara/helpers");
var import_jsx_runtime65 = require("react/jsx-runtime");
var defaultProps31 = {
  accent: "primary",
  borderless: false,
  disabled: false,
  large: false,
  onChangeDebounce: 250,
  placeholder: "Select a color",
  readOnly: false,
  width: "auto"
};
var StyledInputColor = (0, import_styled55.default)(
  "div",
  getStyledOptions()
)((props) => {
  const { accent, borderless, disabled, isFilled, width } = props;
  const { grayScale: grayScale2, radius: radius2, white: white2, ...theme } = getTheme(props);
  const darkMode = isDarkMode(props);
  const { mainColor } = getColorTokens(accent, null, theme);
  let borderColor = darkMode ? grayScale2["700"] : grayScale2["500"];
  if (isFilled) {
    borderColor = mainColor;
  }
  const styles2 = borderless ? import_react104.css`
        border: 0;
        border-bottom: 1px solid ${borderColor};
      ` : import_react104.css`
        background-color: ${darkMode ? grayScale2["800"] : white2};
        border: 1px solid ${borderColor};
        border-radius: ${radius2.xs};
      `;
  return import_react104.css`
    align-items: center;
    display: flex;
    padding: 4px 16px 4px 4px;
    width: ${(0, import_helpers72.px)(width)};
    ${styles2};

    ${disabled && import_react104.css`
      ${getDisableStyles(props)}
      color: ${grayScale2["500"]};
    `};

    [data-component-name='Text'] {
      min-width: 75px;
    }
  `;
});
var StyledLabel3 = (0, import_styled55.default)(
  "label",
  getStyledOptions()
)((props) => {
  const { large } = props;
  const { grayScale: grayScale2, radius: radius2, spacing: spacing2 } = getTheme(props);
  const darkMode = isDarkMode(props);
  const size = parseInt(large ? inputHeight.large : inputHeight.normal, 10) - 10;
  const inputSize = (0, import_helpers72.px)(size + 16);
  return import_react104.css`
    border: 1px solid ${darkMode ? grayScale2["700"] : grayScale2["100"]};
    border-radius: ${radius2.xs};
    height: ${(0, import_helpers72.px)(size)};
    overflow: hidden;
    position: relative;
    margin-right: ${spacing2.xs};
    width: ${(0, import_helpers72.px)(size)};

    input {
      appearance: none;
      background: none;
      border: 0;
      cursor: pointer;
      height: ${inputSize};
      margin: -8px;
      padding: 0;
      width: ${inputSize};

      &:disabled {
        cursor: not-allowed;
      }
    }
  `;
});
var InputColor = (0, import_react103.forwardRef)((props, ref) => {
  const {
    accent,
    borderless,
    disabled,
    large,
    name,
    onChange,
    onChangeDebounce,
    placeholder,
    readOnly,
    value: initialValue,
    width,
    ...rest
  } = {
    ...defaultProps31,
    ...props
  };
  const [value, setValue] = (0, import_react103.useState)(initialValue ?? "");
  const debounceTimeout = (0, import_react103.useRef)(0);
  const isDisabled = disabled || readOnly;
  const handleChange = (event) => {
    setValue(event.target.value);
    if (!onChange) {
      return;
    }
    if (!onChangeDebounce) {
      onChange(event);
      return;
    }
    clearTimeout(debounceTimeout.current);
    debounceTimeout.current = window.setTimeout(() => {
      onChange(event);
      debounceTimeout.current = 0;
    }, onChangeDebounce);
  };
  let text;
  if (value) {
    text = /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Text, { children: value });
  } else if (placeholder) {
    text = /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Text, { color: "gray.500", children: placeholder });
  }
  return /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)(
    StyledInputColor,
    {
      accent,
      borderless,
      "data-component-name": "InputColor",
      disabled: isDisabled,
      isFilled: !!value,
      large,
      width,
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(StyledLabel3, { "data-component-name": "InputColorLabel", large, children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(
          "input",
          {
            ref,
            disabled: isDisabled,
            id: name,
            name,
            onChange: handleChange,
            type: "color",
            value,
            ...rest
          }
        ) }),
        text
      ]
    }
  );
});
InputColor.displayName = "InputColor";

// src/components/InputFile/InputFile.tsx
var import_react106 = require("react");
var import_react107 = require("@emotion/react");
var import_styled57 = __toESM(require("@emotion/styled"));
var import_helpers75 = require("@gilbarbara/helpers");

// src/components/Truncate/Truncate.tsx
var import_react105 = require("@emotion/react");
var import_styled56 = __toESM(require("@emotion/styled"));
var import_helpers74 = require("@gilbarbara/helpers");
var import_jsx_runtime66 = require("react/jsx-runtime");
var defaultProps32 = {
  lines: 2
};
var StyledTruncate = (0, import_styled56.default)(
  "span",
  getStyledOptions()
)((props) => {
  const { lines, maxWidth } = props;
  if (maxWidth) {
    return import_react105.css`
      display: inline-block;
      max-width: ${(0, import_helpers74.px)(maxWidth)};
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
    }
    `;
  }
  return import_react105.css`
    display: -webkit-box;
    overflow: hidden;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: ${lines ?? 2};
  `;
});
function Truncate(props) {
  const { children, ...rest } = { ...defaultProps32, ...props };
  return /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(StyledTruncate, { "data-component-name": "Truncate", ...rest, children });
}
Truncate.displayName = "Truncate";

// src/components/InputFile/InputFile.tsx
var import_jsx_runtime67 = require("react/jsx-runtime");
var defaultProps33 = {
  accent: "primary",
  disabled: false,
  invert: true,
  large: false,
  placeholder: "Upload a file",
  readOnly: false,
  width: "100%"
};
var StyledFileInput = (0, import_styled57.default)(
  "div",
  getStyledOptions()
)((props) => {
  const { width } = props;
  const { spacing: spacing2 } = getTheme(props);
  return import_react107.css`
    ${baseStyles(props)};
    align-items: center;
    display: flex;
    width: ${(0, import_helpers75.px)(width)};

    [data-component-name='Truncate'] {
      flex: 1;
      margin-left: ${spacing2.xs};

      &:empty {
        display: none;
      }
    }
  `;
});
var StyledInput2 = (0, import_styled57.default)("input", getStyledOptions())`
  bottom: 0;
  font-size: 24px;
  left: 0;
  opacity: 0;
  position: absolute;
  right: 0;
  top: 0;
  z-index: 1;

  &::file-selector-button {
    cursor: pointer;
  }
`;
var InputFile = (0, import_react106.forwardRef)((props, ref) => {
  const { accent, disabled, invert, large, name, onChange, placeholder, readOnly, value, ...rest } = {
    ...defaultProps33,
    ...props
  };
  const [localValue, setLocalValue] = (0, import_react106.useState)(null);
  const isDisabled = disabled || readOnly;
  const handleChange = (event) => {
    const { files } = event.target;
    setLocalValue(files?.length ? files[0].name : "");
    onChange?.(event);
  };
  return /* @__PURE__ */ (0, import_jsx_runtime67.jsxs)(StyledFileInput, { "data-component-name": "InputFile", ...rest, children: [
    /* @__PURE__ */ (0, import_jsx_runtime67.jsxs)(BoxInline, { position: "relative", children: [
      /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(
        Button,
        {
          bg: accent,
          disabled: isDisabled,
          invert,
          size: large ? "lg" : "md",
          style: { zIndex: isDisabled ? 2 : 1 },
          children: placeholder
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(StyledInput2, { ref, id: name, name, onChange: handleChange, type: "file" })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(Truncate, { maxWidth: "100%", children: localValue ?? value })
  ] });
});
InputFile.displayName = "InputFile";

// src/components/Field/Input.tsx
var import_jsx_runtime68 = require("react/jsx-runtime");
function FieldInput(props) {
  const {
    accent,
    currentValue,
    formatter = "",
    id,
    isDirty,
    name,
    onBlur,
    onChange,
    onFocus,
    registration,
    setStatus,
    skipValidation,
    type
  } = props;
  const handleBlur = (0, import_react108.useCallback)(
    (event) => {
      setStatus({ isActive: false, isDirty });
      registration.onBlur(event);
      onBlur?.(event);
    },
    [isDirty, onBlur, registration, setStatus]
  );
  const handleFocus = (0, import_react108.useCallback)(
    (event) => {
      setStatus({ isActive: true });
      onFocus?.(event);
    },
    [onFocus, setStatus]
  );
  const handleChange = (0, import_react108.useCallback)(
    (event) => {
      const { value } = event.target;
      if (["phoneBR", "phoneUS"].includes(formatter)) {
        event.target.value = clearNumber(value).slice(0, 11);
      } else if (formatter) {
        event.target.value = clearNumber(value);
      }
      registration.onChange(event);
      onChange?.(value);
    },
    [formatter, onChange, registration]
  );
  const input = {
    ...getInputParameters(
      props,
      "currentValue",
      "inline",
      "isDirty",
      "registration",
      "setStatus"
    ),
    id: id ?? name,
    onBlur: handleBlur,
    onChange: handleChange,
    onFocus: handleFocus
  };
  let content;
  switch (type) {
    case "color": {
      content = /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(InputColor, { ...registration, ...input, value: currentValue });
      break;
    }
    case "file": {
      content = /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(
        InputFile,
        {
          accent,
          ...registration,
          ...input,
          value: currentValue?.length ? currentValue[0].name : ""
        }
      );
      break;
    }
    case "hidden": {
      content = /* @__PURE__ */ (0, import_jsx_runtime68.jsx)("input", { ...registration, ...input, type: "hidden" });
      break;
    }
    default: {
      const parameters = {};
      if (currentValue) {
        switch (formatter) {
          case "money": {
            parameters.value = (0, import_helpers77.formatMoney)(currentValue);
            break;
          }
          case "phoneBR": {
            parameters.value = (0, import_helpers77.formatPhoneBR)(`${currentValue}`);
            break;
          }
          case "phoneUS": {
            parameters.value = (0, import_helpers77.formatPhoneUS)(`${currentValue}`);
            break;
          }
        }
      }
      content = /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(
        Input2,
        {
          ...registration,
          ...input,
          ...parameters,
          suffixSpacing: !skipValidation,
          type
        }
      );
      break;
    }
  }
  return content;
}
FieldInput.displayName = "FieldInput";
var Input_default = FieldInput;

// src/components/Field/Radio.tsx
var import_jsx_runtime69 = require("react/jsx-runtime");
function FieldRadio(props) {
  const { accent, borderless, disabled, items = [], onChange, readOnly, registration } = props;
  const handleChange = (event) => {
    const { target } = event;
    onChange?.(target.value);
  };
  return /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(Spacer, { gapVertical: "xs", children: items.map((d) => /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(
    Radio,
    {
      ...d,
      ...registration,
      accent,
      borderless,
      disabled,
      onChange: handleChange,
      readOnly,
      size: "sm"
    },
    d.value
  )) });
}
FieldRadio.displayName = "FieldRadio";
var Radio_default = FieldRadio;

// src/components/Field/Select.tsx
var import_react111 = require("react");

// src/components/Select/Select.tsx
var import_react109 = require("react");
var import_react110 = require("@emotion/react");
var import_styled58 = __toESM(require("@emotion/styled"));
var import_hooks7 = require("@gilbarbara/hooks");
var import_jsx_runtime70 = require("react/jsx-runtime");
var defaultProps34 = {
  accent: "primary",
  borderless: false,
  disabled: false,
  large: false,
  multiple: false,
  prefixSpacing: false,
  width: "100%"
};
var StyledSelect = (0, import_styled58.default)(
  "select",
  getStyledOptions()
)((props) => {
  const { accent = defaultProps34.accent, filled, large, multiple } = props;
  const { darkColor: darkColor2, darkMode, grayScale: grayScale2, spacing: spacing2, white: white2, ...theme } = getTheme(props);
  const { mainColor } = getColorTokens(accent, null, theme);
  let color = grayScale2["500"];
  const paddingY = large ? spacing2.sm : spacing2.xs;
  if (filled) {
    color = darkMode ? white2 : darkColor2;
  }
  if (multiple) {
    color = grayScale2["500"];
  }
  return import_react110.css`
    ${appearanceStyles};
    ${baseStyles(props)};
    background-image: url('${`data:image/svg+xml,%3Csvg height="16px" version="1.1" viewBox="0 0 16 16" width="16px" xmlns="http://www.w3.org/2000/svg" %3E%3Cpath d="M14,5.52466366 C14,5.41704038 13.9641256,5.32735426 13.8923766,5.25560543 L13.3004484,4.60986548 C13.1928251,4.53811658 13.0852018,4.50224213 12.9775785,4.50224213 C12.8699551,4.50224213 12.7802691,4.53811658 12.7085202,4.60986548 L8.02690583,9.3452915 L3.29147982,4.60986548 C3.21973094,4.53811658 3.13004485,4.50224213 3.02242152,4.50224213 C2.91479821,4.50224213 2.82511211,4.53811658 2.75336323,4.60986548 L2.10762332,5.25560543 C2.03587444,5.32735426 2,5.41704038 2,5.52466366 C2,5.63228701 2.03587444,5.72197313 2.10762332,5.79372196 L7.70403588,11.3901345 C7.81165919,11.4618834 7.91928251,11.4977579 8.02690583,11.4977579 C8.13452915,11.4977579 8.22421524,11.4618834 8.29596412,11.3901345 L13.8923766,5.79372196 C13.9641256,5.72197313 14,5.63228701 14,5.52466366 Z" fill="${color.replace(
    "#",
    "%23"
  )}" /%3E%3C/svg%3E`}');
    background-repeat: no-repeat;
    background-position: right 12px center;
    ${inputStyles(props, "select")};
    color: ${color};

    ${filled && import_react110.css`
      border-color: ${mainColor};
    `};

    &[multiple] {
      padding: 0;

      > option {
        padding: ${paddingY} ${spacing2.md};

        &:not(:checked) {
          background: ${`${white2} linear-gradient(0deg, ${white2} 0%, ${white2} 100%)`};
        }

        &:checked {
          background: ${`${mainColor} linear-gradient(0deg, ${mainColor} 0%, ${mainColor} 100%)`};
          color: ${white2};
          font-weight: bold;
        }
      }
    }
  `;
});
var Select = (0, import_react109.forwardRef)((props, ref) => {
  const { name, onChange, ...rest } = { ...defaultProps34, ...props };
  const localRef = (0, import_react109.useRef)(null);
  const mergedRefs = (0, import_hooks7.useMergeRefs)(localRef, ref);
  const [isFilled, setFilled] = (0, import_react109.useState)(!!rest.defaultValue || !!rest.value);
  (0, import_hooks7.useMount)(() => {
    setFilled(!!localRef.current?.value);
  });
  const handleChange = (0, import_react109.useCallback)(
    (event) => {
      setFilled(!!event.target.value);
      onChange?.(event);
    },
    [onChange]
  );
  return /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(
    StyledSelect,
    {
      ref: mergedRefs,
      "data-component-name": "Select",
      filled: isFilled,
      id: name,
      name,
      onChange: handleChange,
      ...rest
    }
  );
});
Select.displayName = "Select";

// src/components/Field/Select.tsx
var import_jsx_runtime71 = require("react/jsx-runtime");
function FieldSelect(props) {
  const { children, id, isDirty, name, onBlur, onChange, onFocus, registration, setStatus } = props;
  const handleBlur = (0, import_react111.useCallback)(
    (event) => {
      setStatus({ isActive: false, isDirty });
      registration.onBlur(event);
      onBlur?.(event);
    },
    [isDirty, onBlur, registration, setStatus]
  );
  const handleFocus = (0, import_react111.useCallback)(
    (event) => {
      setStatus({ isActive: true });
      onFocus?.(event);
    },
    [onFocus, setStatus]
  );
  const handleChange = (0, import_react111.useCallback)(
    (event) => {
      registration.onChange(event);
      onChange?.(event.target.value);
    },
    [onChange, registration]
  );
  const input = {
    ...getInputParameters(props, "isDirty", "registration", "setStatus"),
    id: id ?? name,
    onBlur: handleBlur,
    onChange: handleChange,
    onFocus: handleFocus
  };
  return /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(Select, { ...registration, ...input, children });
}
FieldSelect.displayName = "FieldSelect";
var Select_default = FieldSelect;

// src/components/Field/Textarea.tsx
var import_react114 = require("react");

// src/components/Textarea/Textarea.tsx
var import_react112 = require("react");
var import_react113 = require("@emotion/react");
var import_styled59 = __toESM(require("@emotion/styled"));
var import_jsx_runtime72 = require("react/jsx-runtime");
var defaultProps35 = {
  accent: "primary",
  borderless: false,
  disabled: false,
  prefixSpacing: false,
  readOnly: false,
  rows: 3,
  suffixSpacing: false,
  width: "100%"
};
var StyledTextarea = (0, import_styled59.default)(
  "textarea",
  getStyledOptions()
)((props) => {
  return import_react113.css`
    ${baseStyles(props)};
    ${inputStyles(props, "textarea")};
  `;
});
var Textarea = (0, import_react112.forwardRef)((props, ref) => {
  const { name, ...rest } = { ...defaultProps35, ...props };
  return /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(StyledTextarea, { ref, "data-component-name": "Textarea", id: name, name, ...rest });
});
Textarea.displayName = "Textarea";

// src/components/Field/Textarea.tsx
var import_jsx_runtime73 = require("react/jsx-runtime");
function FieldTextarea(props) {
  const { id, isDirty, name, onBlur, onChange, onFocus, registration, setStatus, skipValidation } = props;
  const handleBlur = (0, import_react114.useCallback)(
    (event) => {
      setStatus({ isActive: false, isDirty });
      registration.onBlur(event);
      onBlur?.(event);
    },
    [isDirty, onBlur, registration, setStatus]
  );
  const handleFocus = (0, import_react114.useCallback)(
    (event) => {
      setStatus({ isActive: true });
      onFocus?.(event);
    },
    [onFocus, setStatus]
  );
  const handleChange = (0, import_react114.useCallback)(
    (event) => {
      registration.onChange(event);
      onChange?.(event.target.value);
    },
    [onChange, registration]
  );
  const input = {
    ...getInputParameters(props, "isDirty", "registration", "setStatus"),
    id: id ?? name,
    onBlur: handleBlur,
    onChange: handleChange,
    onFocus: handleFocus
  };
  return /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Textarea, { ...registration, ...input, suffixSpacing: !skipValidation });
}
FieldTextarea.displayName = "FieldTextarea";
var Textarea_default = FieldTextarea;

// src/components/Field/Toggle.tsx
var import_react117 = require("react");
var import_react_hook_form = require("react-hook-form");
var import_is_lite21 = __toESM(require("is-lite"));

// src/components/Toggle/Toggle.tsx
var import_react115 = require("react");
var import_react116 = require("@emotion/react");
var import_styled60 = __toESM(require("@emotion/styled"));
var import_helpers80 = require("@gilbarbara/helpers");
var import_hooks8 = require("@gilbarbara/hooks");
var import_is_lite20 = __toESM(require("is-lite"));
var import_jsx_runtime74 = require("react/jsx-runtime");
var styles = {
  sm: {
    borderRadius: 8,
    height: 16,
    space: 2,
    width: 32
  },
  md: {
    borderRadius: 10,
    height: 20,
    space: 2,
    width: 40
  },
  lg: {
    borderRadius: 12,
    height: 24,
    space: 2,
    width: 48
  }
};
var defaultProps36 = {
  accent: "primary",
  defaultChecked: false,
  disabled: false,
  size: "md"
};
var StyledInput3 = (0, import_styled60.default)("input")`
  bottom: 0;
  left: 0;
  opacity: 0.0001;
  position: absolute;
  right: 0;
  top: 0;
  z-index: -1;
`;
var StyledTrack = (0, import_styled60.default)(
  "span",
  getStyledOptions()
)((props) => {
  const { accent, isActive } = props;
  const { grayScale: grayScale2, radius: radius2, ...theme } = getTheme(props);
  const { mainColor } = getColorTokens(accent, null, theme);
  let backgroundColor = isDarkMode(props) ? grayScale2["700"] : grayScale2["100"];
  if (isActive) {
    backgroundColor = mainColor;
  }
  return import_react116.css`
    background-color: ${backgroundColor};
    border-radius: ${radius2.sm};
    bottom: 0;
    left: 0;
    position: absolute;
    transition: background-color 0.4s;
    right: 0;
    top: 0;
  `;
});
var StyledButton3 = (0, import_styled60.default)(
  "span",
  getStyledOptions()
)((props) => {
  const { accent, disabled, isActive, size } = props;
  const { grayScale: grayScale2, white: white2, ...theme } = getTheme(props);
  const { mainColor } = getColorTokens(accent, null, theme);
  let backgroundColor = white2;
  if (accent === "white" && isActive) {
    backgroundColor = grayScale2["800"];
  } else if (isActive) {
    backgroundColor = getColorWithTone(mainColor, "50");
  }
  const { height, space } = styles[size];
  return import_react116.css`
    background-color: ${backgroundColor};
    border-radius: 50%;
    bottom: ${(0, import_helpers80.px)(space)};
    left: ${isActive ? (0, import_helpers80.px)(height + 2) : (0, import_helpers80.px)(space)};
    opacity: ${disabled ? 0.7 : 1};
    position: absolute;
    top: ${(0, import_helpers80.px)(space)};
    transition:
      background-color 0.4s,
      left 0.2s ease;
    width: ${(0, import_helpers80.px)(height - 4)};
  `;
});
var StyledToggle = (0, import_styled60.default)("div")(
  (props) => {
    const { accent = "primary", disabled, label, size } = props;
    const { height, width } = styles[size];
    return import_react116.css`
      ${baseStyles(props)};
      cursor: ${disabled ? "default" : "pointer"};
      height: ${(0, import_helpers80.px)(height)};
      margin-right: ${label ? "8px" : 0};
      opacity: ${disabled ? 0.8 : 1};
      position: relative;
      user-select: none;
      vertical-align: middle;
      width: ${(0, import_helpers80.px)(width)};

      &:focus {
        outline: none;

        [data-component-name='ToggleTrack'] {
          ${getOutlineStyles(getColorTokens(accent, null, getTheme(props)).mainColor)};
        }
      }
    `;
  }
);
var Toggle = (0, import_react115.forwardRef)((props, ref) => {
  const {
    accent,
    checked,
    defaultChecked,
    disabled,
    label,
    labelOptions,
    name,
    onChange,
    onToggle,
    size,
    ...rest
  } = { ...defaultProps36, ...props };
  const [isActive, setActive] = (0, import_react115.useState)(import_is_lite20.default.boolean(checked) ? checked : defaultChecked);
  const previousChecked = (0, import_hooks8.usePrevious)(checked);
  (0, import_hooks8.useUpdateEffect)(() => {
    if (import_is_lite20.default.boolean(checked) && previousChecked !== checked) {
      setActive(checked);
    }
  }, [checked, previousChecked]);
  const handleChange = (event) => {
    if (import_is_lite20.default.boolean(checked)) {
      return;
    }
    const { target } = event;
    setActive(target.checked);
    onChange?.(target.checked);
  };
  const handleClickLabel = () => {
    if (!disabled) {
      onToggle?.(!isActive);
    }
  };
  const handleClickInput = (event) => {
    event.stopPropagation();
  };
  const handleKeyDown2 = (event) => {
    if (disabled || !["Space", "Enter"].includes(event.code)) {
      return;
    }
    const status = !isActive;
    onToggle?.(status);
    if (import_is_lite20.default.boolean(checked)) {
      return;
    }
    setActive(status);
    onChange?.(status);
  };
  const value = isActive ? "on" : "off";
  const checkStatus = {};
  if (import_is_lite20.default.boolean(checked)) {
    checkStatus.checked = checked;
  } else {
    checkStatus.defaultChecked = defaultChecked;
  }
  return /* @__PURE__ */ (0, import_jsx_runtime74.jsxs)(
    Label,
    {
      "data-component-name": "Toggle",
      inline: true,
      onClick: handleClickLabel,
      style: { cursor: disabled ? "default" : "pointer" },
      ...labelOptions,
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(
          StyledInput3,
          {
            ref,
            "aria-checked": isActive,
            "aria-label": !label ? name : void 0,
            disabled,
            name,
            onChange: handleChange,
            onClick: handleClickInput,
            role: "switch",
            type: "checkbox",
            value,
            ...checkStatus
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime74.jsxs)(
          StyledToggle,
          {
            accent,
            "data-component-name": "ToggleElement",
            disabled,
            label,
            name,
            onKeyDown: handleKeyDown2,
            size,
            tabIndex: 0,
            ...rest,
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(
                StyledTrack,
                {
                  accent,
                  "data-component-name": "ToggleTrack",
                  isActive,
                  size
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(StyledButton3, { accent, disabled, isActive, size })
            ]
          }
        ),
        label
      ]
    }
  );
});
Toggle.displayName = "Toggle";

// src/components/Field/Toggle.tsx
var import_jsx_runtime75 = require("react/jsx-runtime");
function FieldToggle(props) {
  const { accent, disabled, name, onChange, required, setValue } = props;
  const handleToggle = (0, import_react117.useCallback)(
    (status) => {
      setValue(name, status, {
        shouldDirty: true,
        shouldValidate: true
      });
      onChange?.(status);
    },
    [name, onChange, setValue]
  );
  return /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(
    import_react_hook_form.Controller,
    {
      name,
      render: ({ field }) => {
        return /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(
          Toggle,
          {
            accent,
            checked: import_is_lite21.default.undefined(field.value) ? false : field.value,
            disabled,
            name,
            onToggle: handleToggle
          }
        );
      },
      rules: { required }
    }
  );
}
FieldToggle.displayName = "FieldToggle";
var Toggle_default = FieldToggle;

// src/components/Field/Field.tsx
var import_jsx_runtime76 = require("react/jsx-runtime");
var defaultProps37 = {
  accent: "primary",
  borderless: false,
  debug: false,
  disabled: false,
  hideAssistiveText: false,
  inline: false,
  label: "",
  readOnly: false,
  required: false,
  skipValidation: false,
  type: "text"
};
function Field(props) {
  const {
    assistiveText,
    hideAssistiveText,
    id,
    inline,
    label,
    name,
    required,
    skipValidation,
    style,
    type,
    validations,
    value
  } = { ...defaultProps37, ...props };
  const [{ isActive, isDirty }, setStatus] = (0, import_hooks9.useSetState)({
    isActive: false,
    isDirty: false
  });
  const formContext = (0, import_react_hook_form2.useFormContext)();
  if (!formContext) {
    throw new Error(
      'could not find the "form" context value; please ensure the component is wrapped in a <Form>'
    );
  }
  const {
    formState: { dirtyFields, errors },
    getValues,
    register,
    setValue,
    unregister
  } = formContext;
  const registerOptions = (0, import_react118.useMemo)(
    () => getRegisterOptions({ ...props, getValues }),
    [getValues, props]
  );
  const registration = register(name, registerOptions);
  const currentValue = (0, import_react_hook_form2.useWatch)({
    name,
    defaultValue: getDefaultValue(value ?? getValues()[name], type)
  });
  const [error, errorType = ""] = getError(name, errors);
  (0, import_hooks9.useUnmount)(() => {
    unregister(name);
  });
  const showError = !!error && errorType !== "revalidate" && (!isActive || isDirty);
  const isValid = !!currentValue && !error && (required ?? validations?.length);
  const groupProps = {
    assistiveText,
    hideAssistiveText,
    inline,
    label,
    labelId: id ?? name,
    required,
    style
  };
  const output = { error };
  if (!skipValidation) {
    groupProps.skipIcon = [
      "checkbox",
      "datePicker",
      "dropdown",
      "radio",
      "select",
      "toggle"
    ].includes(type);
    if (showError) {
      groupProps.error = error;
      groupProps.valid = false;
    } else if (isValid) {
      groupProps.valid = true;
    }
  }
  switch (type) {
    case "checkbox": {
      output.content = /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(
        Checkbox_default,
        {
          currentValue,
          setValue,
          ...props
        }
      );
      break;
    }
    case "datePicker": {
      output.content = /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(
        DatePicker_default,
        {
          currentValue,
          registration,
          setValue,
          ...props
        }
      );
      break;
    }
    case "dropdown": {
      output.content = /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(
        Dropdown_default,
        {
          currentValue,
          registration,
          setValue,
          ...props
        }
      );
      break;
    }
    case "password": {
      output.content = /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(
        Input_default,
        {
          currentValue,
          isDirty: !!dirtyFields[name],
          registration,
          setStatus,
          ...props
        }
      );
      break;
    }
    case "radio": {
      output.content = /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(Radio_default, { registration, ...props });
      break;
    }
    case "select": {
      output.content = /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(
        Select_default,
        {
          isDirty: !!dirtyFields[name],
          registration,
          setStatus,
          ...props
        }
      );
      break;
    }
    case "textarea": {
      output.content = /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(
        Textarea_default,
        {
          isDirty: !!dirtyFields[name],
          registration,
          setStatus,
          ...props
        }
      );
      break;
    }
    case "toggle": {
      output.content = /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(Toggle_default, { ...props, setValue });
      break;
    }
    default: {
      output.content = /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(
        Input_default,
        {
          currentValue,
          isDirty: !!dirtyFields[name],
          registration,
          setStatus,
          ...props
        }
      );
    }
  }
  if (type === "hidden") {
    return output.content;
  }
  return /* @__PURE__ */ (0, import_jsx_runtime76.jsxs)(FormGroup, { "data-component-name": "Field", ...groupProps, children: [
    output.content,
    /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(Debug_default, { ...props })
  ] });
}
Field.displayName = "Field";

// src/components/Form/Form.tsx
var import_react_hook_form3 = require("react-hook-form");
var import_jsx_runtime77 = require("react/jsx-runtime");
function Form({
  children,
  ...props
}) {
  const formMethods = (0, import_react_hook_form3.useForm)({
    mode: "onChange",
    ...props
  });
  return /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(import_react_hook_form3.FormProvider, { "data-component-name": "Form", ...formMethods, children: children({ formMethods }) });
}
Form.displayName = "Form";

// src/components/Grid/Grid.tsx
var import_react119 = require("react");
var import_react120 = require("@emotion/react");
var import_styled61 = __toESM(require("@emotion/styled"));
var import_helpers82 = require("@gilbarbara/helpers");
var import_jsx_runtime78 = require("react/jsx-runtime");
var defaultProps38 = {
  display: "grid"
};
var StyledGrid = (0, import_styled61.default)(
  "div",
  getStyledOptions()
)((props) => {
  const {
    alignContent,
    alignItems,
    autoColumns,
    autoFlow,
    autoRows,
    columnGap,
    gap,
    grid,
    justifyContent,
    justifyItems,
    placeContent,
    placeItems,
    rowGap,
    template,
    templateAreas,
    templateColumns,
    templateRows
  } = props;
  return import_react120.css`
    align-content: ${alignContent};
    align-items: ${alignItems};
    column-gap: ${columnGap && (0, import_helpers82.px)(columnGap)};
    gap: ${gap && (0, import_helpers82.px)(gap)};
    grid-auto-columns: ${autoColumns};
    grid-auto-flow: ${autoFlow};
    grid-auto-rows: ${autoRows};
    grid-template-areas: ${templateAreas};
    grid-template-columns: ${templateColumns};
    grid-template-rows: ${templateRows};
    grid-template: ${template};
    grid: ${grid};
    justify-content: ${justifyContent};
    justify-items: ${justifyItems};
    place-content: ${placeContent};
    place-items: ${placeItems};
    row-gap: ${rowGap && (0, import_helpers82.px)(rowGap)};

    ${baseStyles(props)};
    ${colorStyles(props, false)};
    ${borderStyles(props)};
    ${displayStyles(props)};
    ${flexItemStyles(props)};
    ${layoutStyles(props)};
    ${marginStyles(props)};
    ${paddingStyles(props)};
    ${positioningStyles(props)};
    ${radiusStyles(props)};
    ${shadowStyles(props)};
  `;
});
var Grid = (0, import_react119.forwardRef)((props, ref) => /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(StyledGrid, { ref, "data-component-name": "Grid", ...defaultProps38, ...props }));
Grid.displayName = "Grid";

// src/components/List/List.tsx
var import_react122 = require("react");
var import_react123 = require("@emotion/react");
var import_styled63 = __toESM(require("@emotion/styled"));
var import_helpers85 = require("@gilbarbara/helpers");

// src/components/List/Item.tsx
var import_react121 = require("@emotion/react");
var import_styled62 = __toESM(require("@emotion/styled"));
var import_helpers83 = require("@gilbarbara/helpers");

// src/components/List/utils.ts
function getBorderColor(props) {
  const { borderColor } = props;
  const darkMode = isDarkMode(props);
  if (borderColor) {
    return borderColor;
  }
  return darkMode ? "gray.700" : "gray.100";
}

// src/components/List/Item.tsx
var import_jsx_runtime79 = require("react/jsx-runtime");
function getSpacing(size, spacing2) {
  switch (size) {
    case "sm": {
      return [spacing2.xs, spacing2.sm];
    }
    case "lg": {
      return [spacing2.md, spacing2.lg];
    }
    default: {
      return [spacing2.sm, spacing2.md];
    }
  }
}
var StyledListItem = (0, import_styled62.default)(
  Box,
  getStyledOptions()
)((props) => {
  const { hideBorder, hideDivider, listDirection: direction, size } = props;
  const { black: black2, spacing: spacing2, white: white2, ...theme } = getTheme(props);
  const [spacerMain, spacerCross] = getSpacing(size, spacing2);
  const { mainColor } = getColorTokens(getBorderColor(props), null, theme);
  return import_react121.css`
    ${direction === "vertical" && import_react121.css`
      border-bottom: ${hideDivider ? void 0 : `1px solid ${mainColor}`};
      padding: ${spacerMain} ${hideBorder ? 0 : spacerCross};

      &:last-of-type {
        border-bottom: none;
      }
    `};

    ${direction === "horizontal" && import_react121.css`
      border-right: ${hideDivider ? void 0 : `1px solid ${mainColor}`};
      padding: ${hideBorder ? 0 : spacerMain} ${spacerCross};

      &:last-of-type {
        border-right: none;
      }
    `};

    ${boxStyles((0, import_helpers83.omit)(props, "border"))};
  `;
});
function ListItem(props) {
  const { direction, ...rest } = props;
  return /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(StyledListItem, { as: "li", "data-component-name": "ListItem", ...rest, listDirection: direction });
}

// src/components/List/List.tsx
var import_jsx_runtime80 = require("react/jsx-runtime");
var defaultProps39 = {
  direction: "vertical",
  hideBorder: false,
  hideDivider: false,
  radius: "xs",
  shadow: false,
  size: "md"
};
var StyledList = (0, import_styled63.default)(
  "ul",
  getStyledOptions()
)((props) => {
  const { direction, hideBorder } = props;
  const borderProps = {};
  if (!hideBorder) {
    borderProps.border = [{ side: "all", color: getBorderColor(props) }];
  }
  return import_react123.css`
    ${baseStyles(props)};
    display: flex;
    flex-direction: ${direction === "horizontal" ? "row" : "column"};
    list-style-position: inside;
    list-style-type: none;
    margin: 0;
    overflow: hidden;
    padding: 0;
    ${borderStyles(borderProps)};
    ${layoutStyles(props)};
    ${marginStyles(props)};
    ${radiusStyles(props)};
    ${shadowStyles(props)};
  `;
});
var List2 = (0, import_react122.forwardRef)((props, ref) => {
  const { children, ...rest } = { ...defaultProps39, ...props };
  return /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(StyledList, { ref, "data-component-name": "List", ...rest, children: recursiveChildrenEnhancer(children, (0, import_helpers85.omit)(rest, "radius", "shadow"), {
    componentType: ListItem,
    overrideProps: false
  }) });
});
List2.displayName = "List";

// src/components/Modal/Modal.tsx
var import_react124 = require("react");
var import_react125 = require("@emotion/react");
var import_styled64 = __toESM(require("@emotion/styled"));
var import_helpers87 = require("@gilbarbara/helpers");
var import_jsx_runtime81 = require("react/jsx-runtime");
var defaultProps40 = {
  closeOnClickOverlay: true,
  closeOnEsc: true,
  hideCloseButton: false,
  hideOverlay: false,
  isActive: false,
  maxHeight: "80vh",
  maxWidth: "100vw",
  padding: "lg",
  radius: "lg",
  shadow: "high",
  zIndex: 1e3
};
var StyledModal = (0, import_styled64.default)(
  "div",
  getStyledOptions()
)((props) => {
  const { maxWidth, width } = props;
  const { black: black2, darkColor: darkColor2, white: white2 } = getTheme(props);
  const darkMode = isDarkMode(props);
  return import_react125.css`
    background-color: ${darkMode ? darkColor2 : white2};
    color: ${darkMode ? white2 : black2};
    max-width: ${(0, import_helpers87.px)(maxWidth)};
    width: ${width ? (0, import_helpers87.px)(width) : "auto"};
    ${borderStyles(props)};
    ${paddingStyles(props)};
    ${radiusStyles(props)};
    ${shadowStyles(props)};
  `;
});
var StyledModalContent = (0, import_styled64.default)(
  "div",
  getStyledOptions()
)((props) => {
  const { maxHeight, padding } = props;
  const { spacing: spacing2 } = getTheme(props);
  return import_react125.css`
    margin: 0 -${padding ? spacing2[padding] : padding};
    padding: 0 ${padding ? spacing2[padding] : padding};
    max-height: ${(0, import_helpers87.px)(maxHeight)};
    overflow-y: auto;
  `;
});
function Modal(props) {
  const {
    children,
    closeOnClickOverlay,
    closeOnEsc,
    hideCloseButton,
    hideOverlay,
    isActive,
    maxHeight,
    onClose,
    onOpen,
    style,
    title,
    zIndex,
    ...rest
  } = { ...defaultProps40, ...props };
  const { padding } = rest;
  const { black: black2, darkMode, white: white2 } = getTheme({ theme: (0, import_react125.useTheme)() });
  const handlePortalClose = (0, import_react124.useCallback)(() => {
    onClose?.();
  }, [onClose]);
  let header;
  if (!hideCloseButton || title) {
    header = /* @__PURE__ */ (0, import_jsx_runtime81.jsxs)(Box, { align: "center", display: "flex", justify: title ? "space-between" : "flex-end", mb: "md", children: [
      title && /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(H3, { style: { marginBottom: 0 }, children: title }),
      !hideCloseButton && /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(ButtonUnstyled, { onClick: onClose, children: /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(Icon, { color: darkMode ? white2 : black2, name: "close", size: 26 }) })
    ] });
  }
  return /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(
    Portal,
    {
      closeOnClickOverlay,
      closeOnEsc,
      hideOverlay,
      isActive,
      onClose: handlePortalClose,
      onOpen,
      zIndex,
      children: /* @__PURE__ */ (0, import_jsx_runtime81.jsxs)(StyledModal, { "data-component-name": "Modal", ...rest, style, children: [
        header,
        /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(StyledModalContent, { maxHeight, padding, children })
      ] })
    }
  );
}
Modal.displayName = "Modal";

// src/components/NonIdealState/NonIdealState.tsx
var import_react126 = require("@emotion/react");
var import_styled65 = __toESM(require("@emotion/styled"));
var import_helpers89 = require("@gilbarbara/helpers");
var import_jsx_runtime82 = require("react/jsx-runtime");
var defaultProps41 = {
  direction: "vertical",
  hideIcon: false,
  maxWidth: "600px",
  padding: "md",
  shadow: false,
  size: "md",
  type: "not-found"
};
var StyledNonIdealState = (0, import_styled65.default)(
  "div",
  getStyledOptions("type")
)((props) => {
  const { direction } = props;
  return import_react126.css`
    ${direction === "horizontal" ? "align-items: center;" : ""};
    display: ${direction === "horizontal" ? "flex" : "block"};
    margin: 0 auto;
    text-align: ${direction === "horizontal" ? "left" : "center"};
    width: 100%;
    ${baseStyles(props)};
    ${colorStyles(props, false)};
    ${borderStyles(props)};
    ${flexItemStyles(props)};
    ${layoutStyles(props)};
    ${marginStyles(props)};
    ${paddingStyles(props)};
    ${radiusStyles(props)};
    ${shadowStyles(props)};
  `;
});
function NonIdealState(props) {
  const { children, description, direction, hideIcon, icon, size, title, type } = {
    ...defaultProps41,
    ...props
  };
  const iconSize = {
    sm: 48,
    md: 64,
    lg: 96
  };
  const isVertical = direction === "vertical";
  const template = {};
  const output = {};
  switch (type) {
    case "error": {
      template.icon = /* @__PURE__ */ (0, import_jsx_runtime82.jsx)(Icon, { name: "danger-o", size: iconSize[size] });
      template.title = "Something went wrong";
      template.description = "An unexpected error has occurred. Try reloading the page.";
      break;
    }
    case "no-results": {
      template.icon = /* @__PURE__ */ (0, import_jsx_runtime82.jsx)(Icon, { name: "search", size: iconSize[size] });
      template.title = "No search results";
      template.description = "Your search didn't match anything.";
      break;
    }
    case "not-found": {
      template.icon = /* @__PURE__ */ (0, import_jsx_runtime82.jsx)(Icon, { name: "smile-none", size: iconSize[size] });
      template.title = "Page not found";
      template.description = "We are sorry, but the page you requested doesn't exist.";
      break;
    }
    case "offline": {
      template.icon = /* @__PURE__ */ (0, import_jsx_runtime82.jsx)(Icon, { name: "arrows-exchange-alt-v", size: iconSize[size] });
      template.title = "No connection";
      template.description = "Please check our internet connection and try again.";
      break;
    }
  }
  if (!hideIcon && (icon ?? template.icon)) {
    output.icon = /* @__PURE__ */ (0, import_jsx_runtime82.jsx)(Box, { align: "center", flexBox: true, justify: "center", children: icon ? /* @__PURE__ */ (0, import_jsx_runtime82.jsx)(Icon, { name: icon, size: iconSize[size] }) : template.icon });
  }
  if (title !== null && (title || template.title)) {
    const content = title ?? template.title;
    switch (size) {
      case "sm": {
        output.title = /* @__PURE__ */ (0, import_jsx_runtime82.jsx)(H3, { mb: 0, children: content });
        break;
      }
      case "md": {
        output.title = /* @__PURE__ */ (0, import_jsx_runtime82.jsx)(H2, { mb: 0, children: content });
        break;
      }
      default: {
        output.title = /* @__PURE__ */ (0, import_jsx_runtime82.jsx)(H1, { mb: 0, children: content });
        break;
      }
    }
  }
  if (description !== null && (description || template.description)) {
    output.description = /* @__PURE__ */ (0, import_jsx_runtime82.jsx)(Paragraph, { mt: output.title ? "xxs" : void 0, children: description ?? template.description });
  }
  if (children) {
    output.content = /* @__PURE__ */ (0, import_jsx_runtime82.jsx)(Box, { mt: output.title ?? output.description ? "xl" : void 0, children });
  }
  return /* @__PURE__ */ (0, import_jsx_runtime82.jsxs)(StyledNonIdealState, { "data-component-name": "NonIdealState", ...(0, import_helpers89.omit)(props, "title", "type"), children: [
    output.icon,
    /* @__PURE__ */ (0, import_jsx_runtime82.jsxs)(Box, { ml: !isVertical ? "xs" : void 0, mt: isVertical && output.icon ? "sm" : void 0, children: [
      output.title,
      output.description
    ] }),
    output.content
  ] });
}
NonIdealState.displayName = "NonIdealState";

// src/components/Page/Page.tsx
var import_react127 = require("@emotion/react");
var import_styled66 = __toESM(require("@emotion/styled"));
var import_helpers90 = require("@gilbarbara/helpers");
var import_jsx_runtime83 = require("react/jsx-runtime");
var defaultProps42 = {
  centered: false,
  isLoading: false,
  minHeight: "100vh",
  name: "Page",
  skipSpacing: false
};
var StyledPage = (0, import_styled66.default)(Box)((props) => {
  const { minHeight, skipSpacing } = props;
  return import_react127.css`
    ${paddingStyles(props, true)};
    display: grid;
    min-height: ${(0, import_helpers90.px)(minHeight)};
    width: 100%;
    ${!skipSpacing ? getContainerStyles(props, { responsive: true, verticalPadding: true }) : void 0};
  `;
});
function Page(props) {
  const { align, centered, children, isLoading, justify, maxWidth, name, textAlign, ...rest } = {
    ...defaultProps42,
    ...props
  };
  const textAlignMap = {
    start: "left",
    "flex-start": "left",
    center: "center",
    end: "right",
    "flex-end": "right"
  };
  const shouldCenter = isLoading || centered;
  let textAlignValue = textAlign;
  if (!textAlign) {
    if (centered) {
      textAlignValue = "center";
    } else if (align && (["start", "center", "end"].includes(align) || align.startsWith("flex"))) {
      textAlignValue = textAlignMap[align];
    }
  }
  return /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(StyledPage, { "data-component-name": name, ...rest, children: /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(
    Box,
    {
      align: shouldCenter ? "center" : align,
      direction: "column",
      display: shouldCenter || align || justify ? "flex" : void 0,
      fill: true,
      justify: shouldCenter ? "center" : justify,
      maxWidth,
      mx: maxWidth ? "auto" : void 0,
      textAlign: textAlignValue,
      children: isLoading ? /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(Loader, { block: true }) : children
    }
  ) });
}
Page.displayName = "Page";

// src/components/ProgressBar/ProgressBar.tsx
var import_react128 = require("react");
var import_react129 = require("@emotion/react");
var import_styled67 = __toESM(require("@emotion/styled"));
var import_helpers91 = require("@gilbarbara/helpers");
var import_jsx_runtime84 = require("react/jsx-runtime");
var defaultProps43 = {
  accent: "primary",
  backgroundColor: "gray.200",
  hideText: false,
  large: false,
  width: "100%"
};
var StyledProgressBar = (0, import_styled67.default)(
  "div",
  getStyledOptions()
)((props) => {
  const { width } = props;
  const { grayScale: grayScale2 } = getTheme(props);
  return import_react129.css`
    ${baseStyles(props)};
    color: ${isDarkMode(props) && grayScale2["200"]};
    width: ${(0, import_helpers91.px)(width)};
    ${marginStyles(props)};
  `;
});
var StyledProgressTrack = (0, import_styled67.default)(
  "div",
  getStyledOptions()
)((props) => {
  const { accent, backgroundColor, large } = props;
  const { radius: radius2, ...theme } = getTheme(props);
  const { mainColor } = getColorTokens(accent, null, theme);
  const { mainColor: bgColor } = getColorTokens(backgroundColor, null, theme);
  const height = large ? "8px" : "4px";
  return import_react129.css`
    background-color: ${bgColor};
    border-radius: ${large ? radius2.xs : radius2.xxs};
    line-height: 1;
    height: ${height};
    overflow: hidden;

    > div {
      background-color: ${mainColor};
      height: ${height};
      transition: width 0.4s;
      width: 0;
    }
  `;
});
var ProgressBar = (0, import_react128.forwardRef)((props, ref) => {
  const { hideText, step, steps, ...rest } = { ...defaultProps43, ...props };
  const percentage = (0, import_helpers91.round)((0, import_helpers91.clamp)(step / steps * 100));
  const stepLimit = (0, import_helpers91.clamp)(step, 0, steps);
  return /* @__PURE__ */ (0, import_jsx_runtime84.jsxs)(
    StyledProgressBar,
    {
      ref,
      ...rest,
      "aria-valuemax": 100,
      "aria-valuemin": 0,
      "aria-valuenow": percentage,
      "data-component-name": "ProgressBar",
      role: "progressbar",
      children: [
        !hideText && /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(Paragraph, { mb: "xs", size: "lg", children: `Step ${stepLimit} of ${steps}` }),
        /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(StyledProgressTrack, { ...rest, ...props, children: /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("div", { style: { width: `${percentage}%` } }) })
      ]
    }
  );
});
ProgressBar.displayName = "ProgressBar";

// src/components/Quote/Quote.tsx
var import_react130 = require("react");
var import_react131 = require("@emotion/react");
var import_styled68 = __toESM(require("@emotion/styled"));
var import_helpers93 = require("@gilbarbara/helpers");
var import_jsx_runtime85 = require("react/jsx-runtime");
var borderSizes2 = {
  sm: "1px",
  md: "2px",
  lg: "4px"
};
var defaultProps44 = {
  ...textDefaultOptions,
  accent: "primary",
  attributionGap: "md",
  attributionSize: "sm",
  border: "left",
  borderSize: "md",
  gap: "md",
  size: "lg"
};
var StyledFigure = (0, import_styled68.default)(
  "figure",
  getStyledOptions()
)(
  (props) => {
    const { accent, border, borderSize, gap } = props;
    const { spacing: spacing2, ...theme } = getTheme(props);
    const { mainColor } = getColorTokens(accent, null, theme);
    const styles2 = {};
    switch (border) {
      case "bottom": {
        styles2.borderBottom = `${borderSizes2[borderSize]} solid ${mainColor}`;
        styles2.paddingBottom = (0, import_helpers93.px)(spacing2[gap]);
        break;
      }
      case "left": {
        styles2.borderLeft = `${borderSizes2[borderSize]} solid ${mainColor}`;
        styles2.paddingLeft = (0, import_helpers93.px)(spacing2[gap]);
        break;
      }
      case "right": {
        styles2.borderRight = `${borderSizes2[borderSize]} solid ${mainColor}`;
        styles2.paddingRight = (0, import_helpers93.px)(spacing2[gap]);
        break;
      }
      case "top": {
        styles2.borderTop = `${borderSizes2[borderSize]} solid ${mainColor}`;
        styles2.paddingTop = (0, import_helpers93.px)(spacing2[gap]);
        break;
      }
    }
    return import_react131.css`
      ${baseStyles(props)};
      ${styles2};
      display: flex;
      flex-direction: column;
      margin: 0;
    `;
  }
);
var StyledQuote = (0, import_styled68.default)(
  "blockquote",
  getStyledOptions()
)((props) => {
  return import_react131.css`
    ${baseStyles(props)};
    display: block;
    margin: 0;
    ${textStyles(props)};
  `;
});
var StyledAttribution = (0, import_styled68.default)(
  "cite",
  getStyledOptions()
)((props) => {
  const { gap } = props;
  const { spacing: spacing2 } = getTheme(props);
  return import_react131.css`
    display: flex;
    margin-top: ${spacing2[gap]};
    ${textStyles(props)};
  `;
});
var Quote = (0, import_react130.forwardRef)((props, ref) => {
  const { attribution, attributionGap, attributionSize, children, ...rest } = {
    ...defaultProps44,
    ...props
  };
  return /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)(StyledFigure, { ref, "data-component-name": "Quote", ...rest, children: [
    /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(StyledQuote, { ...rest, children }),
    attribution && /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(StyledAttribution, { gap: attributionGap, size: attributionSize, theme: props.theme, children: attribution })
  ] });
});
Quote.displayName = "Quote";

// src/components/RadioGroup/RadioGroup.tsx
var import_react132 = require("react");
var import_react133 = require("@emotion/react");
var import_styled69 = __toESM(require("@emotion/styled"));
var import_hooks10 = require("@gilbarbara/hooks");
var import_jsx_runtime86 = require("react/jsx-runtime");
var defaultProps45 = {
  accent: "primary",
  disabled: false,
  inline: false,
  size: "md"
};
var StyledRadioGroup = (0, import_styled69.default)(
  "div",
  getStyledOptions()
)((props) => {
  const { inline } = props;
  const { spacing: spacing2 } = getTheme(props);
  return import_react133.css`
    display: flex;
    flex-direction: ${inline ? "row" : "column"};

    ${inline && import_react133.css`
      margin-top: 0;

      [data-component-name='Radio'] + [data-component-name='Radio'] {
        margin-left: ${spacing2.xs};
      }
    `};
  `;
});
function RadioGroup(props) {
  const { accent, defaultValue, disabled, inline, items, name, onChange, size, value, ...rest } = {
    ...defaultProps45,
    ...props
  };
  const [selectedValue, setSelectedValue] = (0, import_react132.useState)(value ?? defaultValue);
  const previousProps = (0, import_hooks10.usePrevious)(props);
  (0, import_react132.useEffect)(() => {
    if (previousProps && value && previousProps.value !== value) {
      setSelectedValue(value);
    }
  }, [previousProps, value]);
  const handleChange = (0, import_react132.useCallback)(
    (event) => {
      const { target } = event;
      const numericValue = Number(target.value);
      const currentValue2 = !Number.isNaN(numericValue) ? numericValue : target.value;
      onChange?.(event);
      if (!value && !disabled) {
        setSelectedValue(currentValue2);
      }
    },
    [disabled, onChange, value]
  );
  if (!items?.length) {
    return null;
  }
  const currentValue = !!value && value !== selectedValue ? value : selectedValue;
  return /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(StyledRadioGroup, { inline, ...rest, "data-component-name": "RadioGroup", role: "radiogroup", children: items.map((item) => /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(
    Radio,
    {
      accent: item.accent ?? accent,
      align: "start",
      checked: item.value === currentValue,
      disabled: disabled || item.disabled,
      label: item.label ?? item.value,
      mb: "xxs",
      name,
      onChange: handleChange,
      size,
      type: "radio",
      value: item.value
    },
    item.value
  )) });
}
RadioGroup.displayName = "RadioGroup";

// src/components/Search/Search.tsx
var import_react138 = require("react");
var import_react139 = require("@emotion/react");
var import_styled72 = __toESM(require("@emotion/styled"));
var import_helpers99 = require("@gilbarbara/helpers");
var import_hooks11 = require("@gilbarbara/hooks");

// src/components/Search/Items.tsx
var import_react136 = require("react");
var import_react137 = require("@emotion/react");
var import_styled71 = __toESM(require("@emotion/styled"));
var import_helpers97 = require("@gilbarbara/helpers");

// src/components/Search/Item.tsx
var import_react134 = require("react");
var import_react135 = require("@emotion/react");
var import_styled70 = __toESM(require("@emotion/styled"));
var import_jsx_runtime87 = require("react/jsx-runtime");
var StyledSearchItem = (0, import_styled70.default)(
  "div",
  getStyledOptions()
)((props) => {
  const { accent, isSelected } = props;
  const { darkMode, grayScale: grayScale2, spacing: spacing2, typography: typography2, white: white2, ...theme } = getTheme(props);
  const { mainColor, textColor: textColor2 } = getColorTokens(accent, null, theme);
  const selected = import_react135.css`
    background-color: ${mainColor};
    color: ${textColor2};

    a {
      color: ${textColor2};
    }
  `;
  return import_react135.css`
    color: ${darkMode ? white2 : grayScale2["700"]};
    cursor: pointer;
    font-size: ${typography2.md.fontSize};
    padding: ${spacing2.sm} ${spacing2.md};
    transition: background-color 0.3s;

    &:focus-visible,
    &:hover,
    &:active {
      ${selected};
    }

    ${isSelected && selected},

    a {
      color: ${grayScale2["700"]};
      text-decoration: none;
    }
  `;
});
function SearchItemComponent({ accent, children, isSelected, onSelect, value }) {
  return /* @__PURE__ */ (0, import_jsx_runtime87.jsx)(
    StyledSearchItem,
    {
      accent,
      "data-component-name": "SearchItem",
      "data-value": value,
      isSelected,
      onClick: onSelect,
      onKeyDown: onSelect,
      role: "listitem",
      tabIndex: 0,
      children
    }
  );
}
SearchItemComponent.displayName = "SearchItem";
var Item_default = (0, import_react134.memo)(SearchItemComponent);

// src/components/Search/Items.tsx
var import_jsx_runtime88 = require("react/jsx-runtime");
var StyledSearchItems = (0, import_styled71.default)(
  "div",
  getStyledOptions()
)((props) => {
  const { active, height } = props;
  const { grayScale: grayScale2, radius: radius2, shadow: shadow2, spacing: spacing2, white: white2 } = getTheme(props);
  const darkMode = isDarkMode(props);
  return import_react137.css`
    background-color: ${darkMode ? grayScale2["800"] : white2};
    border-radius: ${radius2.xxs};
    box-shadow: ${shadow2.mid};
    left: 0;
    max-height: ${(0, import_helpers97.px)(height)};
    margin-top: ${spacing2.xs};
    overflow-y: auto;
    position: absolute;
    right: 0;
    top: 100%;
    transform-origin: top;
    transform: scaleY(0);
    transition: transform 0.3s;

    ${active && import_react137.css`
      transform: scaleY(1);
    `}
  `;
});
function getSharedStyles2(spacing2) {
  return import_react137.css`
    align-items: center;
    display: flex;
    padding: ${spacing2.xs} ${spacing2.sm};
    width: 100%;
  `;
}
var Empty2 = (0, import_styled71.default)(
  "div",
  getStyledOptions()
)((props) => {
  const { spacing: spacing2 } = getTheme(props);
  return import_react137.css`
    ${getSharedStyles2(spacing2)};
    justify-content: center;
  `;
});
var SearchItems = (0, import_react136.forwardRef)((props, ref) => {
  const { accent, active, cursor, height, isBusy, items, noResultsLabel, onSelect } = props;
  const isActive = (0, import_react136.useRef)(false);
  (0, import_react136.useEffect)(() => {
    isActive.current = true;
    return () => {
      isActive.current = false;
    };
  }, []);
  const content = !items.length && !isBusy ? /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(Empty2, { children: noResultsLabel }) : items.map((data, index) => /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(
    Item_default,
    {
      accent: data.accent ?? accent,
      isSelected: cursor === index,
      onSelect,
      value: data.value,
      children: data.label ?? data.value
    },
    data.value
  ));
  return /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(
    StyledSearchItems,
    {
      ref,
      active,
      "data-component-name": "SearchItems",
      height,
      role: "list",
      children: content
    }
  );
});
SearchItems.displayName = "SearchItems";
var Items_default2 = SearchItems;

// src/components/Search/Search.tsx
var import_jsx_runtime89 = require("react/jsx-runtime");
var defaultProps46 = {
  accent: "primary",
  borderless: false,
  disableCloseOnBlur: false,
  disableKeyboardNavigation: false,
  disabled: false,
  height: 230,
  hideIcon: false,
  icon: "search",
  loading: false,
  noResultsLabel: "Nothing found",
  onSearchDebounce: 250,
  placeholder: "Search for...",
  showListOnFocus: true
};
var StyledSearch = (0, import_styled72.default)(
  "div",
  getStyledOptions()
)((props) => {
  const { width } = props;
  return import_react139.css`
    position: relative;
    width: ${width ? (0, import_helpers99.px)(width) : "100%"};
    ${marginStyles(props)};
  `;
});
function SearchComponent(props) {
  const {
    accent,
    borderless,
    disableCloseOnBlur,
    disabled,
    disableKeyboardNavigation,
    height,
    hideIcon,
    icon,
    items,
    loading,
    onBlur,
    onFocus,
    onSearch,
    onSearchDebounce,
    onSelect,
    onType,
    placeholder,
    remote,
    showListOnFocus,
    ...rest
  } = { ...defaultProps46, ...props };
  const [{ active, currentItems, cursor, focus, typing, value }, setState] = (0, import_hooks11.useSetState)({
    active: false,
    currentItems: remote ? [] : items,
    cursor: -1,
    focus: false,
    typing: false,
    value: ""
  });
  const mainRef = (0, import_react138.useRef)(null);
  const itemsRef = (0, import_react138.useRef)(null);
  const isMounted = (0, import_react138.useRef)(false);
  const scopeManager = (0, import_react138.useRef)();
  const timeout = (0, import_react138.useRef)(0);
  (0, import_hooks11.useMount)(() => {
    if (!disableKeyboardNavigation) {
      scopeManager.current = new KeyboardScope(mainRef.current, {
        arrowNavigation: "both",
        escCallback: handleToggleList(false),
        selector: '[data-component-name="SearchItem"]'
      });
    }
  });
  (0, import_react138.useEffect)(() => {
    isMounted.current = true;
    return () => {
      isMounted.current = false;
    };
  }, []);
  (0, import_react138.useEffect)(() => {
    if (active) {
      scopeManager.current?.addScope();
    }
    return () => {
      scopeManager.current?.removeScope();
    };
  }, [active]);
  const updateState = (0, import_react138.useCallback)(
    (state) => {
      if (isMounted.current) {
        setState(state);
      }
    },
    [setState]
  );
  const close = (0, import_react138.useCallback)(() => {
    if (disableCloseOnBlur) {
      return;
    }
    updateState({ active: false });
  }, [disableCloseOnBlur, updateState]);
  const handleBlur = (0, import_react138.useCallback)(
    (event) => {
      const inputValue = event.target.value;
      updateState({ cursor: -1, focus: false });
      onBlur?.(inputValue);
    },
    [onBlur, updateState]
  );
  const handleChange = (0, import_react138.useCallback)(
    (event) => {
      const inputValue = event.target.value;
      const nextState = { active: !!inputValue, value: inputValue };
      onType?.(inputValue);
      if (onSearchDebounce) {
        updateState({ ...nextState, typing: true });
        clearTimeout(timeout.current);
        timeout.current = window.setTimeout(() => {
          updateState({
            typing: false,
            currentItems: remote ? [] : items.filter((d) => d.value.toLowerCase().includes(inputValue.toLowerCase()))
          });
          onSearch?.(inputValue);
          timeout.current = 0;
        }, onSearchDebounce);
      } else {
        updateState({
          ...nextState,
          currentItems: remote ? [] : items.filter((d) => d.value.toLowerCase().includes(inputValue.toLowerCase()))
        });
        onSearch?.(inputValue);
      }
    },
    [items, onSearch, onSearchDebounce, onType, remote, updateState]
  );
  const handleFocus = (0, import_react138.useCallback)(
    (event) => {
      const inputValue = event.target.value;
      updateState({
        active: showListOnFocus && (remote ? !!items.length : !!currentItems.length),
        focus: true
      });
      onFocus?.(inputValue);
    },
    [currentItems.length, items.length, onFocus, remote, showListOnFocus, updateState]
  );
  const handleKeyDown2 = (0, import_react138.useCallback)(
    (event) => {
      const { code } = event;
      const itemElement = itemsRef.current;
      if (!active || !itemElement) {
        return;
      }
      const nextCursor = cursor;
      if (code === "Enter") {
        const { dataset } = itemElement.children[cursor];
        updateState({ active: false, value: "" });
        onSelect(dataset.value ?? "");
      }
      updateState({ cursor: nextCursor });
      if (itemElement.children[nextCursor]) {
        itemElement.children[nextCursor].scrollIntoView({ block: "end" });
      }
    },
    [active, cursor, onSelect, updateState]
  );
  const handleSelect = (0, import_react138.useCallback)(
    (event) => {
      const { dataset } = event.currentTarget;
      if ("code" in event && !disableKeyboardNavigation) {
        if (["Enter", "Space"].includes(event.code)) {
          updateState({ active: false, value: "" });
          onSelect(dataset.value ?? "");
        }
      } else {
        updateState({ active: false, value: "" });
        onSelect(dataset.value ?? "");
      }
    },
    [disableKeyboardNavigation, onSelect, updateState]
  );
  const handleToggleList = (force) => {
    return () => {
      updateState({ active: force ?? !active });
    };
  };
  let prefixSpacing = borderless ? 32 : true;
  if (hideIcon) {
    prefixSpacing = false;
  }
  const isBusy = typing || loading;
  return /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(StyledSearch, { ref: mainRef, "data-component-name": "Search", ...rest, children: /* @__PURE__ */ (0, import_jsx_runtime89.jsxs)(ClickOutside, { active, onClick: close, children: [
    /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(
      ComponentWrapper,
      {
        prefix: hideIcon ? void 0 : /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(Icon, { color: focus || value ? accent : void 0, name: icon, size: 24 }),
        size: borderless ? [24, 40] : 40,
        suffix: isBusy ? /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(Icon, { name: "spinner", spin: true }) : void 0,
        children: /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(
          Input2,
          {
            accent,
            autoComplete: "off",
            borderless,
            "data-component-name": "SearchInput",
            disabled,
            name: "search",
            onBlur: handleBlur,
            onChange: handleChange,
            onFocus: handleFocus,
            onKeyDown: handleKeyDown2,
            placeholder,
            prefixSpacing,
            value
          }
        )
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(
      Items_default2,
      {
        ref: itemsRef,
        accent,
        active,
        cursor,
        height,
        isBusy,
        items: remote ? items : currentItems,
        onSelect: handleSelect,
        ...rest
      }
    )
  ] }) });
}
var Search2 = (0, import_react138.memo)(SearchComponent);
Search2.displayName = "Search";

// src/components/Skeleton/Skeleton.tsx
var import_react140 = require("react");
var import_react141 = require("@emotion/react");
var import_styled73 = __toESM(require("@emotion/styled"));
var import_hooks12 = require("@gilbarbara/hooks");

// src/components/Skeleton/utils.ts
var baseDefaultProps = {
  accent: "white",
  animationDelay: 0,
  animationDuration: 1.2,
  appearDuration: 0.4,
  bg: "gray.50",
  isLoaded: false
};

// src/components/Skeleton/Skeleton.tsx
var import_jsx_runtime90 = require("react/jsx-runtime");
var bgAnimation = import_react141.keyframes`
  0% {
    background-position: 60% 0;
  }
  100% {
    background-position: -100% 0;
  }
`;
var defaultProps47 = {
  ...baseDefaultProps,
  fitContent: false
};
var StyledSkeleton = (0, import_styled73.default)(
  "div",
  getStyledOptions()
)((props) => {
  const { accent, animationDelay, animationDuration, bg, fitContent } = props;
  const theme = getTheme(props);
  const { mainColor: accentColor } = getColorTokens(accent, null, theme);
  const { mainColor: bgColor } = getColorTokens(bg, null, theme);
  return import_react141.css`
    ${baseStyles(props)};
    animation: ${bgAnimation} ${animationDuration}s infinite ease-in-out;
    animation-delay: ${animationDelay}s;
    background: ${bgColor} linear-gradient(90deg, ${bgColor} 0, ${bgColor} 10%, ${accentColor} 25%, ${bgColor} 40%, ${bgColor} 100%);
    background-position: 60% 0;
    background-repeat: no-repeat;
    background-size: 200% 100%;
    pointer-events: none;
    user-select: none;
    width: ${fitContent ? "fit-content" : void 0};
    ${layoutStyles(props)};
    ${marginStyles(props)};
    ${radiusStyles(props)};
    
    &:before, &:after, > * {
      visibility: hidden;
    },
  `;
});
var StyledContent4 = (0, import_styled73.default)(
  "div",
  getStyledOptions()
)((props) => {
  const { appearDuration, isFirstRender } = props;
  return import_react141.css`
    animation: ${isFirstRender ? "none" : import_react141.css`
          ${fadeIn} ${appearDuration}s ease-in-out forwards
        `};
    opacity: ${isFirstRender ? 1 : 0};
  `;
});
var Skeleton = (0, import_react140.forwardRef)((props, ref) => {
  const { appearDuration, children, isLoaded, ...rest } = { ...defaultProps47, ...props };
  const isFirstRender = (0, import_hooks12.useIsFirstMount)();
  if (isLoaded) {
    return /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(
      StyledContent4,
      {
        ref,
        appearDuration,
        "data-component-name": "Skeleton",
        isFirstRender,
        children
      }
    );
  }
  let content;
  if (children) {
    content = (0, import_react140.isValidElement)(children) ? children : /* @__PURE__ */ (0, import_jsx_runtime90.jsx)("div", { children });
  }
  return /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(StyledSkeleton, { ref, "data-component-name": "Skeleton", ...rest, children: content });
});
Skeleton.displayName = "Skeleton";

// src/components/Skeleton/SkeletonCircle.tsx
var import_react142 = require("react");
var import_jsx_runtime91 = require("react/jsx-runtime");
var defaultProps48 = {
  ...baseDefaultProps,
  size: 48
};
var SkeletonCircle = (0, import_react142.forwardRef)((props, ref) => {
  const { size, ...rest } = {
    ...defaultProps48,
    ...props
  };
  return /* @__PURE__ */ (0, import_jsx_runtime91.jsx)(
    Skeleton,
    {
      ref,
      "data-component-name": "SkeletonCircle",
      ...rest,
      height: size,
      radius: "round",
      width: size
    }
  );
});
SkeletonCircle.displayName = "SkeletonCircle";

// src/components/Skeleton/SkeletonText.tsx
var import_react143 = require("react");
var import_helpers101 = require("@gilbarbara/helpers");
var import_jsx_runtime92 = require("react/jsx-runtime");
var defaultProps49 = {
  ...baseDefaultProps,
  gap: "xs",
  lines: 3,
  height: 16
};
var SkeletonText = (0, import_react143.forwardRef)((props, ref) => {
  const { children, gap, height, isLoaded, lines, ...rest } = {
    ...defaultProps49,
    ...props
  };
  const getWidth = (index) => {
    if (lines > 1) {
      return index === lines ? "80%" : "100%";
    }
    return "100%";
  };
  return /* @__PURE__ */ (0, import_jsx_runtime92.jsx)("div", { ref, "data-component-name": "SkeletonText", children: (0, import_helpers101.createArray)(lines).map((line, index) => {
    if (isLoaded && index > 0) {
      return null;
    }
    const sizeProps = isLoaded ? null : {
      mb: line === lines ? void 0 : gap,
      width: getWidth(line),
      height
    };
    return /* @__PURE__ */ (0, import_jsx_runtime92.jsx)(Skeleton, {
      isLoaded,
      ...sizeProps,
      ...rest,
      // allows animating the children
      children: index === 0 ? children : void 0
    }, lines.toString() + line);
  }) });
});
SkeletonText.displayName = "SkeletonText";

// src/components/StatusIndicator/StatusIndicator.tsx
var import_react144 = require("@emotion/react");
var import_styled74 = __toESM(require("@emotion/styled"));
var import_helpers102 = require("@gilbarbara/helpers");
var import_jsx_runtime93 = require("react/jsx-runtime");
var defaultProps50 = {
  color: "green",
  tone: "100",
  ratio: 0.7,
  size: 24
};
var StyledStatusIndicator = (0, import_styled74.default)(
  "div",
  getStyledOptions()
)((props) => {
  const { color, ratio, size, tone } = props;
  const { white: white2, ...theme } = getTheme(props);
  const { mainColor, variant } = getColorTokens(color, null, theme);
  let centerBg;
  if (variant) {
    ({ mainColor: centerBg } = getColorTokens(`${variant}.${tone}`, null, theme));
  } else {
    centerBg = getColorWithTone(mainColor, tone);
  }
  const innerSize = size * ratio < size ? size * ratio : size;
  return import_react144.css`
    align-items: center;
    background-color: ${mainColor};
    border-radius: 50%;
    display: inline-flex;
    height: ${(0, import_helpers102.px)(size)};
    justify-content: center;
    line-height: 1;
    width: ${(0, import_helpers102.px)(size)};
    ${marginStyles(props)};

    &:before {
      background-color: ${centerBg};
      border-radius: 50%;
      content: '';
      display: block;
      height: ${(0, import_helpers102.px)(innerSize)};
      position: absolute;
      width: ${(0, import_helpers102.px)(innerSize)};
    }
  `;
});
function StatusIndicator(props) {
  return /* @__PURE__ */ (0, import_jsx_runtime93.jsx)(StyledStatusIndicator, { "data-component-name": "StatusIndicator", ...defaultProps50, ...props });
}
StatusIndicator.displayName = "StatusIndicator";

// src/components/Tabs/Tabs.tsx
var import_react145 = require("react");
var import_react146 = require("@emotion/react");
var import_styled75 = __toESM(require("@emotion/styled"));
var import_helpers104 = require("@gilbarbara/helpers");
var import_hooks13 = require("@gilbarbara/hooks");
var import_is_lite22 = __toESM(require("is-lite"));

// src/components/Tabs/Tab.tsx
var import_jsx_runtime94 = require("react/jsx-runtime");
function Tab(props) {
  const { children } = props;
  return /* @__PURE__ */ (0, import_jsx_runtime94.jsx)("div", { "data-component-name": "Tab", children });
}
Tab.displayName = "Tab";

// src/components/Tabs/Tabs.tsx
var import_jsx_runtime95 = require("react/jsx-runtime");
var defaultProps51 = {
  accent: "primary",
  direction: "vertical",
  disableActiveBorderRadius: false
};
var StyledTabs = (0, import_styled75.default)(
  "div",
  getStyledOptions()
)((props) => {
  const { direction } = props;
  return import_react146.css`
    display: ${direction === "vertical" ? "block" : "flex"};
    ${marginStyles(props)};
  `;
});
var StyledMenu2 = (0, import_styled75.default)(
  "div",
  getStyledOptions()
)((props) => {
  const { direction, width } = props;
  const { grayScale: grayScale2, spacing: spacing2 } = getTheme(props);
  const isHorizontal = direction === "horizontal";
  const isVertical = direction === "vertical";
  return import_react146.css`
    align-items: flex-start;
    display: flex;
    flex-direction: ${isVertical ? "row" : "column"};
    margin-bottom: ${isVertical ? spacing2.md : void 0};
    margin-right: ${isHorizontal ? spacing2.md : void 0};
    max-width: ${width ? (0, import_helpers104.px)(width) : void 0};
    overflow: ${isVertical ? "auto hidden" : void 0};
    position: relative;

    &:before {
      border-bottom: ${isVertical ? `1px solid ${grayScale2["100"]}` : void 0};
      border-right: ${isHorizontal ? `1px solid ${grayScale2["100"]}` : void 0};
      bottom: 0;
      content: '';
      left: ${isVertical ? 0 : void 0};
      position: absolute;
      right: ${isHorizontal ? "-1px" : 0};
      top: ${isHorizontal ? 0 : void 0};
    }
  `;
});
var StyledMenuItem2 = (0, import_styled75.default)(
  ButtonUnstyled,
  getStyledOptions("disabled")
)((props) => {
  const { accent, direction, disableActiveBorderRadius, disabled, isActive } = props;
  const { grayScale: grayScale2, spacing: spacing2, ...theme } = getTheme(props);
  const darkMode = isDarkMode(props);
  const { mainColor } = getColorTokens(accent, null, theme);
  let color = darkMode ? grayScale2["200"] : grayScale2["800"];
  const isVertical = direction === "vertical";
  const isHorizontal = direction === "horizontal";
  if (disabled) {
    color = grayScale2["500"];
  } else if (isActive) {
    color = mainColor;
  }
  return import_react146.css`
    color: ${disabled ? grayScale2["500"] : color};
    cursor: ${disabled ? "not-allowed" : "pointer"};
    line-height: 1;
    padding: ${spacing2.xs} ${spacing2.md};
    position: relative;
    width: ${isHorizontal ? "100%" : void 0};
    white-space: nowrap;

    ${isActive && import_react146.css`
      &:before {
        background-color: ${mainColor};
        bottom: ${isVertical ? "-1px" : 0};
        content: '';
        display: block;
        height: ${isVertical ? "3px" : void 0};
        left: ${isVertical ? 0 : void 0};
        position: absolute;
        right: ${isHorizontal ? "-1px" : 0};
        top: ${isHorizontal ? 0 : void 0};
        width: ${isHorizontal ? "3px" : void 0};

        ${!disableActiveBorderRadius && import_react146.css`
          border-top-left-radius: 3px;
          border-top-right-radius: ${isVertical ? "3px" : void 0};
          border-bottom-left-radius: ${isHorizontal ? "3px" : void 0};
        `};
      }
    `}
  `;
});
var StyledContent5 = (0, import_styled75.default)(
  "div",
  getStyledOptions()
)((props) => {
  const { maxHeight, minHeight } = props;
  return import_react146.css`
    max-height: ${maxHeight ? (0, import_helpers104.px)(maxHeight) : void 0};
    min-height: ${minHeight ? (0, import_helpers104.px)(minHeight) : void 0};
    overflow-y: auto;
  `;
});
function Tabs(props) {
  const {
    accent,
    children,
    defaultId = "",
    id,
    loader,
    maxHeight,
    minHeight,
    noContent,
    onClick,
    ...rest
  } = { ...defaultProps51, ...props };
  const [{ activeId, error, isReady, tabs, width }, setState] = (0, import_hooks13.useSetState)({
    activeId: id ?? defaultId,
    error: false,
    isReady: false,
    tabs: [],
    width: null
  });
  const isMounted = (0, import_react145.useRef)(false);
  const uniqueId = (0, import_react145.useRef)((0, import_helpers104.unique)(6));
  const ref = (0, import_react145.useRef)(null);
  const measurements = (0, import_hooks13.useMeasure)(ref);
  (0, import_react145.useEffect)(() => {
    isMounted.current = true;
    return () => {
      isMounted.current = false;
    };
  }, []);
  (0, import_react145.useEffect)(() => {
    const nextState = {
      error: false,
      isReady: true,
      tabs: []
    };
    import_react145.Children.forEach(children, (child, index) => {
      if (!(0, import_react145.isValidElement)(child)) {
        return;
      }
      if (child.type === Tab) {
        nextState.tabs.push((0, import_helpers104.omit)(child.props, "children"));
        if (!activeId && index === 0) {
          nextState.activeId = child.props.id;
        }
      } else {
        nextState.error = true;
        console.warn("Invalid children detected. Only the Tab component is allowed.");
      }
    });
    setState(nextState);
  }, [activeId, children, setState]);
  (0, import_react145.useEffect)(() => {
    if (measurements.width && measurements.width !== width) {
      setState({ width: measurements.width });
    }
  }, [measurements, setState, width]);
  (0, import_react145.useEffect)(() => {
    setState({ activeId: id });
  }, [id, setState]);
  const handleClickItem = (event) => {
    const { disabled, tabId = "" } = event.currentTarget.dataset;
    if (activeId === tabId || disabled === "true") {
      return;
    }
    if (import_is_lite22.default.undefined(id)) {
      setState({ activeId: tabId });
    }
    onClick?.(tabId);
  };
  if (error) {
    return null;
  }
  const content = {};
  if (isReady) {
    if (tabs.length) {
      if (width || rest.direction === "horizontal") {
        content.menu = /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(
          StyledMenu2,
          {
            "data-component-name": "TabsMenu",
            direction: rest.direction,
            role: "tablist",
            width,
            children: tabs.map((d) => /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(
              StyledMenuItem2,
              {
                accent,
                "aria-controls": `panel-${uniqueId.current}-${d.id}`,
                "aria-selected": d.id === activeId,
                "data-component-name": "TabsMenuItem",
                "data-disabled": !!d.disabled,
                "data-tab-id": d.id,
                direction: rest.direction,
                disableActiveBorderRadius: rest.disableActiveBorderRadius,
                disabled: !!d.disabled,
                isActive: d.id === activeId,
                onClick: handleClickItem,
                role: "tab",
                children: d.title
              },
              d.id
            ))
          }
        );
      }
      content.main = /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(
        StyledContent5,
        {
          "data-component-name": "TabsContent",
          maxHeight,
          minHeight,
          children: import_react145.Children.toArray(children).filter((d) => (0, import_react145.isValidElement)(d) && d.props.id === activeId).map(
            (d) => (0, import_react145.isValidElement)(d) && /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(
              "div",
              {
                "data-component-name": "TabsPanel",
                id: `panel-${uniqueId.current}-${d.props.id}`,
                role: "tabpanel",
                children: d.props.children
              },
              d.props.id
            )
          )
        }
      );
    } else {
      content.main = noContent ?? /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(NonIdealState, { description: "Content not available", icon: "danger-o", size: "sm" });
    }
  } else {
    content.main = loader ?? /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(Loader, {});
  }
  return /* @__PURE__ */ (0, import_jsx_runtime95.jsxs)(StyledTabs, { "data-component-name": "Tabs", ...rest, children: [
    rest.direction === "vertical" && /* @__PURE__ */ (0, import_jsx_runtime95.jsx)("div", { ref }),
    content.menu,
    content.main
  ] });
}
Tabs.displayName = "Tabs";

// src/components/Tag/Tag.tsx
var import_react147 = require("react");
var import_react148 = require("@emotion/react");
var import_styled76 = __toESM(require("@emotion/styled"));
var import_helpers106 = require("@gilbarbara/helpers");
var import_jsx_runtime96 = require("react/jsx-runtime");
var defaultProps52 = {
  ...(0, import_helpers106.omit)(textDefaultOptions, "size"),
  bg: "primary.50",
  invert: false,
  size: "sm"
};
var StyledTag = (0, import_styled76.default)(
  "span",
  getStyledOptions()
)((props) => {
  const { radius: radius2, spacing: spacing2 } = getTheme(props);
  return import_react148.css`
    ${baseStyles(props)};
    align-items: center;
    border-radius: ${radius2.xs};
    display: inline-flex;
    padding: ${spacing2.xxs} ${spacing2.sm};
    ${colorStyles(props)};
    ${marginStyles(props)};
    ${textStyles(props, 1)};
  `;
});
var Tag = (0, import_react147.forwardRef)((props, ref) => {
  const { children, iconAfter, iconBefore, onClickAfter, onClickBefore, ...rest } = {
    ...defaultProps52,
    ...props
  };
  const { typography: typography2 } = getTheme({ theme: (0, import_react148.useTheme)() });
  const iconSize = rest.size ? parseInt(typography2[rest.size].fontSize, 10) - 2 : void 0;
  const icons2 = {};
  if (iconBefore && onClickBefore) {
    icons2.before = /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(ButtonUnstyled, { mr: "xxs", onClick: onClickBefore, children: /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(Icon, { name: iconBefore, size: iconSize }) });
  } else if (iconBefore) {
    icons2.before = /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(Icon, { mr: "xxs", name: iconBefore, size: iconSize });
  }
  if (iconAfter && onClickAfter) {
    icons2.after = /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(ButtonUnstyled, { ml: "xxs", onClick: onClickAfter, children: /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(Icon, { name: iconAfter, size: iconSize }) });
  } else if (iconAfter) {
    icons2.after = /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(Icon, { ml: "xxs", name: iconAfter, size: iconSize });
  }
  return /* @__PURE__ */ (0, import_jsx_runtime96.jsxs)(StyledTag, { ref, "data-component-name": "Tag", ...rest, children: [
    icons2.before,
    /* @__PURE__ */ (0, import_jsx_runtime96.jsx)("span", { children }),
    icons2.after
  ] });
});
Tag.displayName = "Tag";

// src/index.ts
var import_helpers109 = require("@gilbarbara/helpers");

// src/types/index.ts
var types_exports = {};

// src/types/props.ts
var props_exports = {};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Alert,
  Anchor,
  AspectRatio,
  Avatar,
  Box,
  BoxCenter,
  BoxInline,
  Button,
  ButtonGroup,
  ButtonSplit,
  ButtonSplitItem,
  ButtonSplitSeparator,
  ButtonUnstyled,
  Checkbox,
  ClickOutside,
  Collapse,
  ComponentWrapper,
  Container,
  CopyToClipboard,
  DataTable,
  DatePicker,
  DatePickerRange,
  DatePickerSelector,
  Dialog,
  Divider,
  Dropdown,
  Emoji,
  Field,
  Form,
  FormGroup,
  Grid,
  H1,
  H2,
  H3,
  H4,
  H5,
  H6,
  Icon,
  Input,
  InputColor,
  InputFile,
  Jumbo,
  Label,
  List,
  ListItem,
  Loader,
  Menu,
  MenuItem,
  MenuSeparator,
  MenuTitle,
  Modal,
  NonIdealState,
  Page,
  Pagination,
  Paragraph,
  Portal,
  ProgressBar,
  Props,
  Quote,
  Radio,
  RadioGroup,
  Search,
  Select,
  Skeleton,
  SkeletonCircle,
  SkeletonText,
  Spacer,
  StatusIndicator,
  Tab,
  Tabs,
  Tag,
  Text,
  Textarea,
  Toggle,
  Tooltip,
  Truncate,
  Types,
  animateIcon,
  fadeIn,
  fadeInOut,
  fadeOut,
  generatePalette,
  getContainerStyles,
  icons,
  mergeTheme,
  px,
  responsive,
  rotate,
  theme
});
//# sourceMappingURL=index.js.map