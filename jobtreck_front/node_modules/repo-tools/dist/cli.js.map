{"version":3,"sources":["../src/cli.ts","../src/commands/check-remote.ts","../src/helpers.ts","../src/commands/install-packages.ts"],"names":["command","describe","handler","import_child_process","import_kolorist"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,YAAuB;;;ACFvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAmC;;;ACAnC,2BAAqB;AACrB,gBAAyC;AACzC,kBAAqB;AACrB,kBAA0B;AAEnB,IAAM,UAAM,uBAAU,yBAAI;AAE1B,IAAM,aAAa,MAAc;AACtC,QAAM,kBAAc,kBAAK,QAAQ,IAAI,GAAG,cAAc;AAGtD,MAAI,KAAC,sBAAW,WAAW,GAAG;AAC5B,WAAO;AAAA,EACT;AAEA,QAAM,iBAAa,wBAAa,aAAa,MAAM;AACnD,QAAM,EAAE,QAAQ,IAAI,KAAK,MAAM,UAAU;AAEzC,SAAO;AACT;;;ADfO,IAAM,UAAU;AAChB,IAAM,WAAW;AACjB,IAAM,UAAU,MACrB,IAAI,qCAAqC,EACtC;AAAA,EAAK,MACJ,IAAI,mCAAmC,EACpC;AAAA,IAAK,MACJ,QAAQ,IAAI;AAAA,MACV,IAAI,iBAAiB;AAAA,MACrB,IAAI,oBAAoB;AAAA,MACxB,IAAI,uBAAuB;AAAA,IAC7B,CAAC,EACE,KAAK,YAAU;AACd,YAAM,CAAC,EAAE,QAAQ,OAAO,GAAG,EAAE,QAAQ,QAAQ,GAAG,EAAE,QAAQ,MAAM,CAAC,IAAI;AAErE,UAAI,WAAW,SAAS;AACtB,gBAAQ,QAAI,uBAAM,4BAAuB,CAAC;AAAA,MAC5C,WAAW,WAAW,OAAO;AAC3B,gBAAQ,QAAI,qBAAI,iDAA4C,CAAC;AAC7D,gBAAQ,KAAK,CAAC;AAAA,MAChB;AAAA,IACF,CAAC,EACA,MAAM,WAAS;AACd,UAAI,MAAM,QAAQ,SAAS,yBAAyB,GAAG;AACrD,gBAAQ,QAAI,wBAAO,oBAAe,CAAC;AAAA,MACrC,WAAW,MAAM,QAAQ,SAAS,+BAA+B,GAAG;AAClE,gBAAQ,QAAI,wBAAO,yBAAoB,CAAC;AAAA,MAC1C,OAAO;AACL,gBAAQ,QAAI,wBAAO,mBAAc,MAAM,OAAO,EAAE,CAAC;AAAA,MACnD;AAAA,IACF,CAAC;AAAA,EACL,EACC,MAAM,MAAM;AACX,YAAQ,QAAI,wBAAO,kBAAa,CAAC;AAAA,EACnC,CAAC;AACL,EACC,MAAM,MAAM;AACX,UAAQ,QAAI,wBAAO,sBAAiB,CAAC;AACvC,CAAC;;;AE1CL;AAAA;AAAA,iBAAAA;AAAA,EAAA,gBAAAC;AAAA,EAAA,eAAAC;AAAA;AAAA,IAAAC,wBAAqB;AAErB,oCAAuB;AACvB,IAAAC,mBAA8B;AAIvB,IAAMJ,WAAU;AAChB,IAAMC,YAAW;AAExB,IAAM,UAAU,CAAC,KAAa,UAAU;AACtC,UAAQ,QAAI,yBAAO,6CAAwC,EAAE,cAAc,CAAC;AAE5E,kCAAK,GAAG,EAAE,UAAU,EAAE,QAAQ,KAAK,QAAQ,MAAM;AACnD;AAEO,IAAMC,WAAU,YAA2B;AAChD,QAAM,EAAE,OAAO,IAAI,MAAM,IAAI,4DAA4D;AAEzF,MAAI,OAAO,MAAM,cAAc,GAAG;AAChC,QAAI;AACF,YAAM,KAAK,UAAM,sCAAO;AAExB,cAAQ,EAAE;AAAA,IACZ,QAAQ;AACN,cAAQ,KAAK,iDAAiD;AAE9D,cAAQ;AAAA,IACV;AAAA,EACF,OAAO;AACL,YAAQ,QAAI,wBAAM,0BAAqB,CAAC;AAAA,EAC1C;AACF;;;AHxBO,IAAM,QACV,iBAAW,YAAY,EACvB,QAAQ,oBAAW,EACnB,QAAQ,wBAAe,EACvB,cAAc,CAAC,EACf,KAAK,EACL,KAAK,EAAE,EACP,QAAQ,WAAW,CAAC;AAEvB,IAAO,cAAQ,MAAM,OAAO,EAAE","sourcesContent":["#!/usr/bin/env node\n\nimport * as yargs from 'yargs';\n\nimport * as checkRemote from './commands/check-remote';\nimport * as installPackages from './commands/install-packages';\nimport { getVersion } from './helpers';\n\nexport const tools = yargs\n  .scriptName('repo-tools')\n  .command(checkRemote)\n  .command(installPackages)\n  .demandCommand(1)\n  .help()\n  .wrap(72)\n  .version(getVersion());\n\nexport default tools.strict().argv;\n","import { green, red, yellow } from 'kolorist';\n\nimport { run } from '../helpers';\n\nexport const command = 'check-remote';\nexport const describe = 'Check if repo has remote commits';\nexport const handler = (): Promise<void> =>\n  run('git rev-parse --is-inside-work-tree')\n    .then(() =>\n      run('git ls-remote --exit-code --heads')\n        .then(() =>\n          Promise.all([\n            run('git rev-parse @'),\n            run('git rev-parse @{u}'),\n            run('git merge-base @ @{u}'),\n          ])\n            .then(values => {\n              const [{ stdout: $local }, { stdout: $remote }, { stdout: $base }] = values;\n\n              if ($local === $remote) {\n                console.log(green('✔ Repo is up-to-date!'));\n              } else if ($local === $base) {\n                console.log(red('⊘ You need to pull, there are new commits.'));\n                process.exit(1);\n              }\n            })\n            .catch(error => {\n              if (error.message.includes('no upstream configured ')) {\n                console.log(yellow('⚠ No upstream'));\n              } else if (error.message.includes(\"fatal: ambiguous argument '@'\")) {\n                console.log(yellow('⚠ No local commits'));\n              } else {\n                console.log(yellow(`⚠ Warning: ${error.message}`));\n              }\n            }),\n        )\n        .catch(() => {\n          console.log(yellow(`⚠ No remote`));\n        }),\n    )\n    .catch(() => {\n      console.log(yellow('⚠ not under git'));\n    });\n","import { exec } from 'child_process';\nimport { existsSync, readFileSync } from 'fs';\nimport { join } from 'path';\nimport { promisify } from 'util';\n\nexport const run = promisify(exec);\n\nexport const getVersion = (): string => {\n  const packagePath = join(process.cwd(), 'package.json');\n\n  /* c8 ignore next 3 */\n  if (!existsSync(packagePath)) {\n    return '--';\n  }\n\n  const packageSrc = readFileSync(packagePath, 'utf8');\n  const { version } = JSON.parse(packageSrc);\n\n  return version;\n};\n","import { exec } from 'child_process';\n\nimport { detect } from 'detect-package-manager';\nimport { green, yellow } from 'kolorist';\n\nimport { run } from '../helpers';\n\nexport const command = 'install-packages';\nexport const describe = 'Run `npm/yarn/pnpm/bun install` if package.json has changed';\n\nconst install = (pm: string = 'npm') => {\n  console.log(yellow(`▼ package.json is modified. Running \"${pm} install\"...`));\n\n  exec(`${pm} install`).stdout?.pipe(process.stdout);\n};\n\nexport const handler = async (): Promise<void> => {\n  const { stdout } = await run('git diff-tree -r --name-only --no-commit-id ORIG_HEAD HEAD');\n\n  if (stdout.match('package.json')) {\n    try {\n      const pm = await detect();\n\n      install(pm);\n    } catch {\n      console.warn('Could not detect package manager. Trying npm...');\n\n      install();\n    }\n  } else {\n    console.log(green('✔ Nothing to update'));\n  }\n};\n"]}